{
.appVersion = "3133";
.formatVersion = 3;
axes = (
{
hidden = 1;
name = "Optical size";
tag = opsz;
}
);
customParameters = (
{
name = vendorID;
value = "CLT ";
},
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"bit 29"
);
},
{
name = glyphOrder;
value = (
.notdef,
space,
A,
Aacute,
Abreve,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
B,
C,
Cacute,
Ccaron,
Ccedilla,
D,
Eth,
Dcaron,
Dcroat,
E,
Eacute,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
F,
G,
Gbreve,
uni0122,
H,
I,
Iacute,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
J,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
O,
Oacute,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
uni0218,
uni1E9E,
T,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
V,
W,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Z,
Zacute,
Zcaron,
Zdotaccent,
S.001,
a,
aacute,
abreve,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
b,
c,
cacute,
ccaron,
ccedilla,
d,
eth,
dcaron,
dcroat,
e,
eacute,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
f,
g,
gbreve,
uni0123,
h,
i,
dotlessi,
iacute,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
j,
uni0237,
k,
uni0137,
l,
lacute,
lcaron,
uni013C,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
o,
oacute,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
uni0219,
germandbls,
t,
tcaron,
uni0163,
uni021B,
u,
uacute,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
v,
w,
x,
y,
yacute,
ycircumflex,
ydieresis,
z,
zacute,
zcaron,
zdotaccent,
f_i,
f_l,
ordfeminine,
ordmasculine,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
uni2070,
uni00B9,
uni00B2,
uni00B3,
fraction,
onehalf,
onequarter,
threequarters,
uni00A0,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
florin,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
bar,
brokenbar,
dagger,
daggerdbl,
cent,
currency,
dollar,
Euro,
sterling,
yen,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
logicalnot,
asciicircum,
uni00B5,
percent,
perthousand,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek
);
}
);
date = "2022-01-09 11:12:50 +0000";
familyName = Messapia;
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature sups;
feature frac;
feature ordn;
";
tag = aalt;
},
{
automatic = 1;
code = "lookup ccmp_Other_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dieresiscomb dotaccentcomb gravecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	@CombiningNonTopAccents = [cedillacomb ogonekcomb];
	sub [i j]' @CombiningTopAccents by [idotless jdotless];
	sub [i j]' @CombiningNonTopAccents @CombiningTopAccents by [idotless jdotless];
} ccmp_Other_1;

lookup ccmp_latn_1 {
	sub fi by f i;
	sub fl by f l;
} ccmp_latn_1;

script latn;
lookup ccmp_latn_1;
";
tag = ccmp;
},
{
automatic = 1;
code = "lookup locl_latn_0 {
	script latn;
	language AZE;
	sub i by idotaccent;
	language CRT;
	sub i by idotaccent;
	language KAZ;
	sub i by idotaccent;
	language TAT;
	sub i by idotaccent;
	language TRK;
	sub i by idotaccent;
} locl_latn_0;

lookup locl_latn_1 {
	script latn;
	language ROM;
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
	language MOL;
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
} locl_latn_1;
";
tag = locl;
},
{
automatic = 1;
code = "sub zero by zerosuperior;
sub one by onesuperior;
sub two by twosuperior;
sub three by threesuperior;
";
tag = sups;
},
{
automatic = 1;
code = "sub one slash four by onequarter;
sub one slash two by onehalf;
sub three slash four by threequarters;
";
tag = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
";
tag = ordn;
},
{
automatic = 1;
code = "lookupflag IgnoreMarks;
sub f h by f_h;
";
tag = dlig;
},
{
automatic = 1;
code = "lookupflag IgnoreMarks;
sub f f by f_f;
sub f i by f_i;
sub f l by f_l;
";
tag = liga;
}
);
fontMaster = (
{
axesValues = (
0
);
customParameters = (
{
name = typoAscender;
value = 944;
},
{
name = typoDescender;
value = -250;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 944;
},
{
name = winDescent;
value = 250;
},
{
name = hheaAscender;
value = 944;
},
{
name = hheaDescender;
value = -250;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\0120 26 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01231 4 15 8 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01235 2 23 6 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0122048 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01233 2 17 6 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    85,\012    85,\012    26,\012    26,\012    670,\012    \"-23\",\012    700,\012    500,\012    0,\012    \"-200\",\012    670,\012    \"-23\",\012    700,\012    514,\012    \"-14\",\012    \"-200\",\012    109,\012    109,\012    28,\012    28,\012    670,\012    0,\012    670,\012    \"-14\"\012)";
}
);
id = m01;
metricValues = (
{
over = 15;
pos = 750;
},
{
over = 15;
pos = 700;
},
{
over = 15;
pos = 500;
},
{
over = -15;
},
{
pos = -250;
},
{
}
);
name = Regular;
},
{
axesValues = (
1
);
customParameters = (
{
name = typoAscender;
value = 730;
},
{
name = typoDescender;
value = -250;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 930;
},
{
name = winDescent;
value = 270;
},
{
name = hheaAscender;
value = 930;
},
{
name = hheaDescender;
value = -250;
},
{
name = strikeoutPosition;
value = 250;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\0120 26 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01231 4 15 8 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01235 2 23 6 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0122048 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01233 2 17 6 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    165,\012    165,\012    130,\012    130,\012    700,\012    0,\012    730,\012    500,\012    0,\012    \"-242\",\012    720,\012    \"-18\",\012    730,\012    520,\012    \"-20\",\012    \"-242\",\012    180,\012    180,\012    150,\012    150,\012    720,\012    0,\012    720,\012    \"-16\"\012)";
}
);
iconName = Bold;
id = "03DC8633-12B9-4C09-834B-15CC0827035A";
metricValues = (
{
over = 15;
pos = 750;
},
{
over = 15;
pos = 700;
},
{
over = 15;
pos = 500;
},
{
over = -15;
},
{
pos = -250;
},
{
}
);
name = Bold;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
width = 600;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
width = 600;
}
);
note = ".notdef";
},
{
glyphname = space;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
width = 423;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
width = 318;
}
);
note = space;
unicode = 32;
},
{
glyphname = A;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (413,0);
},
{
name = ogonek;
pos = (799,10);
},
{
name = top;
pos = (388,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,615,l),
(360,644,l),
(95,74,l),
(-50,1,l),
(-50,0,l),
(252,0,l),
(252,2,l),
(137,67,l)
);
},
{
closed = 1;
nodes = (
(557,269,l),
(192,269,l),
(178,238,l),
(572,238,l)
);
},
{
closed = 1;
nodes = (
(325,700,l),
(630,67,l),
(526,2,l),
(526,0,l),
(862,0,l),
(862,2,l),
(723,67,l),
(417,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
18 2 2 4 0 13 10 2 1 2 2 76 5 1 4 0 2 1 4 2 103 0 0 0 17 77 3 1 1 1 21 1 78 17 17 17 19 17 19 34 19 34 19 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 822;
},
{
anchors = (
{
name = bottom;
pos = (480,0);
},
{
name = ogonek;
pos = (960,0);
},
{
name = top;
pos = (480,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(652,279,l),
(304,279,l),
(244,161,l),
(712,161,l)
);
},
{
closed = 1;
nodes = (
(778,0,l),
(960,0,l),
(575,700,l),
(383,700,l),
(0,0,l),
(178,0,l),
(478,578,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
2 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 3 2 0 3 104 0 1 1 17 77 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 1 133 0 0 0 3 2 0 3 104 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 1 133 4 1 2 3 2 134 0 0 3 3 0 87 0 0 0 3 96 0 3 0 3 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 17 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 960;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (163,500);
},
{
name = top;
pos = (163,731);
}
);
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (265,200);
ref = acutecomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (345,200);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 1 2 0 1 103 7 1 6 0 4 3 6 4 104 0 2 2 17 77 5 1 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 6 1 2 6 128 0 0 0 1 2 0 1 103 7 1 6 0 4 3 6 4 104 5 1 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 6 1 2 6 128 5 1 3 4 3 134 0 0 0 1 2 0 1 103 7 1 6 4 4 6 87 7 1 6 6 4 96 0 4 6 4 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
14 14 14 16 14 16 17 17 17 18 18 16 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 960;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (204,200);
ref = brevecomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (134,200);
ref = brevecomb;
}
);
width = 960;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (220,200);
ref = circumflexcomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (92,200);
ref = circumflexcomb;
}
);
width = 960;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (189,500);
},
{
name = top;
pos = (189,673);
}
);
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (206,200);
ref = dieresiscomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (226,200);
ref = dieresiscomb;
}
);
width = 960;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (163,500);
},
{
name = top;
pos = (163,721);
}
);
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (225,200);
ref = gravecomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (210,200);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 7 1 1 2 0 1 103 8 1 6 0 4 3 6 4 104 0 2 2 17 77 5 1 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 2 1 6 1 2 6 128 0 0 7 1 1 2 0 1 103 8 1 6 0 4 3 6 4 104 5 1 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 6 1 2 6 128 5 1 3 4 3 134 0 0 7 1 1 2 0 1 103 8 1 6 4 4 6 87 8 1 6 6 4 96 0 4 6 4 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
14 14 0 0 14 16 14 16 13 12 11 10 9 8 7 6 0 5 0 4 33 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 960;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (209,200);
ref = macroncomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (154,200);
ref = macroncomb;
}
);
width = 960;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
kernLeft = A;
kernRight = A;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
pos = (249,0);
}
);
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (594,10);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
36 2 2 7 0 31 28 2 1 5 15 14 2 2 1 3 76 8 1 7 0 5 1 7 5 103 0 2 0 3 2 3 101 0 0 0 17 77 6 4 2 1 1 21 1 78 35 35 35 37 35 37 34 19 21 37 35 34 19 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (580,15);
ref = ogonekcomb;
}
);
width = 960;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (254,200);
ref = ringcomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (221,200);
ref = ringcomb;
}
);
width = 960;
}
);
unicode = 197;
},
{
glyphname = Atilde;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = A;
},
{
pos = (197,200);
ref = tildecomb;
}
);
width = 822;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = A;
},
{
pos = (114,200);
ref = tildecomb;
}
);
width = 960;
}
);
unicode = 195;
},
{
glyphname = AE;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (-13,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(621,637,l),
(590,662,l),
(95,74,l),
(-50,1,l),
(-50,0,l),
(265,0,l),
(265,2,l),
(150,67,l)
);
},
{
closed = 1;
nodes = (
(587,258,l),
(262,258,l),
(248,226,l),
(602,226,l)
);
},
{
closed = 1;
nodes = (
(570,62,l),
(462,3,l),
(462,0,l),
(1042,0,l),
(1081,-31,l),
(1083,-31,l),
(1196,256,l),
(1194,256,l),
(994,31,l),
(653,31,l),
(653,341,l),
(911,341,l),
(991,222,l),
(993,222,l),
(993,492,l),
(991,492,l),
(911,373,l),
(653,373,l),
(653,670,l),
(992,670,l),
(1172,491,l),
(1174,493,l),
(1071,720,l),
(1069,720,l),
(1025,700,l),
(467,700,l),
(467,698,l),
(570,638,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
38 2 2 3 1 9 1 2 3 23 1 4 5 33 30 2 6 9 4 76 7 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 7 8 7 134 0 2 0 5 4 2 5 103 12 1 11 0 9 6 11 9 103 0 1 1 0 95 0 0 0 19 77 0 4 4 3 95 0 3 3 20 77 0 6 6 8 95 10 1 8 8 21 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 7 8 7 134 0 2 0 5 4 2 5 103 0 3 0 4 11 3 4 103 12 1 11 0 9 6 11 9 103 0 1 1 0 95 0 0 0 19 77 0 6 6 8 95 10 1 8 8 21 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
37 37 37 39 37 39 36 34 32 31 17 19 17 17 17 17 17 21 21 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1206;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(706,279,l),
(292,279,l),
(232,161,l),
(766,161,l)
);
},
{
closed = 1;
nodes = (
(689,0,l),
(689,0,l),
(689,700,l),
(594,700,l),
(0,0,l),
(197,0,l),
(689,578,l)
);
},
{
closed = 1;
nodes = (
(687,0,l),
(1387,0,l),
(1387,140,l),
(862,140,l),
(862,291,l),
(1250,291,l),
(1250,431,l),
(862,431,l),
(862,560,l),
(1379,560,l),
(1379,700,l),
(687,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 3 10 2 1 1 2 95 0 2 2 19 77 0 6 6 7 95 9 1 7 7 18 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
10 1 1 3 4 3 1 114 0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 0 3 3 2 95 0 2 2 19 77 0 6 6 7 95 9 1 7 7 18 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
10 1 1 3 4 3 1 114 0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 0 6 9 1 7 6 7 99 0 3 3 2 95 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1477;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "CF4AAD94-A357-48E2-B32C-687C1FA4256A";
name = "21 feb 22, 14:43";
shapes = (
{
closed = 1;
nodes = (
(935,284,l),
(581,284,l),
(857,575,l),
(935,575,l),
(935,575,l)
);
},
{
closed = 1;
nodes = (
(310,0,l),
(458,156,l),
(935,156,l),
(935,0,l),
(1819,0,l),
(1819,150,l),
(1125,150,l),
(1125,320,l),
(1775,320,l),
(1775,449,l),
(1125,449,l),
(1125,585,l),
(1819,585,l),
(1819,734,l),
(775,734,l),
(75,0,l),
(75,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 3 10 2 1 1 2 95 0 2 2 19 77 0 6 6 7 95 9 1 7 7 18 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
10 1 1 3 4 3 1 114 0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 0 3 3 2 95 0 2 2 19 77 0 6 6 7 95 9 1 7 7 18 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
10 1 1 3 4 3 1 114 0 4 0 5 0 4 5 103 0 0 0 8 6 0 8 103 0 6 9 1 7 6 7 99 0 3 3 2 95 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1894;
}
);
metricLeft = A;
metricRight = E;
note = AE;
unicode = 198;
},
{
glyphname = B;
kernLeft = B;
kernRight = B;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,0,l),
(40,2,l),
(163,62,l),
(165,638,l),
(40,698,l),
(40,700,l),
(423,700,ls),
(630,700,o),
(715,645,o),
(715,525,cs),
(715,436,o),
(640,381,o),
(526,371,c),
(526,369,l),
(644,359,o),
(744,293,o),
(744,186,cs),
(744,57,o),
(632,0,o),
(423,0,cs)
);
},
{
closed = 1;
nodes = (
(423,32,ls),
(549,32,o),
(640,66,o),
(640,186,cs),
(640,314,o),
(519,354,o),
(433,354,cs),
(248,354,l),
(248,32,l)
);
},
{
closed = 1;
nodes = (
(433,386,ls),
(516,386,o),
(625,429,o),
(625,534,cs),
(625,635,o),
(565,671,o),
(423,671,cs),
(248,671,l),
(248,386,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
17 1 6 5 18 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 6 3 6 0 3 128 0 6 0 3 4 6 3 103 0 5 5 1 95 0 1 1 17 77 0 4 4 2 95 7 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 6 3 6 0 3 128 0 1 0 5 6 1 5 103 0 6 0 3 4 6 3 103 0 4 4 2 95 7 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 43 41 35 33 32 30 24 22 0 21 0 19 37 53 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 802;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(101,0,l),
(100,700,l),
(611,700,ls),
(788,700,o),
(875,640,o),
(875,526,cs),
(875,446,o),
(850,384,o),
(719,358,c),
(850,334,o),
(906,279,o),
(906,191,cs),
(906,64,o),
(804,0,o),
(537,0,cs)
);
},
{
closed = 1;
nodes = (
(591,413,ls),
(662,413,o),
(696,444,o),
(696,496,cs),
(696,547,o),
(663,570,o),
(591,570,cs),
(272,570,l),
(272,413,l)
);
},
{
closed = 1;
nodes = (
(581,140,ls),
(672,140,o),
(717,172,o),
(717,228,cs),
(717,283,o),
(672,311,o),
(581,311,cs),
(273,311,l),
(273,140,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 3 0 4 5 3 4 103 0 2 2 0 95 0 0 0 17 77 0 5 5 1 95 6 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 0 0 2 3 0 2 103 0 3 0 4 5 3 4 103 0 5 5 1 95 6 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 2 3 0 2 103 0 3 0 4 5 3 4 103 0 5 1 1 5 87 0 5 5 1 95 6 1 1 5 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 31 29 26 24 23 21 17 15 0 14 0 13 42 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 986;
},
{
associatedMasterId = m01;
layerId = "629DC46D-F0E8-43FA-AE91-5458410DB302";
name = "11 feb 22, 17:44";
shapes = (
{
closed = 1;
nodes = (
(35,0,l),
(35,2,l),
(158,62,l),
(160,588,l),
(35,648,l),
(35,650,l),
(379,650,ls),
(520,650,o),
(750,659,o),
(750,492,cs),
(750,401,o),
(694,339,o),
(558,339,c),
(558,337,l),
(727,337,o),
(774,273,o),
(774,182,cs),
(774,-6,o),
(539,0,o),
(377,0,cs)
);
},
{
closed = 1;
nodes = (
(349,28,ls),
(575,28,o),
(670,61,o),
(670,176,cs),
(670,291,o),
(575,324,o),
(349,324,cs),
(245,324,l),
(245,28,l)
);
},
{
closed = 1;
nodes = (
(349,352,ls),
(471,352,o),
(660,349,o),
(660,487,cs),
(660,629,o),
(469,624,o),
(349,624,cs),
(245,624,l),
(245,352,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
17 1 6 5 18 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 6 3 6 0 3 128 0 6 0 3 4 6 3 103 0 5 5 1 95 0 1 1 17 77 0 4 4 2 95 7 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 0 6 3 6 0 3 128 0 1 0 5 6 1 5 103 0 6 0 3 4 6 3 103 0 4 4 2 95 7 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 43 41 35 33 32 30 24 22 0 21 0 19 37 53 8 7 24 
CALL[ ]	/* CallFunction */";
};
width = 804;
}
);
metricLeft = H;
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = C;
kernRight = C;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (440,0);
},
{
name = top;
pos = (430,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,25,o),
(154,140,o),
(154,350,cs),
(154,560,o),
(270,680,o),
(430,680,cs),
(563,680,o),
(668,620,o),
(761,402,c),
(764,403,l),
(706,697,l),
(704,697,l),
(659,634,l),
(598,686,o),
(528,715,o),
(427,715,cs),
(222,715,o),
(54,575,o),
(54,354,cs),
(54,125,o),
(232,-15,o),
(439,-15,cs),
(594,-15,o),
(714,70,o),
(770,207,c),
(736,221,l),
(682,101,o),
(592,25,o),
(449,25,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
15 1 2 1 33 32 17 14 4 3 2 2 76 0 2 2 1 97 0 1 1 17 77 0 3 3 0 97 0 0 0 27 0 78 38 40 38 34 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 819;
},
{
anchors = (
{
name = bottom;
pos = (516,-15);
},
{
name = top;
pos = (439,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(837,629,l),
(744,681,o),
(628,715,o),
(496,715,cs),
(269,715,o),
(50,584,o),
(50,353,cs),
(50,109,o),
(269,-15,o),
(516,-15,cs),
(654,-15,o),
(761,17,o),
(834,63,c),
(761,191,l),
(702,148,o),
(633,125,o),
(518,125,cs),
(341,125,o),
(235,200,o),
(235,353,cs),
(235,496,o),
(344,575,o),
(518,575,cs),
(613,575,o),
(688,550,o),
(761,499,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
24 1 0 3 25 10 2 1 0 11 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 3 97 0 3 3 23 77 0 1 1 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 3 97 0 3 3 19 77 0 1 1 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 0 2 1 2 101 0 0 0 3 97 0 3 3 19 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 0 1 3 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 36 36 32 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 882;
},
{
associatedMasterId = m01;
layerId = "05268723-59E2-4209-B190-C8C69F2B015C";
name = "11 feb 22, 17:54";
shapes = (
{
closed = 1;
nodes = (
(695,217,l),
(647,97,o),
(540.333,26,o),
(415,26,cs),
(252.545,26,o),
(130,151.73,o),
(130,321,cs),
(130,496,o),
(218,639,o),
(398,639,cs),
(523.333,639,o),
(618.667,574,o),
(712,406,c),
(715,407,l),
(657,651,l),
(655,651,l),
(610,588,l),
(548.667,640,o),
(469.333,669,o),
(380,669,cs),
(183,669,o),
(20,514,o),
(20,321,cs),
(20,142,o),
(181,-17,o),
(388,-17,cs),
(543.328,-17,o),
(675.064,68.104,o),
(722,205,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
15 1 2 1 33 32 17 14 4 3 2 2 76 0 2 2 1 97 0 1 1 17 77 0 3 3 0 97 0 0 0 27 0 78 38 40 38 34 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 732;
}
);
metricLeft = "=O";
metricRight = "=O-5";
note = C;
unicode = 67;
},
{
glyphname = Cacute;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (307,200);
ref = acutecomb;
}
);
width = 819;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = C;
},
{
pos = (304,200);
ref = acutecomb;
}
);
width = 882;
}
);
unicode = 262;
},
{
glyphname = Ccaron;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (262,200);
ref = caroncomb;
}
);
width = 819;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = C;
},
{
pos = (51,200);
ref = caroncomb;
}
);
width = 882;
}
);
unicode = 268;
},
{
glyphname = Ccedilla;
kernLeft = C;
kernRight = C;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
alignment = -1;
pos = (293,0);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
38 1 4 3 56 55 40 37 4 5 4 2 76 24 1 2 1 75 23 22 13 3 1 73 0 0 0 1 0 1 101 0 4 4 3 97 0 3 3 17 77 0 5 5 2 97 0 2 2 27 2 78 38 40 38 36 45 51 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 819;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = C;
},
{
pos = (281,-15);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
28 1 0 4 29 10 2 1 0 11 1 3 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 3 2 134 0 0 0 4 97 0 4 4 23 77 0 1 1 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 3 2 134 0 0 0 4 97 0 4 4 19 77 0 1 1 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 3 2 134 0 1 0 3 2 1 3 105 0 0 0 4 97 0 4 4 19 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 3 2 134 0 4 0 0 1 4 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 18 22 36 32 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 882;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = D;
kernLeft = D;
kernRight = D;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (420,0);
},
{
name = center;
pos = (420,350);
},
{
name = top;
pos = (420,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,0,l),
(40,2,l),
(168,74,l),
(169,625,l),
(40,698,l),
(40,700,l),
(393,700,ls),
(608,700,o),
(787,575,o),
(787,364,cs),
(787,134,o),
(604,0,o),
(393,0,cs)
);
},
{
closed = 1;
nodes = (
(413,29,ls),
(548,29,o),
(687,143,o),
(687,364,cs),
(687,565,o),
(549,672,o),
(413,672,cs),
(252,672,l),
(252,29,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 10 2 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 0 95 0 0 0 17 77 0 3 3 1 95 4 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 2 3 0 2 103 0 3 3 1 95 4 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 23 21 17 15 0 14 0 12 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 841;
},
{
anchors = (
{
name = bottom;
pos = (512,0);
},
{
name = center;
pos = (512,350);
},
{
name = top;
pos = (472,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(811,0,o),
(973,136,o),
(973,357,cs),
(973,570,o),
(812,700,o),
(491,700,cs),
(100,700,l),
(100,0,l),
(491,0,ls)
);
},
{
closed = 1;
nodes = (
(272,570,l),
(491,570,ls),
(696,570,o),
(786,512,o),
(786,354,cs),
(786,194,o),
(696,134,o),
(491,134,cs),
(272,134,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 0 95 0 0 0 17 77 0 3 3 1 95 4 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 2 3 0 2 103 0 3 3 1 95 4 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 2 3 0 2 103 0 3 1 1 3 87 0 3 3 1 95 4 1 1 3 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 21 19 13 11 0 10 0 9 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1023;
},
{
associatedMasterId = m01;
layerId = "73B7196C-D13D-4E07-8CD8-6DA40023D8B9";
name = "11 feb 22, 17:45";
shapes = (
{
closed = 1;
nodes = (
(35,0,l),
(35,2,l),
(163,74,l),
(164,575,l),
(35,648,l),
(35,650,l),
(374,650,ls),
(648.517,650,o),
(815,531.793,o),
(815,325,cs),
(815,122.977,o),
(645.412,0,o),
(374,0,cs)
);
},
{
closed = 1;
nodes = (
(394,24,ls),
(588.667,24,o),
(698,131.667,o),
(698,325,cs),
(698,522.333,o),
(590,627,o),
(394,627,cs),
(243,627,l),
(243,24,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 10 2 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 0 95 0 0 0 17 77 0 3 3 1 95 4 1 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 2 3 0 2 103 0 3 3 1 95 4 1 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 23 21 17 15 0 14 0 12 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 835;
}
);
metricLeft = H;
metricRight = "=O";
note = D;
unicode = 68;
},
{
glyphname = Eth;
kernLeft = D;
kernRight = D;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,338,l),
(35,363,l),
(347,363,l),
(347,338,l)
);
},
{
pos = (-20,0);
ref = D;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
16 1 4 7 2 1 8 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 5 3 2 0 8 4 0 103 0 7 7 2 95 0 2 2 17 77 0 8 8 1 95 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 7 4 2 7 103 6 1 4 5 3 2 0 8 4 0 103 0 8 8 1 95 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 33 17 17 17 19 38 50 16 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 821;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (105,0);
ref = D;
},
{
closed = 1;
nodes = (
(542,404,l),
(80,404,l),
(80,277,l),
(542,277,l)
);
}
);
width = 1128;
}
);
metricLeft = "=D-20";
metricRight = D;
note = Eth;
unicode = 208;
},
{
glyphname = Dcaron;
kernLeft = D;
kernRight = D;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = D;
},
{
pos = (252,200);
ref = caroncomb;
}
);
width = 841;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = D;
},
{
pos = (84,200);
ref = caroncomb;
}
);
width = 1023;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
kernLeft = D;
kernRight = D;
lastChange = "2022-04-09 17:03:02 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,308,l),
(45,333,l),
(357,333,l),
(357,308,l)
);
},
{
ref = D;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
16 1 4 7 2 1 8 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 5 3 2 0 8 4 0 103 0 7 7 2 95 0 2 2 17 77 0 8 8 1 95 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 7 4 2 7 103 6 1 4 5 3 2 0 8 4 0 103 0 8 8 1 95 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 33 17 17 17 19 38 50 16 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 841;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Eth;
}
);
width = 1128;
}
);
metricLeft = D;
metricRight = D;
note = Dcroat;
unicode = 272;
},
{
glyphname = E;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (394,0);
},
{
name = ogonek;
pos = (620,0);
},
{
name = top;
pos = (394,700);
},
{
name = topleft;
pos = (23,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,62,l),
(40,3,l),
(40,0,l),
(620,0,l),
(659,-31,l),
(661,-31,l),
(774,256,l),
(772,256,l),
(572,31,l),
(231,31,l),
(231,341,l),
(489,341,l),
(569,222,l),
(571,222,l),
(571,492,l),
(569,492,l),
(489,373,l),
(231,373,l),
(231,670,l),
(570,670,l),
(750,491,l),
(752,493,l),
(649,720,l),
(647,720,l),
(603,700,l),
(45,700,l),
(45,698,l),
(148,638,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
27 11 5 3 2 1 26 19 13 3 4 3 2 76 3 1 0 74 21 1 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 17 77 0 4 4 5 95 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 1 2 0 1 103 0 2 0 3 4 2 3 103 0 4 4 5 95 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
21 17 21 17 21 32 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 784;
},
{
anchors = (
{
name = bottom;
pos = (515,0);
},
{
name = ogonek;
pos = (910,10);
},
{
name = top;
pos = (515,700);
},
{
name = topleft;
pos = (40,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,0,l),
(919,0,l),
(919,140,l),
(274,140,l),
(274,291,l),
(782,291,l),
(782,431,l),
(274,431,l),
(274,560,l),
(911,560,l),
(911,700,l),
(100,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 17 77 0 3 3 4 95 0 4 4 18 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 0 0 1 5 0 103 0 1 0 2 3 1 2 103 0 3 3 4 95 0 4 4 18 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 5 0 0 1 5 0 103 0 1 0 2 3 1 2 103 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1009;
}
);
metricLeft = H;
note = E;
unicode = 69;
},
{
glyphname = Eacute;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (271,200);
ref = acutecomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (380,200);
ref = acutecomb;
}
);
width = 1009;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecaron;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (226,200);
ref = caroncomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (127,200);
ref = caroncomb;
}
);
width = 1009;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (226,200);
ref = circumflexcomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (127,200);
ref = circumflexcomb;
}
);
width = 1009;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (212,200);
ref = dieresiscomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (261,200);
ref = dieresiscomb;
}
);
width = 1009;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (294,200);
ref = dotaccentcomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (376,200);
ref = dotaccentcomb;
}
);
width = 1009;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (231,200);
ref = gravecomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (245,200);
ref = gravecomb;
}
);
width = 1009;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (215,200);
ref = macroncomb;
}
);
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (189,200);
ref = macroncomb;
}
);
width = 1009;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
kernLeft = E;
kernRight = E;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = E;
},
{
pos = (415,0);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
44 11 5 3 2 1 43 19 13 3 4 3 30 29 23 21 4 5 7 3 76 3 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 17 77 0 4 4 7 95 0 7 7 21 77 0 5 5 6 97 0 6 6 22 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 17 77 0 4 4 7 95 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 103 0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 4 4 7 95 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 37 40 17 21 17 21 32 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = E;
},
{
pos = (530,25);
ref = ogonekcomb;
}
);
width = 1009;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = F;
kernLeft = F;
kernRight = F;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(148,73,l),
(40,3,l),
(40,0,l),
(381,0,l),
(381,3,l),
(231,73,l),
(231,331,l),
(489,331,l),
(569,209,l),
(571,209,l),
(571,480,l),
(569,480,l),
(489,363,l),
(231,363,l),
(231,669,l),
(580,669,l),
(740,491,l),
(742,493,l),
(639,720,l),
(637,720,l),
(593,700,l),
(45,700,l),
(45,698,l),
(148,638,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
23 11 5 3 2 1 22 17 13 3 4 3 2 76 3 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 17 77 0 4 4 21 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 2 0 1 103 0 2 0 3 4 2 3 103 0 4 4 21 4 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
34 21 17 21 32 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 762;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,0,l),
(274,0,l),
(274,271,l),
(742,271,l),
(742,411,l),
(274,411,l),
(274,560,l),
(891,560,l),
(891,700,l),
(100,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 17 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 0 0 1 4 0 103 0 1 0 2 3 1 2 103 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 2 3 134 5 1 4 0 0 1 4 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 9 0 9 17 17 17 17 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 981;
}
);
metricLeft = H;
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = C;
kernRight = C;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (431,0);
},
{
name = top;
pos = (431,650);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(749,3,l),
(751,3,l),
(751,290,l),
(829,344,l),
(460,344,l),
(460,342,l),
(661,290,l),
(661,123,l),
(606,64,o),
(540,24,o),
(448,24,cs),
(275,24,o),
(154,139,o),
(154,354,cs),
(154,557,o),
(274,681,o),
(434,681,cs),
(564,681,o),
(668,620,o),
(761,452,c),
(764,453,l),
(710,697,l),
(708,697,l),
(659,634,l),
(598,686,o),
(528,715,o),
(427,715,cs),
(232,715,o),
(54,572,o),
(54,352,cs),
(54,124,o),
(232,-15,o),
(434,-15,cs),
(533,-15,o),
(614,24,o),
(700,109,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
19 1 2 1 21 18 2 4 2 37 36 4 1 4 3 4 2 1 0 3 4 76 0 4 2 3 2 4 3 128 0 2 2 1 97 0 1 1 17 77 0 3 3 0 97 0 0 0 27 0 78 36 38 40 38 38 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 873;
},
{
anchors = (
{
name = bottom;
pos = (516,0);
},
{
name = top;
pos = (476,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(911,381,l),
(561,381,l),
(561,261,l),
(771,261,l),
(771,187,l),
(730,144,o),
(633,123,o),
(524,123,cs),
(333,123,o),
(235,215,o),
(235,359,cs),
(235,519,o),
(386,580,o),
(543,580,cs),
(651,580,o),
(741,559,o),
(808,502,c),
(883,634,l),
(811,681,o),
(665,720,o),
(524,720,cs),
(274,720,o),
(50,599,o),
(50,354,cs),
(50,134,o),
(228,-17,o),
(514,-17,cs),
(683,-17,o),
(799,16,o),
(911,105,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
13 1 2 1 14 1 5 2 27 1 3 4 32 1 0 3 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 4 3 5 4 103 0 2 2 1 97 0 1 1 23 77 0 3 3 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 4 3 5 4 103 0 2 2 1 97 0 1 1 19 77 0 3 3 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 4 3 5 4 103 0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 19 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 2 5 1 2 105 0 5 0 4 3 5 4 103 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 19 37 37 38 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 951;
},
{
associatedMasterId = m01;
layerId = "B1471268-6B0D-4B4E-AE6E-04908D48F334";
name = "11 feb 22, 18:06";
shapes = (
{
closed = 1;
nodes = (
(420,334,l),
(420,332,l),
(641,272,l),
(641,120,l),
(581,58.667,o),
(500.333,22,o),
(415,22,cs),
(242,22,o),
(131,160,o),
(131,333,cs),
(131,508,o),
(219,639,o),
(396,639,cs),
(520,639,o),
(622.333,575.333,o),
(713,406,c),
(715,408,l),
(657,650,l),
(655,650,l),
(610,588,l),
(552.667,634.667,o),
(472,669,o),
(376,669,cs),
(173,669,o),
(20,501,o),
(20,312,cs),
(20,118,o),
(198,-14,o),
(392,-14,cs),
(518.667,-14,o),
(614.667,41.333,o),
(680,120,c),
(729,3,l),
(731,3,l),
(731,272,l),
(809,334,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
19 1 2 1 21 18 2 4 2 37 36 4 1 4 3 4 2 1 0 3 4 76 0 4 2 3 2 4 3 128 0 2 2 1 97 0 1 1 17 77 0 3 3 0 97 0 0 0 27 0 78 36 38 40 38 38 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
metricLeft = "=O";
metricRight = "=O-10";
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (247,150);
ref = brevecomb;
}
);
width = 873;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = G;
},
{
pos = (130,200);
ref = brevecomb;
}
);
width = 951;
}
);
unicode = 286;
},
{
glyphname = H;
kernLeft = H;
kernRight = H;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(708,72,l),
(598,4,l),
(598,0,l),
(899,0,l),
(899,4,l),
(791,72,l),
(791,628,l),
(899,699,l),
(899,700,l),
(598,700,l),
(598,699,l),
(708,628,l)
);
},
{
closed = 1;
nodes = (
(233,628,l),
(341,696,l),
(341,700,l),
(40,700,l),
(40,696,l),
(150,628,l),
(150,72,l),
(40,4,l),
(40,0,l),
(341,0,l),
(341,4,l),
(233,72,l)
);
},
{
closed = 1;
nodes = (
(715,381,l),
(226,381,l),
(226,349,l),
(715,349,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 10 5 2 4 0 1 24 19 16 11 4 2 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 2 0 3 103 6 5 2 1 1 17 77 4 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
6 5 2 1 0 1 133 0 0 0 3 2 0 3 103 4 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 26 34 19 36 34 19 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 939;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,0,l),
(274,0,l),
(274,295,l),
(769,295,l),
(769,0,l),
(943,0,l),
(943,700,l),
(769,700,l),
(769,435,l),
(274,435,l),
(274,700,l),
(100,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 2 0 3 103 6 5 2 1 1 17 77 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 2 0 3 103 6 5 2 1 1 2 95 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
6 5 2 1 0 2 1 87 0 0 0 3 2 0 3 103 6 5 2 1 1 2 95 4 1 2 1 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1043;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (216,0);
},
{
name = ogonek;
pos = (391,0);
},
{
name = top;
pos = (216,700);
},
{
name = topleft;
pos = (18,700);
}
);
layerId = m01;
metricLeft = "=H";
metricRight = "=H";
shapes = (
{
closed = 1;
nodes = (
(176,628,l),
(176,72,l),
(40,2,l),
(40,0,l),
(392,0,l),
(392,2,l),
(256,72,l),
(256,628,l),
(392,698,l),
(392,700,l),
(40,700,l),
(40,699,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
9 8 3 2 4 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 17 77 0 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 21 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 432;
},
{
anchors = (
{
name = bottom;
pos = (205,0);
},
{
name = ogonek;
pos = (290,0);
},
{
name = top;
pos = (205,700);
},
{
name = topleft;
pos = (60,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
metricLeft = "=H+20";
metricRight = "=H+20";
shapes = (
{
closed = 1;
nodes = (
(120,700,l),
(120,0,l),
(290,0,l),
(290,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 17 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
metricLeft = H;
metricRight = H;
note = I;
unicode = 73;
},
{
glyphname = Iacute;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (93,200);
ref = acutecomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (70,200);
ref = acutecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 1 2 0 1 103 0 2 2 17 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (48,200);
ref = circumflexcomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (-183,200);
ref = circumflexcomb;
}
);
width = 410;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (34,200);
ref = dieresiscomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (-49,200);
ref = dieresiscomb;
}
);
width = 410;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (116,200);
ref = dotaccentcomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (66,200);
ref = dotaccentcomb;
}
);
width = 410;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (53,200);
ref = gravecomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (-65,200);
ref = gravecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 17 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 4 1 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 9 8 7 6 0 5 0 4 33 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 410;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
pos = (37,200);
ref = macroncomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
pos = (-121,200);
ref = macroncomb;
}
);
width = 410;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
kernLeft = I;
kernRight = I;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = I;
},
{
alignment = -1;
pos = (77,0);
ref = ogonekcomb;
}
);
width = 432;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = I;
},
{
alignment = -1;
pos = (-71,15);
ref = ogonekcomb;
scale = (0.9511,1);
}
);
width = 410;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = J;
kernLeft = J;
kernRight = J;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,218,l),
(115,218,l),
(140,85,o),
(186,15,o),
(286,15,cs),
(368,15,o),
(423,62,o),
(423,210,cs),
(423,630,l),
(262,698,l),
(262,700,l),
(618,700,l),
(618,698,l),
(504,630,l),
(504,216,ls),
(504,60,o),
(402,-14,o),
(277,-14,cs),
(157,-14,o),
(85,51,o),
(36,124,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
22 20 12 7 4 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 17 77 0 2 2 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 2 1 133 0 2 2 0 97 0 0 0 27 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
37 37 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 658;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(445,-16,o),
(578,111,o),
(578,359,cs),
(578,700,l),
(405,700,l),
(405,344,ls),
(405,193,o),
(354,134,o),
(229,134,cs),
(158,134,o),
(73,155,o),
(20,187,c),
(20,23,l),
(63,0,o),
(148,-16,o),
(229,-16,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
3 1 0 1 2 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 1 17 77 0 0 0 2 97 3 1 2 2 24 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 1 0 1 133 0 0 0 2 97 3 1 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 3 1 2 0 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 15 0 14 19 37 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 678;
},
{
associatedMasterId = m01;
layerId = "CAC7171E-95B1-496D-825E-D35E1FE97C85";
name = "11 feb 22, 18:09";
shapes = (
{
closed = 1;
nodes = (
(46,216,l),
(48,216,l),
(58,94,o),
(143,12,o),
(265,12,cs),
(378.333,12,o),
(433,76,o),
(433,224,cs),
(433,586,l),
(322,648,l),
(322,650,l),
(635,650,l),
(635,648,l),
(521,586,l),
(521,224,ls),
(521,78.441,o),
(412.146,-14,o),
(255,-14,cs),
(116.333,-14,o),
(38.667,58.333,o),
(0,121,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
22 20 12 7 4 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 17 77 0 2 2 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 2 1 133 0 2 2 0 97 0 0 0 27 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
37 37 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
metricRight = H;
note = J;
unicode = 74;
},
{
glyphname = K;
kernLeft = K;
kernRight = K;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (424,0);
},
{
name = top;
pos = (404,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,632,l),
(344,698,l),
(344,700,l),
(40,700,l),
(40,699,l),
(152,632,l),
(152,69,l),
(40,2,l),
(40,0,l),
(343,0,l),
(343,2,l),
(232,69,l)
);
},
{
closed = 1;
nodes = (
(579,60,l),
(529,2,l),
(529,0,l),
(803,0,l),
(803,2,l),
(664,72,l),
(374,415,l),
(280,415,l)
);
},
{
closed = 1;
nodes = (
(225,267,l),
(616,625,l),
(791,698,l),
(791,700,l),
(490,700,l),
(490,698,l),
(567,629,l),
(225,313,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
28 7 2 3 0 1 27 22 21 20 19 13 4 3 8 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 2 1 0 2 128 5 4 2 1 1 17 77 3 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
5 4 2 1 0 1 133 0 0 2 0 133 3 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 30 0 29 38 37 34 21 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 810;
},
{
anchors = (
{
name = bottom;
pos = (487,0);
},
{
name = top;
pos = (487,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(383,336,l),
(654,0,l),
(884,0,l),
(530,430,l)
);
},
{
closed = 1;
nodes = (
(860,700,l),
(619,700,l),
(273,408,l),
(273,700,l),
(100,700,l),
(100,0,l),
(273,0,l),
(273,203,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
10 9 6 3 4 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 17 77 4 3 2 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 2 95 4 3 2 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
1 1 0 2 2 0 87 1 1 0 0 2 95 4 3 2 2 0 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 18 18 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 944;
},
{
associatedMasterId = m01;
layerId = "00734874-B2ED-4E38-B3B8-A940080664A4";
name = "11 feb 22, 18:11";
shapes = (
{
closed = 1;
nodes = (
(146,578,l),
(146,72,l),
(34,2,l),
(34,0,l),
(337,0,l),
(337,2,l),
(226,72,l),
(226,243,l),
(340,335,l),
(583,73,l),
(533,2,l),
(533,0,l),
(817,0,l),
(817,2,l),
(677,77,l),
(393,378,l),
(615,558,l),
(794,648,l),
(794,650,l),
(493,650,l),
(493,648,l),
(570,558,l),
(369,395,l),
(284,395,l),
(320,356,l),
(226,279,l),
(226,578,l),
(338,648,l),
(338,650,l),
(34,650,l),
(34,650,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
28 7 2 3 0 1 27 22 21 20 19 13 4 3 8 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 2 1 0 2 128 5 4 2 1 1 17 77 3 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
5 4 2 1 0 1 133 0 0 2 0 133 3 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 30 0 29 38 37 34 21 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
metricLeft = H;
note = K;
unicode = 75;
},
{
glyphname = L;
kernLeft = L;
kernRight = L;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (391,0);
},
{
name = center;
pos = (391,325);
},
{
name = top;
pos = (188,700);
},
{
name = topright;
pos = (420,650);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,630,l),
(137,75,l),
(63,2,l),
(63,0,l),
(580,0,l),
(618,-34,l),
(620,-34,l),
(738,250,l),
(736,252,l),
(548,35,l),
(220,35,l),
(220,630,l),
(375,698,l),
(375,700,l),
(40,700,l),
(40,699,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
13 12 5 2 4 0 2 1 76 7 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 17 77 0 0 0 1 95 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 0 2 133 0 0 0 1 95 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 15 0 14 21 19 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 758;
},
{
anchors = (
{
name = bottom;
pos = (443,0);
},
{
name = center;
pos = (443,350);
},
{
name = top;
pos = (191,700);
},
{
name = topright;
pos = (407,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,700,l),
(100,0,l),
(766,0,l),
(766,140,l),
(274,140,l),
(274,700,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 17 77 0 0 0 1 96 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 96 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 133 0 0 1 1 0 87 0 0 0 1 96 0 1 0 1 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
metricLeft = H;
note = L;
unicode = 76;
},
{
glyphname = Lacute;
kernLeft = L;
kernRight = L;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (65,200);
ref = acutecomb;
}
);
width = 758;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = L;
},
{
pos = (56,200);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 0 1 96 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 0 2 0 2 133 0 0 1 1 0 87 0 0 0 1 96 0 1 0 1 80 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
kernLeft = L;
kernRight = L;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (400,-50);
ref = caroncomb.alt;
}
);
width = 758;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = L;
},
{
alignment = -1;
pos = (347,-30);
ref = caroncomb.alt;
}
);
width = 806;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = Lslash;
kernLeft = L;
kernRight = L;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(394,437,l),
(381,467,l),
(31,279,l),
(44,249,l)
);
},
{
ref = L;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
23 22 21 20 13 10 9 8 7 6 1 0 12 1 0 1 76 15 1 2 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 17 77 0 1 1 2 95 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 0 133 0 1 1 2 95 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 23 34 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 775;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = L;
},
{
closed = 1;
nodes = (
(434,384,l),
(391,487,l),
(-29,299,l),
(14,196,l)
);
}
);
width = 866;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
kernLeft = M;
kernRight = M;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,68,l),
(881,643,l),
(881,72,l),
(782,4,l),
(782,0,l),
(1060,0,l),
(1060,4,l),
(961,72,l),
(961,652,l),
(1086,696,l),
(1086,700,l),
(873,700,l),
(559,103,l)
);
},
{
closed = 1;
nodes = (
(272,700,l),
(40,700,l),
(40,695,l),
(164,652,l),
(164,77,l),
(39,0,l),
(39,1,l),
(323,0,l),
(323,4,l),
(198,77,l),
(198,643,l),
(540,0,l),
(645,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
22 21 18 17 16 11 10 6 2 1 10 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 17 77 4 3 2 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 2 0 133 4 3 2 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
35 21 36 18 35 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1126;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(261,480,l),
(535,0,l),
(652,0,l),
(927,480,l),
(927,0,l),
(1088,0,l),
(1088,700,l),
(894,700,l),
(594,173,l),
(294,700,l),
(100,700,l),
(100,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 7 2 3 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 0 2 0 3 2 128 1 1 0 0 17 77 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 0 2 0 3 2 128 1 1 0 0 2 95 4 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 3 0 2 0 3 2 128 1 1 0 3 2 0 87 1 1 0 0 2 95 4 1 2 0 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
18 18 17 18 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1188;
},
{
associatedMasterId = m01;
layerId = "4968C0BD-F97A-4190-8692-92155336500E";
name = "11 feb 22, 18:14";
shapes = (
{
closed = 1;
nodes = (
(313,0,l),
(313,4,l),
(188,104,l),
(188,592,l),
(516,0,l),
(633,0,l),
(592,70,l),
(901,598,l),
(901,64,l),
(802,4,l),
(802,0,l),
(1080,0,l),
(1080,4,l),
(981,64,l),
(981,602,l),
(1106,646,l),
(1106,650,l),
(901,650,l),
(578,95,l),
(266,650,l),
(36,650,l),
(36,645,l),
(160,602,l),
(160,104,l),
(35,4,l),
(35,0,l),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
22 21 18 17 16 11 10 6 2 1 10 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 0 17 77 4 3 2 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
1 1 0 2 0 133 4 3 2 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
35 21 36 18 35 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1141;
}
);
metricLeft = H;
metricRight = H;
note = M;
unicode = 77;
},
{
glyphname = N;
kernLeft = N;
kernRight = N;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (458,0);
},
{
name = top;
pos = (458,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(760,58,l),
(760,625,l),
(885,698,l),
(885,700,l),
(600,700,l),
(600,698,l),
(725,625,l),
(725,88,l)
);
},
{
closed = 1;
nodes = (
(270,700,l),
(41,700,l),
(41,698,l),
(165,648,l),
(165,75,l),
(40,2,l),
(40,0,l),
(326,0,l),
(326,2,l),
(201,75,l),
(201,638,l),
(700,0,l),
(811,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
20 15 14 11 10 5 4 0 8 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 17 77 3 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 2 0 133 3 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
35 20 35 33 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 915;
},
{
anchors = (
{
name = bottom;
pos = (518,0);
},
{
name = top;
pos = (518,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,4,l),
(110,0,l),
(271,0,l),
(271,497,l),
(726,0,l),
(935,0,l),
(935,700,l),
(765,700,l),
(765,178,l),
(309,700,l),
(100,700,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 6 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 0 0 17 77 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 0 0 1 95 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
4 3 2 0 1 1 0 87 4 3 2 0 0 1 95 2 1 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 10 0 10 18 17 18 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 1025;
}
);
metricLeft = H;
metricRight = "=H-10";
note = N;
unicode = 78;
},
{
glyphname = Nacute;
kernLeft = N;
kernRight = N;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (335,200);
ref = acutecomb;
}
);
width = 915;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = N;
},
{
pos = (383,200);
ref = acutecomb;
}
);
width = 1025;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
kernLeft = N;
kernRight = N;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (290,200);
ref = caroncomb;
}
);
width = 915;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = N;
},
{
pos = (130,200);
ref = caroncomb;
}
);
width = 1025;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = Ntilde;
kernLeft = N;
kernRight = N;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (267,200);
ref = tildecomb;
}
);
width = 915;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = N;
},
{
pos = (152,200);
ref = tildecomb;
}
);
width = 1025;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = O;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (450,0);
},
{
name = center;
pos = (450,325);
},
{
name = ogonek;
pos = (770,10);
},
{
name = top;
pos = (450,650);
},
{
name = topleft;
pos = (69,650);
},
{
name = topright;
pos = (830,650);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(669,-15,o),
(842,124,o),
(842,348,cs),
(842,569,o),
(668,715,o),
(448,715,cs),
(227,715,o),
(54,569,o),
(54,348,cs),
(54,124,o),
(227,-15,o),
(448,-15,cs)
);
},
{
closed = 1;
nodes = (
(156,553,o),
(272,685,o),
(448,685,cs),
(625,685,o),
(740,553,o),
(740,348,cs),
(740,139,o),
(625,16,o),
(448,16,cs),
(272,16,o),
(156,139,o),
(156,348,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 3 3 0 97 0 0 0 17 77 0 2 2 1 97 4 1 1 1 27 1 78 0 0 25 23 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 896;
},
{
anchors = (
{
name = bottom;
pos = (529,0);
},
{
name = center;
pos = (529,350);
},
{
name = ogonek;
pos = (939,10);
},
{
name = top;
pos = (529,700);
},
{
name = topleft;
pos = (36,700);
},
{
name = topright;
pos = (1021,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(769,-15,o),
(1007,104,o),
(1007,353,cs),
(1007,588,o),
(763,715,o),
(529,715,cs),
(289,715,o),
(50,587,o),
(50,353,cs),
(50,98,o),
(293,-15,o),
(529,-15,cs)
);
},
{
closed = 1;
nodes = (
(235,496,o),
(329,575,o),
(529,575,cs),
(730,575,o),
(822,496,o),
(822,350,cs),
(822,189,o),
(730,125,o),
(529,125,cs),
(329,125,o),
(235,189,o),
(235,350,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 23 77 0 2 2 1 97 4 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 19 77 0 2 2 1 97 4 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 4 1 1 2 1 101 0 3 3 0 97 0 0 0 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 24 22 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1057;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (327,150);
ref = acutecomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (394,200);
ref = acutecomb;
}
);
width = 1057;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (282,150);
ref = circumflexcomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (141,200);
ref = circumflexcomb;
}
);
width = 1057;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (268,150);
ref = dieresiscomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (275,200);
ref = dieresiscomb;
}
);
width = 1057;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (287,150);
ref = gravecomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (259,200);
ref = gravecomb;
}
);
width = 1057;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (249,150);
ref = hungarumlautcomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (229,200);
ref = hungarumlautcomb;
}
);
width = 1057;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (271,150);
ref = macroncomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (203,200);
ref = macroncomb;
}
);
width = 1057;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(684,720,l),
(176,-16,l),
(206,-36,l),
(713,700,l)
);
},
{
ref = O;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
17 14 2 2 0 43 42 29 28 4 3 2 4 1 2 1 3 3 76 16 15 2 0 74 3 2 2 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 0 97 0 0 0 19 77 0 3 3 1 97 4 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 0 97 0 0 0 19 77 0 3 3 1 97 4 1 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 4 1 1 1 27 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 37 35 32 30 0 25 0 24 43 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
closed = 1;
nodes = (
(774,765,l),
(176,-77,l),
(316,-77,l),
(913,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
18 14 2 4 1 45 44 29 28 4 5 4 5 1 2 3 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 2 133 0 0 3 0 134 0 4 4 1 97 0 1 1 19 77 0 5 5 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 2 133 0 0 3 0 134 0 1 0 4 5 1 4 105 0 5 5 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 2 133 0 0 3 0 134 0 1 0 4 5 1 4 105 0 5 5 3 97 6 1 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 1 2 133 0 0 3 0 134 0 1 0 4 5 1 4 105 0 5 3 3 5 89 0 5 5 3 97 6 1 3 5 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 38 36 32 30 0 25 0 24 18 40 18 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 1057;
}
);
metricLeft = "=O";
metricRight = "=O";
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = O;
},
{
pos = (259,150);
ref = tildecomb;
}
);
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = O;
},
{
pos = (163,200);
ref = tildecomb;
}
);
width = 1057;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
kernLeft = O;
kernRight = E;
lastChange = "2022-04-09 17:02:51 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(269,25,o),
(152,149,o),
(152,325,cs),
(152,501,o),
(269,624,o),
(450,624,c),
(537,588,l),
(537,62,l),
(450,25,l)
);
},
{
closed = 1;
nodes = (
(999,1,l),
(1038,-31,l),
(1040,-31,l),
(1153,256,l),
(1151,256,l),
(951,31,l),
(620,31,l),
(620,311,l),
(868,311,l),
(948,192,l),
(950,192,l),
(950,462,l),
(948,462,l),
(868,343,l),
(620,343,l),
(620,620,l),
(949,620,l),
(1129,441,l),
(1131,443,l),
(1028,670,l),
(1026,670,l),
(982,650,l),
(448,650,ls),
(215,650,o),
(54,516,o),
(54,325,cs),
(54,134,o),
(217,0,o),
(450,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
43 1 4 2 9 1 3 4 23 1 5 6 42 1 7 5 4 76 7 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 10 8 134 0 3 0 6 5 3 6 103 0 12 12 0 97 0 0 0 19 77 0 2 2 1 95 0 1 1 19 77 0 5 5 4 95 0 4 4 20 77 0 7 7 9 95 0 9 9 21 77 0 11 11 10 97 0 10 10 27 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 8 10 8 134 0 0 0 12 2 0 12 105 0 3 0 6 5 3 6 103 0 2 2 1 95 0 1 1 19 77 0 5 5 4 95 0 4 4 20 77 0 7 7 9 95 0 9 9 21 77 0 11 11 10 97 0 10 10 27 10 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 8 10 8 134 0 0 0 12 2 0 12 105 0 3 0 6 5 3 6 103 0 4 0 5 7 4 5 103 0 2 2 1 95 0 1 1 19 77 0 7 7 9 95 0 9 9 21 77 0 11 11 10 97 0 10 10 27 10 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
47 45 38 36 31 29 28 27 19 17 17 17 17 17 21 17 34 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1163;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(773,0,l),
(1473,0,l),
(1473,140,l),
(948,140,l),
(948,291,l),
(1336,291,l),
(1336,431,l),
(948,431,l),
(948,560,l),
(1465,560,l),
(1465,700,l),
(773,700,l)
);
},
{
closed = 1;
nodes = (
(724,-15,o),
(947,104,o),
(947,353,cs),
(947,588,o),
(718,715,o),
(499,715,cs),
(274,715,o),
(50,587,o),
(50,353,cs),
(50,98,o),
(278,-15,o),
(499,-15,cs)
);
},
{
closed = 1;
nodes = (
(223,496,o),
(312,575,o),
(499,575,cs),
(687,575,o),
(774,496,o),
(774,350,cs),
(774,189,o),
(687,125,o),
(499,125,cs),
(312,125,o),
(223,189,o),
(223,350,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
10 1 9 1 23 1 6 8 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 0 4 5 3 4 103 0 9 9 0 97 1 1 0 0 19 77 0 2 2 0 97 1 1 0 0 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 3 0 4 5 3 4 103 0 9 9 0 97 0 0 0 19 77 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 24 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 5 0 6 7 5 6 103 0 8 10 1 7 8 7 101 0 2 2 1 95 0 1 1 19 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 39 37 31 29 0 26 0 25 17 17 17 17 17 19 38 11 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1563;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "7C237F97-0205-4D03-B9BD-DD3850C7BC1D";
name = "21 feb 22, 14:47";
shapes = (
{
closed = 1;
nodes = (
(678,-30,o),
(792,-1,o),
(879,54,c),
(879,0,l),
(1778,0,l),
(1778,150,l),
(1053,150,l),
(1053,321,l),
(1601,321,l),
(1601,449,l),
(1053,449,l),
(1053,584,l),
(1770,584,l),
(1770,734,l),
(879,734,l),
(879,666,l),
(792,721,o),
(678,751,o),
(549,751,cs),
(350,751,o),
(191,682,o),
(105,563,cs),
(62,504,o),
(40,436,o),
(40,360,cs),
(40,208,o),
(131,86,o),
(285,20,cs),
(362,-14,o),
(450,-30,o),
(549,-30,cs)
);
},
{
closed = 1;
nodes = (
(226,514,o),
(355,621,o),
(549,621,cs),
(741,621,o),
(869,513,o),
(869,360,cs),
(869,212,o),
(750,109,o),
(549,109,cs),
(347,109,o),
(226,212,o),
(226,360,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
10 1 9 0 23 1 6 8 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
10 1 9 1 23 1 6 8 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 0 4 5 3 4 103 0 9 9 0 97 1 1 0 0 19 77 0 2 2 0 97 1 1 0 0 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 3 0 4 5 3 4 103 0 9 9 0 97 0 0 0 19 77 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 27 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 2 2 1 95 0 1 1 19 77 0 5 5 6 95 0 6 6 18 77 0 8 8 7 97 10 1 7 7 24 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 0 9 2 0 9 105 0 3 0 4 5 3 4 103 0 5 0 6 7 5 6 103 0 8 10 1 7 8 7 101 0 2 2 1 95 0 1 1 19 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 39 37 31 29 0 26 0 25 17 17 17 17 17 19 38 11 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1858;
}
);
metricLeft = O;
metricRight = E;
note = OE;
unicode = 338;
},
{
glyphname = P;
kernLeft = P;
kernRight = P;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,68,l),
(166,638,l),
(40,698,l),
(40,700,l),
(422,700,ls),
(609,700,o),
(733,639,o),
(733,497,cs),
(733,370,o),
(609,301,o),
(422,301,cs),
(248,301,l),
(248,68,l),
(414,2,l),
(414,0,l),
(40,0,l),
(40,1,l)
);
},
{
closed = 1;
nodes = (
(422,333,ls),
(546,333,o),
(633,388,o),
(633,502,cs),
(633,614,o),
(546,668,o),
(422,668,cs),
(248,668,l),
(248,333,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
12 1 4 3 13 2 2 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 0 2 4 0 103 0 3 3 1 95 0 1 1 17 77 5 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 4 1 3 103 0 4 0 0 2 4 0 103 5 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 26 24 18 16 0 15 0 14 35 35 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 763;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,700,l),
(521,700,ls),
(776,700,o),
(903,622,o),
(903,466,cs),
(903,309,o),
(776,231,o),
(521,231,cs),
(272,231,l),
(272,0,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(541,356,ls),
(657,356,o),
(713,389,o),
(713,466,cs),
(713,543,o),
(657,576,o),
(541,576,cs),
(275,576,l),
(275,356,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 0 2 4 0 103 0 3 3 1 95 0 1 1 17 77 5 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 4 1 3 103 0 4 0 0 2 4 0 103 5 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 2 0 2 134 0 1 0 3 4 1 3 103 0 4 0 0 4 87 0 4 4 0 95 0 0 4 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 17 15 11 9 0 8 0 8 34 33 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 963;
},
{
associatedMasterId = m01;
layerId = "841E1A30-08AA-4EAB-BF44-BB784610F238";
name = "11 feb 22, 18:16";
shapes = (
{
closed = 1;
nodes = (
(159,62,l),
(161,588,l),
(35,648,l),
(35,650,l),
(419,650,ls),
(549,650,o),
(645,635,o),
(707,606,cs),
(769,577,o),
(800,532,o),
(800,472,cs),
(800,338,o),
(650,271,o),
(349,271,cs),
(245,271,l),
(245,62,l),
(371,2,l),
(371,0,l),
(35,0,l),
(35,1,l)
);
},
{
closed = 1;
nodes = (
(349,301,ls),
(516,301,o),
(618,314,o),
(660,366,cs),
(680,391,o),
(690,423,o),
(690,462,cs),
(690,581,o),
(612,624,o),
(419,624,cs),
(245,624,l),
(245,301,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
12 1 4 3 13 2 2 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 0 2 4 0 103 0 3 3 1 95 0 1 1 17 77 5 1 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 0 3 4 1 3 103 0 4 0 0 2 4 0 103 5 1 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 26 24 18 16 0 15 0 14 35 35 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 780;
}
);
metricLeft = H;
note = P;
unicode = 80;
},
{
glyphname = Thorn;
kernLeft = P;
kernRight = P;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (383,0);
},
{
name = top;
pos = (383,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,518,ls),
(548,518,o),
(635,464,o),
(635,362,cs),
(635,258,o),
(548,203,o),
(424,203,cs),
(250,203,l),
(250,171,l),
(424,171,ls),
(611,171,o),
(735,240,o),
(735,357,cs),
(735,489,o),
(611,550,o),
(424,550,cs),
(249,550,l),
(250,518,l)
);
},
{
closed = 1;
nodes = (
(176,628,l),
(176,72,l),
(40,2,l),
(40,0,l),
(392,0,l),
(392,2,l),
(256,72,l),
(256,628,l),
(392,698,l),
(392,700,l),
(40,700,l),
(40,699,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 2 2 0 3 17 12 2 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
7 1 4 0 1 2 4 1 105 6 1 3 3 17 77 0 5 5 0 97 0 0 0 26 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 3 0 3 133 7 1 4 0 1 2 4 1 105 0 5 5 0 97 0 0 0 26 77 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
22 21 0 0 28 26 21 29 22 29 0 20 0 19 34 36 35 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 765;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(272,0,l),
(272,121,l),
(521,121,ls),
(776,121,o),
(903,199,o),
(903,356,cs),
(903,512,o),
(776,590,o),
(521,590,cs),
(100,590,l),
(100,0,l)
);
},
{
closed = 1;
nodes = (
(275,466,l),
(541,466,ls),
(657,466,o),
(713,433,o),
(713,356,cs),
(713,279,o),
(657,246,o),
(541,246,cs),
(275,246,l)
);
},
{
closed = 1;
nodes = (
(100,466,l),
(272,466,l),
(272,700,l),
(100,700,l)
);
}
);
width = 963;
}
);
metricLeft = "=P";
metricRight = "=P";
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
kernLeft = O;
kernRight = O;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,102,l),
(456,102,l),
(185,-221,l),
(190,-224,l),
(315,-163,o),
(387,-152,o),
(437,-152,cs),
(555,-152,o),
(624,-213,o),
(648,-234,c),
(650,-234,l),
(715,-137,l),
(650,-112,o),
(598,-99,o),
(509,-99,cs),
(405,-99,o),
(332,-125,o),
(258,-173,c),
(282,-172,l)
);
},
{
ref = O;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
40 37 2 5 4 25 1 3 2 2 76 33 26 19 3 3 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 4 6 5 5 4 114 0 2 0 3 2 3 101 0 6 6 0 97 0 0 0 17 77 0 5 5 1 98 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 6 5 6 4 5 128 0 2 0 3 2 3 101 0 6 6 0 97 0 0 0 17 77 0 5 5 1 98 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 34 23 37 37 38 39 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 896;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(911,-90,l),
(621,269,l),
(421,269,l),
(714,-90,l)
);
},
{
ref = O;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
1 1 1 2 30 27 2 5 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 2 0 1 1 2 114 0 4 5 4 134 0 0 0 3 97 0 3 3 17 77 0 1 1 5 98 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
6 1 2 0 1 0 2 1 128 0 4 5 4 134 0 0 0 3 97 0 3 3 17 77 0 1 1 5 98 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 2 0 1 0 2 1 128 0 4 5 4 134 0 3 0 0 2 3 0 105 0 1 1 5 98 0 5 5 24 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 2 0 1 0 2 1 128 0 4 5 4 134 0 3 0 0 2 3 0 105 0 1 5 5 1 89 0 1 1 5 98 0 5 1 5 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 33 31 29 28 21 19 0 16 0 16 37 38 7 7 24 
CALL[ ]	/* CallFunction */";
};
width = 1057;
},
{
associatedMasterId = m01;
layerId = "7BC4F665-19EF-4348-9612-01CFAD25980A";
name = "11 feb 22, 16:51";
shapes = (
{
closed = 1;
nodes = (
(133,-214,l),
(227,-168,o),
(444,-112,o),
(533,-112,qs),
(622,-112,o),
(742,-168,o),
(756,-214,q),
(758,-214,l),
(823,-97,l),
(725,-59,o),
(606,-59,qs),
(499,-59,o),
(288,-119,o),
(200,-169,q),
(196,-169,l),
(324,-8,l),
(362,-14,o),
(401,-14,qs),
(505,-14,o),
(679,75,o),
(781,229,o),
(781,325,qs),
(781,423,o),
(679,581,o),
(504,670,o),
(400,670,qs),
(297,670,o),
(122,581,o),
(20,423,o),
(20,325,qs),
(20,245,o),
(91,110,o),
(217,17,o),
(296,-2,q),
(131,-214,l)
);
},
{
closed = 1;
nodes = (
(120,482,o),
(269,642,o),
(400,642,qs),
(531,642,o),
(681,482,o),
(681,325,qs),
(681,171,o),
(532,14,o),
(401,14,qs),
(368,14,o),
(344,18,q),
(392,78,l),
(359,78,l),
(316,23,l),
(223,46,o),
(120,198,o),
(120,325,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
40 37 2 5 4 25 1 3 2 2 76 33 26 19 3 3 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 4 6 5 5 4 114 0 2 0 3 2 3 101 0 6 6 0 97 0 0 0 17 77 0 5 5 1 98 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 6 5 6 4 5 128 0 2 0 3 2 3 101 0 6 6 0 97 0 0 0 17 77 0 5 5 1 98 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 34 23 37 37 38 39 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 843;
}
);
metricLeft = "=O";
metricRight = "=O";
note = Q;
unicode = 81;
},
{
glyphname = R;
kernLeft = R;
kernRight = R;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (431,0);
},
{
name = top;
pos = (431,650);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,2,l),
(531,0,l),
(822,0,l),
(822,2,l),
(673,61,l),
(499,340,l),
(407,340,l),
(582,55,l)
);
},
{
closed = 1;
nodes = (
(40,0,l),
(374,0,l),
(374,2,l),
(248,62,l),
(248,324,l),
(430,324,ls),
(607,324,o),
(737,386,o),
(737,509,cs),
(737,646,o),
(607,700,o),
(430,700,cs),
(40,700,l),
(40,698,l),
(166,638,l),
(164,62,l),
(40,1,l)
);
},
{
closed = 1;
nodes = (
(248,668,l),
(420,668,ls),
(534,668,o),
(639,621,o),
(639,509,cs),
(639,404,o),
(524,358,o),
(420,358,cs),
(248,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
25 1 2 6 26 7 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 3 1 0 1 2 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 6 2 4 6 103 7 1 2 3 1 0 1 2 0 105 8 5 2 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 39 37 31 29 0 28 0 27 37 17 19 34 51 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 863;
},
{
anchors = (
{
name = bottom;
pos = (497,0);
},
{
name = top;
pos = (497,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(705,241,o),
(903,282,o),
(903,471,cs),
(903,627,o),
(776,700,o),
(521,700,cs),
(100,700,l),
(100,0,l),
(272,0,l),
(272,241,l),
(521,241,ls)
);
},
{
closed = 1;
nodes = (
(275,576,l),
(541,576,ls),
(657,576,o),
(713,548,o),
(713,471,cs),
(713,399,o),
(657,366,o),
(541,366,cs),
(275,366,l)
);
},
{
closed = 1;
nodes = (
(892,0,l),
(602,349,l),
(402,349,l),
(692,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 3 1 0 1 2 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 7 0 7 2 114 0 7 3 1 0 1 7 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 7 0 7 2 114 0 4 0 6 7 4 6 103 0 7 3 1 0 1 7 0 105 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 7 0 7 2 114 8 5 2 1 0 1 134 0 4 0 6 7 4 6 103 0 7 2 0 7 87 0 7 7 0 97 3 1 0 7 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 26 24 20 18 0 17 0 17 36 33 18 17 17 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 973;
},
{
anchors = (
{
name = bottom;
pos = (433,0);
},
{
name = top;
pos = (433,650);
}
);
associatedMasterId = m01;
layerId = "049F0853-34B3-4E92-8D86-BBD25BB006F1";
name = "14 feb 22, 11:58";
shapes = (
{
closed = 1;
nodes = (
(439,307,l),
(531,307,l),
(704,66,l),
(854,2,l),
(854,0,l),
(563,0,l),
(563,2,l),
(613,60,l)
);
},
{
closed = 1;
nodes = (
(166,67,l),
(168,588,l),
(42,648,l),
(42,650,l),
(432,650,ls),
(609,650,o),
(739,596,o),
(739,467,cs),
(739,343,o),
(609,281,o),
(432,281,cs),
(250,281,l),
(250,67,l),
(376,2,l),
(376,0,l),
(42,0,l),
(42,1,l)
);
},
{
closed = 1;
nodes = (
(432,314,ls),
(536,314,o),
(641,361,o),
(641,467,cs),
(641,571,o),
(536,618,o),
(432,618,cs),
(250,618,l),
(250,314,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
25 1 2 6 26 7 2 3 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 3 1 0 1 2 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 6 2 4 6 103 7 1 2 3 1 0 1 2 0 105 8 5 2 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 39 37 31 29 0 28 0 27 37 17 19 34 51 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 865;
},
{
anchors = (
{
name = bottom;
pos = (497,0);
},
{
name = top;
pos = (497,700);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "580B79D3-41AA-4DF4-B045-8F7F322A92B5";
name = "21 feb 22, 14:51";
shapes = (
{
closed = 1;
nodes = (
(90,700,l),
(521,700,ls),
(776,700,o),
(903,622,o),
(903,466,cs),
(903,347,o),
(830,274,o),
(683,245,cs),
(639,236,o),
(585,231,o),
(521,231,cs),
(494,231,l),
(402,339,l),
(602,339,l),
(886,8,l),
(892,0,l),
(692,0,l),
(494,231,l),
(262,231,l),
(262,0,l),
(90,0,l),
(90,0,l)
);
},
{
closed = 1;
nodes = (
(541,356,ls),
(657,356,o),
(713,389,o),
(713,466,cs),
(713,543,o),
(657,576,o),
(541,576,cs),
(265,576,l),
(265,356,l),
(265,356,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 3 1 0 1 2 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 7 0 7 2 114 0 7 3 1 0 1 7 0 105 0 6 6 4 95 0 4 4 17 77 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 7 0 7 2 114 0 4 0 6 7 4 6 103 0 7 3 1 0 1 7 0 105 8 5 2 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 7 0 7 2 114 8 5 2 1 0 1 134 0 4 0 6 7 4 6 103 0 7 2 0 7 87 0 7 7 0 97 3 1 0 7 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 26 24 20 18 0 17 0 17 36 33 18 17 17 9 7 27 
CALL[ ]	/* CallFunction */";
};
width = 983;
}
);
metricLeft = H;
note = R;
unicode = 82;
},
{
glyphname = Racute;
kernLeft = R;
kernRight = R;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (308,150);
ref = acutecomb;
}
);
width = 863;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = R;
},
{
pos = (362,200);
ref = acutecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 4 7 133 11 1 2 3 1 0 1 2 0 105 0 10 10 4 95 8 1 4 4 17 77 9 1 5 5 1 96 12 6 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 7 4 7 133 0 2 11 0 11 2 114 0 11 3 1 0 1 11 0 105 0 10 10 4 95 8 1 4 4 17 77 9 1 5 5 1 96 12 6 2 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 4 7 133 0 2 11 0 11 2 114 8 1 4 0 10 11 4 10 103 0 11 3 1 0 1 11 0 105 9 1 5 5 1 96 12 6 2 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 7 4 7 133 0 2 11 0 11 2 114 9 1 5 10 1 5 87 8 1 4 0 10 11 4 10 103 0 11 3 1 0 1 11 0 105 9 1 5 5 1 96 12 6 2 1 5 1 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
0 0 36 34 30 28 26 25 24 23 21 20 0 19 0 19 17 36 33 18 17 17 13 7 28 
CALL[ ]	/* CallFunction */";
};
width = 973;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
kernLeft = R;
kernRight = R;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (263,150);
ref = caroncomb;
}
);
width = 863;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = R;
},
{
pos = (109,200);
ref = caroncomb;
}
);
width = 973;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = S;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (438,-5);
},
{
name = top;
pos = (384,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,52,l),
(255,9,o),
(351,-15,o),
(448,-15,cs),
(594,-15,o),
(711,67,o),
(711,179,cs),
(711,286,o),
(599,342,o),
(481,373,cs),
(323,415,ls),
(232,439,o),
(138,486,o),
(138,572,cs),
(138,629,o),
(198,683,o),
(320,683,cs),
(439,683,o),
(576,626,o),
(703,465,c),
(710,465,l),
(590,697,l),
(549,642,l),
(474,691,o),
(388,715,o),
(291,715,cs),
(140,715,o),
(48,645,o),
(48,554,cs),
(48,444,o),
(151,374,o),
(292,336,cs),
(442,296,ls),
(573,261,o),
(619,220,o),
(619,158,cs),
(619,70,o),
(531,18,o),
(438,18,cs),
(264,18,o),
(119,101,o),
(26,273,c),
(18,274,l),
(115,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
20 1 2 1 43 21 19 3 0 2 44 1 3 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 1 97 0 1 1 17 77 0 0 0 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 105 0 0 0 3 97 0 3 3 27 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
46 38 43 35 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 768;
},
{
anchors = (
{
name = bottom;
pos = (384,0);
},
{
name = top;
pos = (384,650);
}
);
associatedMasterId = m01;
layerId = "801245EC-89A8-4081-8AEC-AE65ACE080DB";
name = "11 feb 22, 17:50";
shapes = (
{
closed = 1;
nodes = (
(208,57,l),
(276.667,9,o),
(366,-15,o),
(476,-15,cs),
(646.739,-15,o),
(764,57.183,o),
(764,162,cs),
(764,249,o),
(680,305,o),
(585,335,cs),
(538,350,o),
(483,363,o),
(421,375,cs),
(351,389,ls),
(262,408,o),
(213,426,o),
(189,456,cs),
(177,471,o),
(171,490,o),
(171,513,cs),
(171,578.333,o),
(216.667,626,o),
(346,626,cs),
(462,626,o),
(605.333,569.333,o),
(732,408,c),
(734,408,l),
(619,640,l),
(578,585,l),
(502.667,633.667,o),
(413,658,o),
(309,658,cs),
(138,658,o),
(79,588,o),
(79,504,cs),
(79,393,o),
(190,322,o),
(358,291,cs),
(412,281,ls),
(551,256,o),
(661,219,o),
(661,139,cs),
(661,60.333,o),
(584,16,o),
(459,16,cs),
(295,16,o),
(137.333,99,o),
(44,271,c),
(40,274,l),
(137,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
20 1 2 1 43 21 19 3 0 2 44 1 3 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 1 97 0 1 1 17 77 0 0 0 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 105 0 0 0 3 97 0 3 3 27 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
46 38 43 35 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 768;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "CD412549-EA3A-4F7F-94FE-1E4645357D0C";
name = "21 feb 22, 14:15";
shapes = (
{
closed = 1;
nodes = (
(30,84,l),
(160.667,18.667,o),
(332.333,-18,o),
(507,-18,cs),
(780.333,-18,o),
(923,61.667,o),
(923,211,cs),
(923,348.333,o),
(812.333,406,o),
(603,418,cs),
(414,429,ls),
(286.938,436.059,o),
(222,450.865,o),
(222,508,cs),
(222,592,o),
(383,589,o),
(457,589,cs),
(613,589,o),
(733.667,559.667,o),
(835,501,c),
(889,632,l),
(778.333,688,o),
(624.333,719,o),
(471,719,cs),
(283,719,o),
(57,666,o),
(57,502,cs),
(57,381.059,o),
(186.067,300.243,o),
(384,288,cs),
(558,277,ls),
(693.545,268.528,o),
(757,257.997,o),
(757,201,cs),
(757,138.729,o),
(679.671,122,o),
(507,122,cs),
(333.667,122,o),
(199,149.667,o),
(83,215,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 4 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 1 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
22 1 3 2 44 23 2 0 3 43 1 5 0 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 23 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 19 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 1 0 4 1 103 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 0 3 1 0 128 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 0 3 1 0 128 0 2 0 3 1 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 53 37 38 54 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 953;
},
{
anchors = (
{
name = bottom;
pos = (477,0);
},
{
name = top;
pos = (477,700);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "5FE42EC1-47A1-4E9A-A422-FF5615A28BC4";
name = "23 mar 22, 22:03";
shapes = (
{
closed = 1;
nodes = (
(30,87,l),
(161,22,o),
(332,-15,o),
(507,-15,cs),
(780,-15,o),
(923,65,o),
(923,214,cs),
(923,351,o),
(812,410,o),
(603,422,cs),
(414,433,ls),
(287,440,o),
(239,457,o),
(239,504,cs),
(239,561,o),
(363,576,o),
(457,576,cs),
(603,576,o),
(734,556,o),
(835,497,c),
(889,628,l),
(778,684,o),
(614,715,o),
(471,715,cs),
(283,715,o),
(57,662,o),
(57,498,cs),
(57,357,o),
(176,292,o),
(374,279,cs),
(558,267,ls),
(674,259,o),
(745,253,o),
(745,204,cs),
(745,151,o),
(660,135,o),
(507,135,cs),
(344,135,o),
(199,164,o),
(83,229,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 4 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 1 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
22 1 3 2 44 23 2 0 3 43 1 5 0 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 23 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 19 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 1 0 4 1 103 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 0 3 1 0 128 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 0 3 1 0 128 0 2 0 3 1 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 53 37 38 54 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 953;
},
{
anchors = (
{
name = bottom;
pos = (457,0);
},
{
name = top;
pos = (457,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(30,87,l),
(155,22,o),
(318,-15,o),
(486,-15,cs),
(746,-15,o),
(883,65,o),
(883,214,cs),
(883,351,o),
(777,410,o),
(577,422,cs),
(397,433,ls),
(275,440,o),
(230,457,o),
(230,504,cs),
(230,561,o),
(348,576,o),
(438,576,cs),
(577,576,o),
(702,556,o),
(799,497,c),
(851,628,l),
(744,684,o),
(588,715,o),
(451,715,cs),
(272,715,o),
(56,662,o),
(56,498,cs),
(56,357,o),
(169,292,o),
(359,279,cs),
(534,267,ls),
(645,259,o),
(713,253,o),
(713,204,cs),
(713,151,o),
(632,135,o),
(486,135,cs),
(330,135,o),
(191,164,o),
(81,229,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 4 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
22 1 3 2 23 1 1 3 44 1 0 1 43 1 5 0 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
22 1 3 2 44 23 2 0 3 43 1 5 0 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 23 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 0 4 1 103 0 3 3 2 97 0 2 2 19 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 1 0 4 1 103 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 3 0 3 1 0 128 0 0 0 5 0 5 101 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 0 3 1 0 128 0 2 0 3 1 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 105 0 0 5 5 0 89 0 0 0 5 97 0 5 0 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 53 37 38 54 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
visible = 1;
width = 913;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (261,200);
ref = acutecomb;
}
);
width = 768;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = S;
},
{
pos = (322,200);
ref = acutecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
24 1 2 4 29 1 5 2 30 1 6 5 51 1 0 1 50 1 7 0 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
24 1 2 4 29 1 5 2 30 1 1 5 51 1 0 1 50 1 7 0 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
24 1 2 4 29 1 5 2 51 30 2 0 5 50 1 7 0 4 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 4 4 3 112 0 2 4 5 4 2 5 128 0 6 0 1 0 6 1 103 0 5 5 4 97 0 4 4 23 77 0 0 0 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 6 0 1 0 6 1 103 0 5 5 4 97 0 4 4 23 77 0 0 0 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 6 0 1 0 6 1 103 0 5 5 4 97 0 4 4 19 77 0 0 0 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 6 0 1 0 6 1 103 0 0 0 7 0 7 101 0 5 5 4 97 0 4 4 19 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 1 5 0 5 1 0 128 0 0 0 7 0 7 101 0 5 5 4 97 0 4 4 19 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 1 5 0 5 1 0 128 0 4 0 5 1 4 5 106 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 3 4 3 133 0 2 4 5 4 2 5 128 0 4 0 5 0 4 5 106 0 0 7 7 0 89 0 0 0 7 97 0 7 0 7 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 53 37 35 18 22 54 33 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (216,200);
ref = caroncomb;
}
);
width = 768;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = S;
},
{
pos = (69,200);
ref = caroncomb;
}
);
width = 913;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (321,-5);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
20 1 2 1 67 21 19 3 0 2 68 65 43 3 3 0 3 76 64 63 54 3 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 0 5 4 5 101 0 2 2 1 97 0 1 1 17 77 0 0 0 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 2 0 1 2 105 0 4 0 5 4 5 101 0 0 0 3 97 0 3 3 27 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
45 50 46 38 43 35 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 768;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = S;
},
{
alignment = -1;
pos = (252,0);
ref = cedillacomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
22 1 3 2 23 1 4 3 50 1 0 1 49 1 7 0 42 1 5 7 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
22 1 3 2 23 1 1 3 50 1 0 1 49 1 7 0 42 1 5 7 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
22 1 3 2 50 23 2 0 3 49 1 7 0 42 1 5 7 4 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 1 0 4 1 103 0 7 0 6 7 6 99 0 3 3 2 97 0 2 2 23 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 0 1 0 4 1 103 0 7 0 6 7 6 99 0 3 3 2 97 0 2 2 19 77 0 0 0 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 1 0 4 1 103 0 0 0 5 6 0 5 105 0 7 0 6 7 6 99 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 3 0 3 1 0 128 0 0 0 5 6 0 5 105 0 7 0 6 7 6 99 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 3 0 3 1 0 128 0 2 0 3 1 2 3 105 0 7 5 6 7 87 0 0 0 5 6 0 5 105 0 7 7 6 95 0 6 7 6 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 0 2 3 105 0 7 5 6 7 87 0 0 0 5 6 0 5 105 0 7 7 6 95 0 6 7 6 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 18 36 53 37 38 54 33 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = T;
kernLeft = T;
kernRight = T;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (406,0);
},
{
name = center;
pos = (406,350);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,670,l),
(361,670,l),
(361,70,l),
(231,2,l),
(231,0,l),
(575,0,l),
(575,2,l),
(445,70,l),
(445,670,l),
(651,670,l),
(796,418,l),
(798,420,l),
(733,720,l),
(731,720,l),
(673,700,l),
(132,700,l),
(75,720,l),
(73,720,l),
(10,418,l),
(9,418,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
16 11 7 3 2 1 1 76 5 1 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 1 1 0 95 0 0 0 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
0 0 3 1 1 2 0 1 103 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 34 21 19 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 812;
},
{
anchors = (
{
name = bottom;
pos = (465,0);
},
{
name = center;
pos = (465,350);
},
{
name = top;
pos = (465,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(378,560,l),
(378,0,l),
(552,0,l),
(552,560,l),
(880,560,l),
(880,700,l),
(50,700,l),
(50,560,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 1 1 0 95 0 0 0 17 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
0 0 3 1 1 2 0 1 103 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 2 134 0 0 1 1 0 87 0 0 0 1 95 3 1 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 930;
},
{
anchors = (
{
name = bottom;
pos = (413,0);
},
{
name = center;
pos = (413,325);
},
{
name = top;
pos = (413,650);
}
);
associatedMasterId = m01;
layerId = "0136F452-B028-4218-A2C3-73A05CD6D0C1";
name = "11 feb 22, 17:53";
shapes = (
{
closed = 1;
nodes = (
(166,620,l),
(368,620,l),
(368,72,l),
(268,2,l),
(268,0,l),
(558,0,l),
(558,2,l),
(458,72,l),
(458,620,l),
(660,620,l),
(813,448,l),
(815,450,l),
(722,670,l),
(720,670,l),
(682,650,l),
(142,650,l),
(105,670,l),
(103,670,l),
(12,448,l),
(11,448,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
16 11 7 3 2 1 1 76 5 1 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 1 1 0 95 0 0 0 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
0 0 3 1 1 2 0 1 103 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
19 34 21 19 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 825;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tcaron;
kernLeft = T;
kernRight = T;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (238,200);
ref = caroncomb;
}
);
width = 812;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = T;
},
{
pos = (77,200);
ref = caroncomb;
}
);
width = 930;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = U;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (490,0);
},
{
name = ogonek;
pos = (676,17);
},
{
name = top;
pos = (490,700);
},
{
name = topright;
pos = (950,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,699,l),
(169,635,l),
(168,242,ls),
(168,187,o),
(145,156,o),
(116,156,c),
(221,68,o),
(330,-15,o),
(505,-15,cs),
(654,-15,o),
(758,41,o),
(887,156,c),
(853,156,o),
(810,189,o),
(810,242,cs),
(810,633,l),
(943,699,l),
(943,700,l),
(638,700,l),
(638,699,l),
(771,633,l),
(771,251,ls),
(771,97,o),
(662,17,o),
(511,17,cs),
(349,17,o),
(248,97,o),
(249,251,cs),
(251,635,l),
(364,698,l),
(364,700,l),
(54,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
29 22 17 1 4 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 3 4 3 0 4 128 5 1 3 3 17 77 0 4 4 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 1 3 0 3 133 2 1 0 4 0 133 0 4 4 1 97 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
35 37 37 18 35 20 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 980;
},
{
anchors = (
{
name = bottom;
pos = (510,0);
},
{
name = ogonek;
pos = (684,10);
},
{
name = top;
pos = (510,700);
},
{
name = topright;
pos = (999,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(80,122,o),
(234,-15,o),
(509,-15,cs),
(786,-15,o),
(940,122,o),
(939,366,cs),
(938,701,l),
(769,700,l),
(769,365,ls),
(769,211,o),
(676,125,o),
(509,125,cs),
(342,125,o),
(249,211,o),
(249,365,cs),
(249,700,l),
(80,701,l),
(80,366,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 0 0 17 77 0 1 1 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 0 1 0 133 0 1 1 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 20 36 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 1019;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (367,200);
ref = acutecomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (375,200);
ref = acutecomb;
}
);
width = 1019;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (322,200);
ref = circumflexcomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (122,200);
ref = circumflexcomb;
}
);
width = 1019;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (308,200);
ref = dieresiscomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (256,200);
ref = dieresiscomb;
}
);
width = 1019;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (327,200);
ref = gravecomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (240,200);
ref = gravecomb;
}
);
width = 1019;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (289,200);
ref = hungarumlautcomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (210,200);
ref = hungarumlautcomb;
}
);
width = 1019;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (311,200);
ref = macroncomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (184,200);
ref = macroncomb;
}
);
width = 1019;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (471,17);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
33 26 21 1 4 0 4 40 1 1 2 47 46 2 7 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 0 4 5 4 0 5 128 0 7 1 8 1 7 114 0 8 8 132 6 1 4 4 17 77 0 2 2 21 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
3 1 0 4 5 4 0 5 128 0 7 1 8 1 7 8 128 0 8 8 132 6 1 4 4 17 77 0 2 2 18 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
3 1 0 4 5 4 0 5 128 0 7 1 8 1 7 8 128 0 8 8 132 6 1 4 4 17 77 0 2 2 21 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
3 1 0 4 5 4 0 5 128 0 7 1 8 1 7 8 128 0 8 8 132 6 1 4 4 17 77 0 2 2 18 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
3 1 0 4 5 4 0 5 128 0 7 1 8 1 7 8 128 0 8 8 132 6 1 4 4 17 77 0 2 2 21 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 4 133 3 1 0 5 0 133 0 7 1 8 1 7 8 128 0 8 8 132 0 2 2 21 77 0 5 5 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
6 1 4 0 4 133 3 1 0 5 0 133 0 2 5 1 1 2 114 0 7 1 8 1 7 8 128 0 8 8 132 0 5 5 1 97 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
37 39 35 37 37 20 17 35 20 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (304,25);
ref = ogonekcomb;
}
);
width = 1019;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
kernLeft = U;
kernRight = U;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = U;
},
{
pos = (356,200);
ref = ringcomb;
}
);
width = 980;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = U;
},
{
pos = (251,200);
ref = ringcomb;
}
);
width = 1019;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = V;
kernLeft = V;
kernRight = V;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,626,l),
(314,698,l),
(314,700,l),
(-42,700,l),
(-42,698,l),
(117,626,l),
(442,0,l),
(534,0,l)
);
},
{
closed = 1;
nodes = (
(493,58,l),
(754,618,l),
(916,700,l),
(916,699,l),
(608,700,l),
(608,698,l),
(716,618,l),
(469,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
12 11 10 2 4 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 17 77 0 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 21 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
37 34 19 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 872;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(397,0,l),
(560,0,l),
(950,700,l),
(770,700,l),
(478,170,l),
(194,700,l),
(10,700,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 17 77 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 0 1 0 133 0 1 1 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 6 0 6 17 18 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 960;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
kernLeft = V;
kernRight = V;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,637,l),
(321,698,l),
(321,700,l),
(-38,700,l),
(-38,698,l),
(121,635,l),
(420,0,l),
(515,0,l)
);
},
{
closed = 1;
nodes = (
(960,58,l),
(1202,643,l),
(1354,698,l),
(1354,700,l),
(1052,700,l),
(1052,698,l),
(1167,643,l),
(934,85,l)
);
},
{
closed = 1;
nodes = (
(907,0,l),
(1002,0,l),
(704,637,l),
(808,698,l),
(808,700,l),
(449,700,l),
(449,698,l),
(608,635,l)
);
},
{
closed = 1;
nodes = (
(658,554,l),
(447,85,l),
(473,58,l),
(675,520,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
25 24 22 16 15 14 6 5 2 9 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 2 2 17 77 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 2 0 2 133 1 1 0 0 21 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 38 34 19 19 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1322;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(1298,700,l),
(1096,700,l),
(940,179,l),
(748,700,l),
(555,700,l),
(356,179,l),
(200,700,l),
(0,700,l),
(250,0,l),
(437,0,l),
(651,506,l),
(848,0,l),
(1048,0,l),
(1048,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 6 1 3 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 2 2 1 1 17 77 5 4 2 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 2 2 1 0 1 133 5 4 2 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 0 1 133 5 4 2 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 18 17 18 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 1298;
},
{
associatedMasterId = m01;
layerId = "6AB8F4AA-A172-4BEB-AC43-F6B44E51221C";
name = "11 feb 22, 18:44";
shapes = (
{
closed = 1;
nodes = (
(409,82,l),
(165,576,l),
(269,648,l),
(269,650,l),
(-90,650,l),
(-90,648,l),
(69,576,l),
(368,0,l),
(463,0,l),
(420,71,l)
);
},
{
closed = 1;
nodes = (
(918,58,l),
(1160,572,l),
(1312,648,l),
(1312,650,l),
(1010,650,l),
(1010,648,l),
(1128,572,l),
(900,82,l)
);
},
{
closed = 1;
nodes = (
(421,58,l),
(619,462,l),
(865,0,l),
(960,0,l),
(917,71,l),
(906,82,l),
(663,556,l),
(652,576,l),
(756,648,l),
(756,650,l),
(397,650,l),
(397,648,l),
(556,576,l),
(602,493,l),
(403,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
25 24 22 16 15 14 6 5 2 9 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 2 2 17 77 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
4 3 2 2 0 2 133 1 1 0 0 21 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 38 34 19 19 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1302;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
kernLeft = X;
kernRight = X;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,342,l),
(182,75,l),
(35,2,l),
(35,0,l),
(364,0,l),
(364,2,l),
(224,69,l),
(429,317,l)
);
},
{
closed = 1;
nodes = (
(473,359,l),
(696,628,l),
(855,698,l),
(855,700,l),
(525,700,l),
(525,698,l),
(655,632,l),
(450,385,l)
);
},
{
closed = 1;
nodes = (
(262,638,l),
(374,698,l),
(374,700,l),
(4,700,l),
(4,698,l),
(144,637,l),
(635,61,l),
(510,2,l),
(510,0,l),
(880,0,l),
(880,2,l),
(738,72,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
26 20 19 18 12 6 5 4 8 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 17 77 1 1 0 0 21 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 21 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
37 37 37 32 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(759,0,l),
(987,0,l),
(632,362,l),
(975,700,l),
(749,700,l),
(515,474,l),
(281,700,l),
(53,700,l),
(397,362,l),
(43,0,l),
(269,0,l),
(515,251,l),
(515,251,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
11 8 5 2 4 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 1 17 77 3 1 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
2 1 1 1 0 95 3 1 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
kernLeft = V;
kernRight = V;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (373,0);
},
{
name = top;
pos = (373,700);
},
{
name = topleft;
pos = (20,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,631,l),
(346,301,l),
(346,69,l),
(224,2,l),
(224,0,l),
(556,0,l),
(556,2,l),
(431,69,l),
(431,302,l),
(654,635,l),
(776,698,l),
(776,700,l),
(504,700,l),
(504,698,l),
(616,636,l),
(410,334,l),
(180,637,l),
(288,698,l),
(288,700,l),
(-36,700,l),
(-36,698,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 17 12 11 5 4 3 7 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 3 2 0 0 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
1 3 2 0 2 0 133 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 15 13 8 6 0 20 1 20 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 746;
},
{
anchors = (
{
name = bottom;
pos = (481,0);
},
{
name = top;
pos = (481,700);
},
{
name = topleft;
pos = (20,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(759,700,l),
(483,393,l),
(205,700,l),
(0,700,l),
(397,253,l),
(397,0,l),
(568,0,l),
(568,253,l),
(962,700,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
6 3 0 3 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 17 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
18 18 17 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 962;
},
{
anchors = (
{
name = bottom;
pos = (369,0);
},
{
name = top;
pos = (369,650);
},
{
name = topleft;
pos = (20,650);
}
);
associatedMasterId = m01;
layerId = "946055CA-C46B-40D9-AFE6-904BFE51BB2A";
name = "11 feb 22, 18:21";
shapes = (
{
closed = 1;
nodes = (
(79,576,l),
(347,281,l),
(347,72,l),
(245,2,l),
(245,0,l),
(548,0,l),
(548,2,l),
(443,72,l),
(443,284,l),
(674,555,l),
(787,648,l),
(787,650,l),
(515,650,l),
(515,648,l),
(629,541,l),
(422,303,l),
(185,576,l),
(279,648,l),
(279,650,l),
(-50,650,l),
(-50,648,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 17 12 11 5 4 3 7 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 3 2 0 0 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
1 3 2 0 2 0 133 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 15 13 8 6 0 20 1 20 4 7 22 
CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
kernLeft = Y;
kernRight = Y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (250,200);
ref = acutecomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Y;
},
{
pos = (346,200);
ref = acutecomb;
}
);
width = 962;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
kernLeft = Y;
kernRight = Y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (205,200);
ref = circumflexcomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Y;
},
{
pos = (93,200);
ref = circumflexcomb;
}
);
width = 962;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
kernLeft = Y;
kernRight = Y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Y;
},
{
pos = (191,200);
ref = dieresiscomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Y;
},
{
pos = (227,200);
ref = dieresiscomb;
}
);
width = 962;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Z;
kernLeft = Z;
kernRight = Z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (373,0);
},
{
name = center;
pos = (373,350);
},
{
name = top;
pos = (373,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,0,l),
(15,2,l),
(565,668,l),
(177,668,l),
(15,425,l),
(13,426,l),
(84,735,l),
(136,700,l),
(695,700,l),
(695,698,l),
(150,32,l),
(536,32,l),
(726,266,l),
(728,266,l),
(622,-35,l),
(620,-35,l),
(567,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
11 2 2 0 2 1 76 9 1 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 1 95 0 1 1 17 77 0 0 0 3 95 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
33 21 33 20 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 746;
},
{
anchors = (
{
name = bottom;
pos = (486,0);
},
{
name = center;
pos = (486,350);
},
{
name = top;
pos = (486,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(888,700,l),
(86,700,l),
(86,565,l),
(654,565,l),
(75,131,l),
(75,0,l),
(897,0,l),
(897,135,l),
(320,135,l),
(888,569,l),
(888,569,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 1 2 3 4 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 17 77 0 0 0 1 95 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 0 3 2 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 972;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
kernLeft = Z;
kernRight = Z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (250,200);
ref = acutecomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Z;
},
{
pos = (351,200);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
15 1 2 3 4 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 4 133 0 3 5 2 5 3 2 128 0 2 2 5 95 0 5 5 17 77 0 0 0 1 95 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 5 4 133 0 3 5 2 5 3 2 128 0 5 0 2 0 5 2 104 0 0 0 1 95 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 5 4 133 0 3 5 2 5 3 2 128 0 5 0 2 0 5 2 104 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
18 18 17 18 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 972;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
kernLeft = Z;
kernRight = Z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (205,200);
ref = caroncomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Z;
},
{
pos = (98,200);
ref = caroncomb;
}
);
width = 972;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
kernLeft = Z;
kernRight = Z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = Z;
},
{
pos = (273,200);
ref = dotaccentcomb;
}
);
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = Z;
},
{
pos = (347,200);
ref = dotaccentcomb;
}
);
width = 972;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = a;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (355,0);
},
{
name = ogonek;
pos = (654,10);
},
{
name = top;
pos = (355,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(517,271,l),
(325,271,ls),
(204,271,o),
(50,244,o),
(50,123,cs),
(50,40,o),
(122,-15,o),
(251,-15,cs),
(333,-15,o),
(442,21,o),
(515,103,c),
(516,135,l),
(437,55,o),
(339,18,o),
(268,18,cs),
(187,18,o),
(136,51,o),
(136,128,cs),
(136,236,o),
(249,246,o),
(365,246,cs),
(517,246,l)
);
},
{
closed = 1;
nodes = (
(511,0,l),
(699,0,l),
(699,2,l),
(591,62,l),
(591,283,ls),
(591,431,o),
(494,514,o),
(332,514,cs),
(217,514,o),
(118,465,o),
(50,381,c),
(109,305,l),
(111,305,l),
(160,426,o),
(232,486,o),
(334,486,cs),
(427,486,o),
(511,420,o),
(511,310,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 5 2 4 0 34 18 14 3 5 6 2 76 0 4 0 6 5 4 6 103 0 0 0 1 97 0 1 1 26 77 0 2 2 21 77 0 5 5 3 97 0 3 3 27 3 78 35 35 36 34 36 37 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 729;
},
{
anchors = (
{
name = bottom;
pos = (375,0);
},
{
name = ogonek;
pos = (674,10);
},
{
name = top;
pos = (375,500);
}
);
associatedMasterId = m01;
layerId = "B586EE0A-0FA9-4C38-8F1A-576C7B236DC5";
name = "11 feb 22, 17:12";
shapes = (
{
closed = 1;
nodes = (
(537,271,l),
(365,271,ls),
(234,271,o),
(50,244,o),
(50,117,cs),
(50,39.667,o),
(118.333,-15,o),
(257,-15,cs),
(369,-15,o),
(462,21,o),
(535,93,c),
(536,116,l),
(457,56,o),
(375,18,o),
(274,18,cs),
(183.333,18,o),
(130,51.333,o),
(130,122,cs),
(130,236,o),
(289,247,o),
(405,247,cs),
(537,247,l)
);
},
{
closed = 1;
nodes = (
(531,0,l),
(719,0,l),
(719,2,l),
(611,62,l),
(611,289,ls),
(611,429,o),
(505.667,514,o),
(343,514,cs),
(216.333,514,o),
(132,465,o),
(60,381,c),
(109,305,l),
(111,305,l),
(163.667,425.667,o),
(239.667,486,o),
(339,486,cs),
(449.804,486,o),
(531,407.679,o),
(531,298,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 5 2 4 0 34 18 14 3 5 6 2 76 0 4 0 6 5 4 6 103 0 0 0 1 97 0 1 1 26 77 0 2 2 21 77 0 5 5 3 97 0 3 3 27 3 78 35 35 36 34 36 37 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 749;
},
{
anchors = (
{
name = bottom;
pos = (413,0);
},
{
name = ogonek;
pos = (743,10);
},
{
name = top;
pos = (393,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(565,159,l),
(524,118,o),
(444,90,o),
(364,90,cs),
(288,90,o),
(250,110,o),
(250,153,cs),
(250,214,o),
(348,219,o),
(437,219,cs),
(565,219,l)
);
},
{
closed = 1;
nodes = (
(154,324,l),
(233,371,o),
(315,390,o),
(397,390,cs),
(509,390,o),
(565,354,o),
(565,298,c),
(413,297,ls),
(275,296,o),
(70,269,o),
(70,136,cs),
(70,34,o),
(162,-15,o),
(308,-15,cs),
(386,-15,o),
(500,12,o),
(565,73,c),
(565,0,l),
(725,0,l),
(725,222,ls),
(725,431,o),
(611,515,o),
(397,515,cs),
(296,515,o),
(186,487,o),
(111,443,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 1 3 4 23 1 2 3 10 1 0 1 33 1 5 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 0 0 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 5 5 18 77 0 0 0 6 97 0 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 5 5 18 77 0 0 0 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 6 0 5 6 128 0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 0 5 6 0 89 0 0 0 6 97 0 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 32 31 28 26 21 19 17 15 0 11 0 11 38 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 825;
},
{
anchors = (
{
name = bottom;
pos = (413,0);
},
{
name = ogonek;
pos = (743,10);
},
{
name = top;
pos = (393,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "ED3FDB05-8DEC-4CD4-9F2B-60026444595B";
name = "4 apr 22, 10:05";
shapes = (
{
closed = 1;
nodes = (
(565,159,l),
(524,118,o),
(444,90,o),
(364,90,cs),
(288,90,o),
(250,110,o),
(250,153,cs),
(250,214,o),
(348,219,o),
(437,219,cs),
(565,219,l)
);
},
{
closed = 1;
nodes = (
(70,34,o),
(162,-15,o),
(308,-15,cs),
(386,-15,o),
(500,12,o),
(565,73,c),
(565,0,l),
(725,0,l),
(725,222,ls),
(725,431,o),
(611,515,o),
(397,515,cs),
(276,515,o),
(143,475,o),
(71,416,c),
(111,296,l),
(203,363,o),
(300,390,o),
(397,390,cs),
(509,390,o),
(565,354,o),
(565,298,c),
(413,297,ls),
(275,296,o),
(70,269,o),
(70,136,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 1 3 4 23 1 2 3 10 1 0 1 33 1 5 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 0 0 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 5 5 18 77 0 0 0 6 97 0 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 5 5 18 77 0 0 0 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 6 0 5 6 128 0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 0 5 6 0 89 0 0 0 6 97 0 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 32 31 28 26 21 19 17 15 0 11 0 11 38 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 825;
},
{
anchors = (
{
name = bottom;
pos = (413,0);
},
{
name = ogonek;
pos = (743,10);
},
{
name = top;
pos = (393,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "A0138988-EFE8-43C5-8C1C-50BB69F000A3";
name = "21 feb 22, 11:51";
shapes = (
{
closed = 1;
nodes = (
(575,149,l),
(534,118,o),
(444,90,o),
(364,90,cs),
(314,90,o),
(278,94,o),
(255,102,cs),
(232,109,o),
(220,123,o),
(220,142,cs),
(220,161,o),
(231,176,o),
(254,187,cs),
(277,198,o),
(313,206,o),
(364,211,cs),
(416,216,o),
(486,219,o),
(575,219,c)
);
},
{
closed = 1;
nodes = (
(40,34,o),
(132,-20,o),
(288,-20,cs),
(416,-20,o),
(510,5,o),
(575,61,c),
(575,0,l),
(735,0,l),
(735,222,ls),
(735,431,o),
(621,520,o),
(397,520,cs),
(246,520,o),
(113,475,o),
(41,416,c),
(81,296,l),
(173,363,o),
(270,390,o),
(397,390,cs),
(529,390,o),
(575,364,o),
(575,296,c),
(420,295,o),
(308,290,o),
(212,273,cs),
(104,253,o),
(40,198,o),
(40,126,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
24 1 3 4 23 1 2 3 10 1 0 1 33 1 5 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 0 0 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 7 1 1 0 2 1 105 0 3 3 4 97 0 4 4 26 77 0 5 5 18 77 0 0 0 6 97 0 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 5 5 18 77 0 0 0 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 0 6 0 5 6 128 0 4 0 3 2 4 3 105 0 2 7 1 1 0 2 1 105 0 0 5 6 0 89 0 0 0 6 97 0 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 37 35 32 31 28 26 21 19 17 15 0 11 0 11 38 8 7 23 
CALL[ ]	/* CallFunction */";
};
width = 825;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (232,0);
ref = acutecomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (258,0);
ref = acutecomb;
}
);
width = 825;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
alignment = -1;
pos = (171,20);
ref = brevecomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (47,0);
ref = brevecomb;
}
);
width = 825;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acircumflex;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
alignment = -1;
pos = (187,10);
ref = circumflexcomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (5,0);
ref = circumflexcomb;
}
);
width = 825;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
alignment = -1;
pos = (173,-20);
ref = dieresiscomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (139,0);
ref = dieresiscomb;
}
);
width = 825;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (192,0);
ref = gravecomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (123,0);
ref = gravecomb;
}
);
width = 825;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
alignment = -1;
pos = (176,20);
ref = macroncomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (67,0);
ref = macroncomb;
}
);
width = 825;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (449,10);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
7 5 2 7 0 52 36 14 3 8 9 24 23 2 3 6 3 76 0 7 0 9 8 7 9 103 0 3 0 4 3 4 101 0 0 0 1 97 0 1 1 26 77 5 1 2 2 21 77 0 8 8 6 97 0 6 6 27 6 78 55 53 35 36 34 21 37 35 36 37 34 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (363,25);
ref = ogonekcomb;
}
);
width = 825;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
alignment = -1;
pos = (221,10);
ref = ringcomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (134,0);
ref = ringcomb;
}
);
width = 825;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
kernLeft = a;
kernRight = a;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = a;
},
{
pos = (164,0);
ref = tildecomb;
}
);
width = 729;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
},
{
pos = (27,0);
ref = tildecomb;
}
);
width = 825;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
kernLeft = a;
kernRight = e;
lastChange = "2022-04-09 17:03:12 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (350,0);
},
{
name = ogonek;
pos = (649,10);
},
{
name = top;
pos = (350,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,86,o),
(378,18,o),
(278,18,cs),
(197,18,o),
(139,51,o),
(139,128,cs),
(139,236,o),
(249,246,o),
(365,246,cs),
(507,246,l)
);
},
{
closed = 1;
nodes = (
(586,431,o),
(489,514,o),
(332,514,cs),
(217,514,o),
(118,465,o),
(50,381,c),
(109,305,l),
(111,305,l),
(160,426,o),
(232,486,o),
(334,486,cs),
(422,486,o),
(504,418,o),
(506,310,cs),
(507,253,l),
(586,283,l)
);
},
{
closed = 1;
nodes = (
(598,383,o),
(672,486,o),
(810,486,cs),
(933,486,o),
(1013,395,o),
(1013,284,c),
(587,284,l),
(588,255,l),
(1101,255,l),
(1101,412,o),
(984,514,o),
(810,514,cs),
(643,514,o),
(512,409,o),
(512,250,cs),
(512,101,o),
(633,-14,o),
(815,-14,cs),
(934,-14,o),
(1034,36,o),
(1086,115,c),
(1066,130,l),
(1019,63,o),
(941,27,o),
(846,27,cs),
(689,27,o),
(598,151,o),
(598,278,cs)
);
},
{
closed = 1;
nodes = (
(325,271,ls),
(204,271,o),
(50,244,o),
(50,123,cs),
(50,40,o),
(122,-15,o),
(261,-15,cs),
(400,-15,o),
(535,71,o),
(539,271,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
54 40 35 33 27 5 9 3 53 15 8 7 4 0 6 2 76 10 1 9 0 6 0 9 6 103 8 1 3 3 4 97 5 1 4 4 26 77 7 1 0 0 1 97 2 1 1 1 27 1 78 62 62 62 69 62 69 46 33 19 35 38 41 37 39 34 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1146;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (520,0);
ref = e;
scale = (0.97,1);
},
{
closed = 1;
nodes = (
(565,159,l),
(524,118,o),
(444,90,o),
(364,90,cs),
(288,90,o),
(250,110,o),
(250,153,cs),
(250,214,o),
(348,219,o),
(437,219,cs),
(565,219,l)
);
},
{
closed = 1;
nodes = (
(70,34,o),
(172,-15,o),
(318,-15,cs),
(396,-15,o),
(553,17,o),
(625,103,cs),
(725,222,l),
(725,431,o),
(611,515,o),
(397,515,cs),
(276,515,o),
(143,475,o),
(71,416,c),
(111,296,l),
(203,363,o),
(300,390,o),
(397,390,cs),
(509,390,o),
(565,354,o),
(565,298,c),
(413,297,ls),
(275,296,o),
(70,269,o),
(70,136,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
31 25 2 1 2 17 1 9 1 23 12 2 4 9 45 11 2 0 4 52 46 2 6 0 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
31 25 2 1 2 17 1 9 1 23 12 2 4 9 45 11 2 5 4 52 46 2 6 0 5 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
10 1 9 0 4 0 9 4 103 8 1 1 1 2 97 3 1 2 2 26 77 5 1 0 0 6 97 7 1 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
10 1 9 0 4 5 9 4 103 8 1 1 1 2 97 3 1 2 2 26 77 0 5 5 6 97 7 1 6 6 27 77 0 0 0 6 97 7 1 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 2 8 1 1 9 2 1 105 10 1 9 0 4 5 9 4 103 0 5 5 6 97 7 1 6 6 27 77 0 0 0 6 97 7 1 6 6 27 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
3 1 2 8 1 1 9 2 1 105 10 1 9 0 4 5 9 4 103 0 5 5 6 97 7 1 6 6 24 77 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
3 1 2 8 1 1 9 2 1 105 10 1 9 0 4 5 9 4 103 0 5 0 6 5 89 0 0 6 6 0 89 0 0 0 6 97 7 1 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
59 59 59 65 59 65 37 36 37 34 19 36 38 42 54 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1295;
}
);
metricLeft = a;
metricRight = e;
note = ae;
unicode = 230;
},
{
glyphname = b;
kernLeft = b;
kernRight = b;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (367,0);
},
{
name = center;
pos = (367,250);
},
{
name = top;
pos = (367,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,748,l),
(112,684,l),
(112,0,l),
(114,0,l),
(186,58,l),
(235,21,o),
(290,-11,o),
(379,-11,cs),
(526,-11,o),
(675,99,o),
(675,255,cs),
(675,399,o),
(539,514,o),
(382,514,cs),
(298,514,o),
(240,485,o),
(192,452,c),
(192,750,l),
(0,750,l)
);
},
{
closed = 1;
nodes = (
(192,417,l),
(237,457,o),
(314,488,o),
(368,488,cs),
(500,488,o),
(580,398,o),
(580,255,cs),
(580,112,o),
(492,16,o),
(370,16,cs),
(295,16,o),
(237,52,o),
(192,93,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
18 1 0 2 34 33 15 1 4 3 4 16 1 1 3 3 76 5 1 2 2 19 77 0 4 4 0 97 0 0 0 26 77 0 3 3 1 97 0 1 1 27 1 78 0 0 31 29 24 22 0 20 0 19 38 35 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 723;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (842,0);
ref = d;
scale = (-1,1);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
2 1 5 1 31 30 2 4 5 16 1 2 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
2 1 5 1 31 30 2 4 5 16 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 19 77 0 5 5 1 97 0 1 1 26 77 0 4 4 2 97 3 1 2 2 27 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 19 77 0 5 5 1 97 0 1 1 26 77 0 3 3 18 77 0 4 4 2 97 0 2 2 27 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 5 4 1 5 105 0 0 0 19 77 0 3 3 18 77 0 4 4 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 5 4 1 5 105 0 4 0 2 4 2 101 0 3 3 0 95 0 0 0 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 34 19 38 35 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 842;
},
{
associatedMasterId = m01;
layerId = "52F5E557-EC04-45BD-8F74-3B41E1B275E2";
name = "17 feb 22, 10:29";
shapes = (
{
closed = 1;
nodes = (
(0,698,l),
(112,634,l),
(112,0,l),
(114,0,l),
(186,46,l),
(235.333,8.667,o),
(304,-11,o),
(380,-11,cs),
(503,-11,o),
(604,40,o),
(659,121,cs),
(686,162,o),
(700,206,o),
(700,255,cs),
(700,399,o),
(564,514,o),
(380,514,cs),
(308,514,o),
(240,495,o),
(192,462,c),
(192,700,l),
(0,700,l)
);
},
{
closed = 1;
nodes = (
(192,427,l),
(237,467,o),
(307,488,o),
(380,488,cs),
(528,488,o),
(615,398,o),
(615,255,cs),
(615,112,o),
(523,15,o),
(380,15,cs),
(309,15,o),
(237.333,37.667,o),
(192,79,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
18 1 0 2 34 33 15 1 4 3 4 16 1 1 3 3 76 5 1 2 2 19 77 0 4 4 0 97 0 0 0 26 77 0 3 3 1 97 0 1 1 27 1 78 0 0 31 29 24 22 0 20 0 19 38 35 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 758;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "214EB1B4-C896-4B8B-9583-482D6F36544A";
name = "21 feb 22, 11:52";
shapes = (
{
closed = 1;
nodes = (
(228,0,l),
(245,54,l),
(303.667,10,o),
(394,-20,o),
(486,-20,cs),
(697.69,-20,o),
(829,93.492,o),
(829,251,cs),
(829,409.055,o),
(697.057,520,o),
(486,520,cs),
(395.333,520,o),
(308,493.667,o),
(248,455,c),
(248,730,l),
(70,730,l),
(70,0,l)
);
},
{
closed = 1;
nodes = (
(248,346,l),
(301.333,372.667,o),
(382.667,390,o),
(460,390,cs),
(598.667,390,o),
(655,350.333,o),
(655,249,cs),
(655,147.667,o),
(597.333,101,o),
(460,101,cs),
(382.667,101,o),
(300,123.333,o),
(248,154,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
2 1 5 1 31 30 2 4 5 16 1 2 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
2 1 5 1 31 30 2 4 5 16 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 19 77 0 5 5 1 97 0 1 1 26 77 0 4 4 2 97 3 1 2 2 27 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 19 77 0 5 5 1 97 0 1 1 26 77 0 3 3 18 77 0 4 4 2 97 0 2 2 27 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 5 4 1 5 105 0 0 0 19 77 0 3 3 18 77 0 4 4 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 5 4 1 5 105 0 4 0 2 4 2 101 0 3 3 0 95 0 0 0 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 34 19 38 35 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
metricRight = "=o";
note = b;
unicode = 98;
},
{
glyphname = c;
kernLeft = c;
kernRight = c;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (329,0);
},
{
name = top;
pos = (329,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,289,l),
(610,382,l),
(555,458,o),
(466,514,o),
(346,514,cs),
(174,514,o),
(48,405,o),
(48,251,cs),
(48,86,o),
(189,-14,o),
(352,-14,cs),
(467,-14,o),
(558,35,o),
(613,115,c),
(595,130,l),
(543,66,o),
(463,22,o),
(375,22,cs),
(237,22,o),
(132,127,o),
(132,267,cs),
(132,388,o),
(210,486,o),
(343,486,cs),
(467,486,o),
(528,410,o),
(559,289,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
28 1 4 0 14 13 2 1 4 2 76 0 4 0 1 0 4 1 128 0 0 0 3 97 0 3 3 26 77 0 1 1 2 97 0 2 2 27 2 78 19 38 37 38 33 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 656;
},
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = top;
pos = (382,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(664,449,l),
(612,485,o),
(506,515,o),
(390,515,cs),
(179,515,o),
(43,402,o),
(43,251,cs),
(43,99,o),
(180,-15,o),
(391,-15,cs),
(508,-15,o),
(614,15,o),
(665,54,c),
(617,166,l),
(573,137,o),
(496,116,o),
(403,116,cs),
(281,116,o),
(207,165,o),
(207,251,cs),
(207,348,o),
(281,388,o),
(403,388,cs),
(488,388,o),
(571,366,o),
(616,337,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
26 1 0 3 27 11 2 1 0 12 1 2 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 3 97 0 3 3 26 77 0 1 1 2 97 0 2 2 27 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 0 1 3 0 105 0 1 1 2 97 0 2 2 24 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 0 1 3 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 37 36 33 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
metricLeft = "=o";
metricRight = "=o-5";
note = c;
unicode = 99;
},
{
glyphname = cacute;
kernLeft = c;
kernRight = c;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (206,0);
ref = acutecomb;
}
);
width = 656;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = c;
},
{
pos = (247,0);
ref = acutecomb;
}
);
width = 703;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
kernLeft = c;
kernRight = c;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (161,0);
ref = caroncomb;
}
);
width = 656;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = c;
},
{
pos = (-6,0);
ref = caroncomb;
}
);
width = 703;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
kernLeft = c;
kernRight = c;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
alignment = -1;
pos = (182,0);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
52 1 6 0 14 13 2 1 6 39 1 4 1 3 76 38 37 28 3 3 73 0 6 0 1 0 6 1 128 0 2 0 3 2 3 101 0 0 0 5 97 0 5 5 26 77 0 1 1 4 97 0 4 4 27 4 78 19 38 36 45 55 38 33 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 656;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = c;
},
{
pos = (157,0);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
10 1 1 0 23 11 2 2 1 24 1 3 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 3 4 134 0 1 1 0 97 0 0 0 26 77 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 3 4 134 0 0 0 1 2 0 1 105 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 3 4 134 0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 21 36 37 38 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = d;
kernLeft = o;
kernRight = d;
lastChange = "2022-10-17 21:26:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,444,l),
(482,481,o),
(433,513,o),
(344,513,cs),
(197,513,o),
(48,403,o),
(48,247,cs),
(48,103,o),
(184,-12,o),
(341,-12,cs),
(425,-12,o),
(483,17,o),
(531,50,c),
(531,0,l),
(723,0,l),
(723,2,l),
(611,66,l),
(611,750,l),
(419,750,l),
(419,745,l),
(531,686,l)
);
},
{
closed = 1;
nodes = (
(531,85,l),
(486,45,o),
(409,14,o),
(355,14,cs),
(223,14,o),
(143,104,o),
(143,247,cs),
(143,390,o),
(231,486,o),
(353,486,cs),
(428,486,o),
(486,450,o),
(531,409,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 1 1 2 30 29 20 15 1 5 4 5 2 76 0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 6 1 3 3 21 77 0 4 4 0 97 0 0 0 27 0 78 0 0 34 32 27 25 0 22 0 21 36 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 763;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(782,750,l),
(604,750,l),
(604,445,l),
(544,494,o),
(457,515,o),
(366,515,cs),
(175,515,o),
(43,409,o),
(43,251,cs),
(43,93,o),
(174,-15,o),
(366,-15,cs),
(458,-15,o),
(546,10,o),
(604,64,c),
(604,0,l),
(782,0,l)
);
},
{
closed = 1;
nodes = (
(542,133,o),
(469,110,o),
(392,110,cs),
(275,110,o),
(217,149,o),
(217,250,cs),
(217,351,o),
(273,390,o),
(392,390,cs),
(469,390,o),
(542,373,o),
(604,341,c),
(604,169,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
15 1 5 1 25 24 2 4 5 1 1 0 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
15 1 5 1 25 24 2 4 5 1 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 0 4 4 0 97 6 3 2 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 6 1 3 3 18 77 0 4 4 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 5 4 1 5 105 0 2 2 19 77 6 1 3 3 18 77 0 4 4 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 5 4 1 5 105 0 4 0 0 4 0 101 6 1 3 3 2 95 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 29 27 22 20 0 18 0 18 19 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 842;
},
{
associatedMasterId = m01;
layerId = "F07B5E37-66E3-4A3F-A62B-E8794E85A762";
name = "17 feb 22, 10:36";
shapes = (
{
closed = 1;
nodes = (
(758,4,l),
(646,65,l),
(646,700,l),
(454,700,l),
(454,695,l),
(566,636,l),
(566,462,l),
(518,495,o),
(450,514,o),
(378,514,cs),
(194,514,o),
(58,399,o),
(58,255,cs),
(58,90,o),
(213,-11,o),
(378,-11,cs),
(451,-11,o),
(518,7,o),
(566,42,c),
(566,0,l),
(758,0,l)
);
},
{
closed = 1;
nodes = (
(143,398,o),
(230,485,o),
(378,485,cs),
(451,485,o),
(521,467,o),
(566,427,c),
(566,79,l),
(521,38,o),
(449,18,o),
(378,18,cs),
(235,18,o),
(143,112,o),
(143,255,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
16 1 1 2 30 29 20 15 1 5 4 5 2 76 0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 6 1 3 3 21 77 0 4 4 0 97 0 0 0 27 0 78 0 0 34 32 27 25 0 22 0 21 36 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 793;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "655D23F6-099C-42F1-9AD9-2017BBFABCA0";
name = "21 feb 22, 11:54";
shapes = (
{
closed = 1;
nodes = (
(799,729,l),
(621,730,l),
(621,455,l),
(561,493.667,o),
(473.667,520,o),
(383,520,cs),
(171.943,520,o),
(40,409.055,o),
(40,251,cs),
(40,93.492,o),
(171.31,-20,o),
(383,-20,cs),
(473.667,-20,o),
(562.333,8,o),
(621,52,c),
(621,0,l),
(799,0,l)
);
},
{
closed = 1;
nodes = (
(214,350.333,o),
(269,390,o),
(409,390,cs),
(486.333,390,o),
(567.667,372.667,o),
(621,346,c),
(621,154,l),
(569,123.333,o),
(486.333,101,o),
(409,101,cs),
(271.667,101,o),
(214,147.667,o),
(214,249,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
15 1 5 1 25 24 2 4 5 1 1 0 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
15 1 5 1 25 24 2 4 5 1 1 3 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 0 4 4 0 97 6 3 2 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 2 19 77 0 5 5 1 97 0 1 1 26 77 6 1 3 3 18 77 0 4 4 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 5 4 1 5 105 0 2 2 19 77 6 1 3 3 18 77 0 4 4 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 5 4 1 5 105 0 4 0 0 4 0 101 6 1 3 3 2 95 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 29 27 22 20 0 18 0 18 19 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
metricLeft = "=o";
note = d;
unicode = 100;
},
{
glyphname = eth;
kernRight = B;
lastChange = "2022-04-09 17:03:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,493,o),
(424,515,o),
(332,515,cs),
(197,515,o),
(48,411,o),
(48,250,cs),
(48,84,o),
(205,-15,o),
(347,-15,cs),
(525,-15,o),
(657,101,o),
(657,280,cs),
(657,580,o),
(364,720,o),
(138,713,c),
(139,683,l),
(334,686,o),
(570,545,o),
(570,290,cs),
(570,108,o),
(476,11,o),
(347,11,cs),
(224,11,o),
(135,110,o),
(135,250,cs),
(135,390,o),
(224,486,o),
(337,486,cs),
(428,486,o),
(499,443,o),
(570,352,c),
(590,381,l)
);
},
{
closed = 1;
nodes = (
(521,690,l),
(506,717,l),
(186,569,l),
(201,542,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 2 2 3 0 33 29 28 27 26 5 2 3 22 1 4 5 3 76 4 3 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 0 97 6 1 0 0 17 77 0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 3 2 0 3 105 0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 45 43 39 37 32 30 21 19 13 11 0 34 1 34 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 715;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(633,145,o),
(572,112,o),
(415,112,cs),
(272,112,o),
(208,145,o),
(208,227,cs),
(208,298,o),
(272,328,o),
(415,328,cs),
(572,328,o),
(633,298,o),
(633,227,cs)
);
},
{
closed = 1;
nodes = (
(231,509,l),
(781,661,l),
(781,730,l),
(231,578,l)
);
},
{
closed = 1;
nodes = (
(223,711,l),
(441,639,o),
(665,533,o),
(665,374,c),
(608,432,o),
(513,451,o),
(401,451,cs),
(173,451,o),
(43,371,o),
(43,224,cs),
(43,64,o),
(182,-20,o),
(425,-20,cs),
(688,-20,o),
(824,93,o),
(824,307,cs),
(824,539,o),
(622,690,o),
(372,750,c)
);
}
);
width = 904;
},
{
associatedMasterId = m01;
layerId = "989EC7B1-54CC-4341-9F40-7F5EAC89DEC0";
name = "11 feb 22, 19:05";
shapes = (
{
closed = 1;
nodes = (
(100,637,l),
(111,638,o),
(132,638,qs),
(177,638,o),
(216,632,q),
(102,572,l),
(113,552,l),
(252,625,l),
(343,605,o),
(464,514,o),
(495,453,qs),
(501,441,l),
(435,513,o),
(310,513,qs),
(259,513,o),
(144,460,o),
(65,348,o),
(65,265,qs),
(65,192,o),
(134,64,o),
(266,-14,o),
(354,-14,qs),
(446,-14,o),
(568,56,o),
(625,172,o),
(625,243,qs),
(625,410,o),
(441,610,o),
(288,644,q),
(391,698,l),
(381,718,l),
(253,651,l),
(188,661,o),
(131,661,qs),
(99,660,l)
);
},
{
closed = 1;
nodes = (
(146,374,o),
(235,489,o),
(336,489,qs),
(459,489,o),
(524,376,q),
(543,310,o),
(543,228,qs),
(543,11,o),
(355,11,qs),
(289,11,o),
(195,78,o),
(146,192,o),
(146,263,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 2 2 3 0 33 29 28 27 26 5 2 3 22 1 4 5 3 76 4 3 2 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 0 97 6 1 0 0 17 77 0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 3 2 0 3 105 0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 45 43 39 37 32 30 21 19 13 11 0 34 1 34 7 7 22 
CALL[ ]	/* CallFunction */";
};
width = 688;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "2F045EE5-DC07-4264-AF64-5722376D4314";
name = "4 apr 22, 10:20";
shapes = (
{
closed = 1;
nodes = (
(688,-20,o),
(824,93,o),
(824,307,cs),
(824,539,o),
(622,690,o),
(372,750,c),
(101,750,l),
(101,749,l),
(347,677,o),
(665,563,o),
(665,374,c),
(608,432,o),
(513,451,o),
(401,451,cs),
(173,451,o),
(43,371,o),
(43,224,cs),
(43,64,o),
(182,-20,o),
(425,-20,cs)
);
},
{
closed = 1;
nodes = (
(633,145,o),
(572,112,o),
(415,112,cs),
(272,112,o),
(208,145,o),
(208,227,cs),
(208,298,o),
(272,328,o),
(415,328,cs),
(572,328,o),
(633,298,o),
(633,227,cs)
);
},
{
closed = 1;
nodes = (
(221,519,l),
(771,671,l),
(771,740,l),
(221,588,l)
);
}
);
width = 904;
}
);
metricLeft = "=d";
metricRight = B;
note = eth;
unicode = 240;
},
{
glyphname = dcaron;
kernLeft = d;
kernRight = d;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = d;
}
);
width = 763;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = d;
}
);
width = 842;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
kernLeft = d;
kernRight = d;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(707,585,l),
(707,611,l),
(383,611,l),
(383,585,l)
);
},
{
ref = d;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
20 1 3 4 38 37 28 15 1 5 8 9 2 76 5 1 3 6 1 2 1 3 2 104 0 4 4 19 77 0 9 9 1 97 0 1 1 26 77 10 1 7 7 21 77 0 8 8 0 97 0 0 0 27 0 78 0 0 42 40 35 33 0 30 0 29 17 17 34 17 19 38 35 11 7 29 
CALL[ ]	/* CallFunction */";
};
width = 773;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = d;
},
{
closed = 1;
nodes = (
(845,565,l),
(845,675,l),
(446,675,l),
(446,565,l)
);
}
);
width = 842;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = e;
kernLeft = c;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (346,0);
},
{
name = ogonek;
pos = (486,10);
},
{
name = top;
pos = (346,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,383,o),
(208,486,o),
(346,486,cs),
(469,486,o),
(549,395,o),
(549,284,c),
(123,284,l),
(124,255,l),
(637,255,l),
(637,412,o),
(520,514,o),
(346,514,cs),
(179,514,o),
(48,409,o),
(48,250,cs),
(48,101,o),
(169,-14,o),
(351,-14,cs),
(470,-14,o),
(570,36,o),
(622,115,c),
(602,130,l),
(555,63,o),
(477,27,o),
(382,27,cs),
(225,27,o),
(134,151,o),
(134,278,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
25 24 2 4 3 1 76 0 1 0 3 4 1 3 103 0 0 0 2 97 0 2 2 26 77 0 4 4 5 97 0 5 5 27 5 78 37 35 19 35 19 34 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 682;
},
{
anchors = (
{
name = bottom;
pos = (402,0);
},
{
name = ogonek;
pos = (615,10);
},
{
name = top;
pos = (402,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(202,245,cs),
(202,351,o),
(275,396,o),
(402,396,cs),
(532,396,o),
(584,349,o),
(596,287,c),
(156,287,l),
(156,200,l),
(758,200,l),
(758,240,ls),
(758,399,o),
(615,515,o),
(396,515,cs),
(173,515,o),
(43,399,o),
(43,241,cs),
(43,58,o),
(228,-15,o),
(431,-15,cs),
(531,-15,o),
(665,14,o),
(728,54,c),
(680,166,l),
(610,125,o),
(520,105,o),
(421,105,cs),
(297,105,o),
(202,145,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 4 3 20 1 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 4 1 3 103 0 0 0 2 97 0 2 2 26 77 0 4 4 5 97 0 5 5 27 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 0 0 1 2 0 105 0 1 0 3 4 1 3 103 0 4 4 5 97 0 5 5 24 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 0 0 1 2 0 105 0 1 0 3 4 1 3 103 0 4 5 5 4 89 0 4 4 5 97 0 5 4 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 33 20 35 17 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
metricLeft = "=o";
metricRight = "=o-3";
note = e;
unicode = 101;
},
{
glyphname = eacute;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (223,0);
ref = acutecomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (267,0);
ref = acutecomb;
}
);
width = 798;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecaron;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (178,0);
ref = caroncomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (14,0);
ref = caroncomb;
}
);
width = 798;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (178,0);
ref = circumflexcomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (14,0);
ref = circumflexcomb;
}
);
width = 798;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (164,0);
ref = dieresiscomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (148,0);
ref = dieresiscomb;
}
);
width = 798;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
kernLeft = e;
kernRight = e;
lastChange = "2022-10-17 21:27:18 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (246,0);
ref = dotaccentcomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (263,0);
ref = dotaccentcomb;
}
);
width = 798;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (183,0);
ref = gravecomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (132,0);
ref = gravecomb;
}
);
width = 798;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (167,0);
ref = macroncomb;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (76,0);
ref = macroncomb;
}
);
width = 798;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
kernLeft = e;
kernRight = e;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = e;
},
{
pos = (281,10);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
25 24 2 4 3 46 1 7 4 36 35 2 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 3 4 1 3 103 0 0 0 2 97 0 2 2 26 77 0 4 4 7 97 0 7 7 27 77 0 5 5 6 97 0 6 6 22 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 3 4 1 3 103 0 5 0 6 5 6 101 0 0 0 2 97 0 2 2 26 77 0 4 4 7 97 0 7 7 27 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
38 37 42 35 19 35 19 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = e;
},
{
pos = (235,25);
ref = ogonekcomb;
}
);
width = 798;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = f;
kernLeft = f;
kernRight = f;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,500,l),
(33,500,l),
(33,473,l),
(473,473,l)
);
},
{
closed = 1;
nodes = (
(224,676,o),
(282,737,o),
(371,737,cs),
(458,737,o),
(515,667,o),
(535,585,c),
(537,585,l),
(585,684,l),
(515,735,o),
(445,765,o),
(376,765,cs),
(223,765,o),
(144,661,o),
(144,500,cs),
(144,65,l),
(30,4,l),
(30,0,l),
(383,0,l),
(383,4,l),
(224,65,l),
(224,502,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
29 27 2 1 6 15 10 2 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 0 97 0 0 0 19 77 4 1 2 2 1 95 5 1 1 1 20 77 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 1 4 1 2 3 1 2 103 0 6 6 0 97 0 0 0 19 77 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 17 19 34 17 35 32 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 545;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(533,591,l),
(502,620,o),
(456,637,o),
(407,637,cs),
(340,637,o),
(280,609,o),
(278,500,c),
(511,500,l),
(511,380,l),
(278,380,l),
(276,0,l),
(111,0,l),
(111,380,l),
(20,380,l),
(20,500,l),
(111,500,l),
(112,662,o),
(188,764,o),
(385,764,cs),
(460,764,o),
(530,745,o),
(574,712,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
25 1 6 0 24 1 1 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 0 97 0 0 0 19 77 4 1 2 2 1 95 5 1 1 1 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 6 1 0 6 105 4 1 2 2 1 95 5 1 1 1 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 6 1 0 6 105 5 1 1 4 1 2 3 1 2 103 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 3 134 0 0 0 6 1 0 6 105 5 1 1 2 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 17 17 17 17 20 33 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 537;
},
{
associatedMasterId = m01;
layerId = "7D4FAFF6-8D5E-419A-AFAE-EC4EC6487DDD";
name = "11 feb 22, 17:24";
shapes = (
{
closed = 1;
nodes = (
(33,461,l),
(33,479,l),
(473,479,l),
(473,461,l)
);
},
{
closed = 1;
nodes = (
(224,65,l),
(383,4,l),
(383,0,l),
(30,0,l),
(30,4,l),
(144,65,l),
(144,484,ls),
(146,611,o),
(237,700,o),
(396,700,cs),
(485,700,o),
(565,672,o),
(635,615,c),
(587,520,l),
(585,520,l),
(565,607,o),
(488,672,o),
(396,672,cs),
(296,672,o),
(224,596,o),
(224,484,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
29 27 2 1 6 15 10 2 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 6 6 0 97 0 0 0 19 77 4 1 2 2 1 95 5 1 1 1 20 77 0 3 3 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 1 4 1 2 3 1 2 103 0 6 6 0 97 0 0 0 19 77 0 3 3 21 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 17 19 34 17 35 32 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
kernLeft = g;
kernRight = g;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (354,-200);
},
{
name = top;
pos = (354,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,436,l),
(524,463,o),
(539,473,o),
(561,473,cs),
(595,473,o),
(627,448,o),
(638,392,c),
(640,392,l),
(682,484,l),
(659,503,o),
(630,514,o),
(596,514,cs),
(560,514,o),
(522,496,o),
(479,453,c)
);
},
{
closed = 1;
nodes = (
(174,422,o),
(237,486,o),
(331,486,cs),
(415,486,o),
(485,421,o),
(485,327,cs),
(485,230,o),
(416,167,o),
(331,167,cs),
(234,167,o),
(174,233,o),
(174,327,cs)
);
},
{
closed = 1;
nodes = (
(195,178,l),
(139,163,o),
(88,136,o),
(88,76,cs),
(88,24,o),
(126,-25,o),
(250,-25,cs),
(444,-25,ls),
(525,-25,o),
(555,-57,o),
(555,-110,cs),
(555,-185,o),
(449,-224,o),
(350,-224,cs),
(218,-224,o),
(130,-180,o),
(130,-105,cs),
(130,-61,o),
(151,-32,o),
(179,-10,c),
(147,-1,l),
(82,-25,o),
(50,-62,o),
(50,-113,cs),
(50,-234,o),
(236,-250,o),
(350,-250,cs),
(431,-250,o),
(622,-221,o),
(622,-89,cs),
(622,-16,o),
(570,40,o),
(442,40,cs),
(244,40,ls),
(191,40,o),
(164,62,o),
(164,97,cs),
(164,134,o),
(193,153,o),
(230,161,c)
);
},
{
closed = 1;
nodes = (
(452,514,o),
(331,514,cs),
(188,514,o),
(95,436,o),
(95,327,cs),
(95,200,o),
(208,140,o),
(331,140,cs),
(463,140,o),
(564,218,o),
(564,327,cs),
(564,441,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
41 37 2 3 2 48 42 27 3 6 3 1 1 4 6 66 21 2 5 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 8 1 4 5 6 4 105 0 7 7 1 97 0 1 1 26 77 0 3 3 2 97 0 2 2 20 77 0 5 5 0 97 0 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 8 1 4 5 6 4 105 0 5 0 0 5 0 101 0 7 7 1 97 0 1 1 26 77 0 3 3 2 97 0 2 2 20 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 3 6 2 3 105 0 6 8 1 4 5 6 4 105 0 5 0 0 5 0 101 0 7 7 1 97 0 1 1 26 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 81 79 73 71 58 56 0 54 0 53 47 45 40 38 35 33 46 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 707;
},
{
anchors = (
{
name = bottom;
pos = (400,-270);
},
{
name = top;
pos = (370,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(592,-82,o),
(481,-119,o),
(357,-119,cs),
(245,-119,o),
(148,-96,o),
(65,-55,c),
(65,-195,l),
(133,-228,o),
(240,-250,o),
(347,-250,cs),
(578,-250,o),
(730,-167,o),
(730,55,cs),
(730,500,l),
(585,500,l),
(586,438,l),
(521,486,o),
(436,515,o),
(343,515,cs),
(159,515,o),
(40,402,o),
(40,242,cs),
(40,94,o),
(160,-14,o),
(343,-14,cs),
(446,-14,o),
(533,12,o),
(592,57,c)
);
},
{
closed = 1;
nodes = (
(214,345,o),
(269,385,o),
(409,385,cs),
(478,385,o),
(541,362,o),
(588,330,c),
(590,156,l),
(546,127,o),
(481,107,o),
(409,107,cs),
(290,107,o),
(214,124,o),
(214,240,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
14 1 6 1 40 39 2 5 6 0 1 0 5 25 1 4 0 24 1 3 4 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
14 1 6 2 40 39 2 5 6 0 1 0 5 25 1 4 0 24 1 3 4 5 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 3 4 3 101 0 6 6 1 97 2 1 1 1 26 77 0 5 5 0 97 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 4 0 3 4 3 101 0 2 2 20 77 0 6 6 1 97 0 1 1 26 77 0 5 5 0 97 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 6 1 2 6 128 0 1 0 6 5 1 6 105 0 4 0 3 4 3 101 0 5 5 0 97 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 6 1 2 6 128 0 1 0 6 5 1 6 105 0 5 0 0 4 5 0 105 0 4 3 3 4 89 0 4 4 3 97 0 3 4 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
37 38 37 36 19 38 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 800;
},
{
associatedMasterId = m01;
layerId = "59099554-62F3-4D44-B55B-6E484B4765A2";
name = "11 feb 22, 17:15";
shapes = (
{
closed = 1;
nodes = (
(544,436,l),
(559,443,o),
(574,447,o),
(587,447,cs),
(625.667,447,o),
(658.333,422,o),
(665,386,c),
(671,386,l),
(713,458,l),
(689.667,477.333,o),
(661,487,o),
(627,487,cs),
(591,487,o),
(557,476,o),
(524,453,c)
);
},
{
closed = 1;
nodes = (
(167,416.43,o),
(236.314,487,o),
(341,487,cs),
(444.822,487,o),
(522,415.337,o),
(522,317,cs),
(522,214.812,o),
(445.934,146,o),
(341,146,cs),
(233,146,o),
(167,218.333,o),
(167,317,cs)
);
},
{
closed = 1;
nodes = (
(182,165,l),
(126,150,o),
(75,121,o),
(75,71,cs),
(75,43,o),
(93,4,o),
(217,-8,cs),
(482,-33,ls),
(542,-39.667,o),
(566,-58,o),
(566,-98,cs),
(566,-152.54,o),
(472.556,-192,o),
(337,-192,cs),
(205,-192,o),
(117,-148.333,o),
(117,-79,cs),
(117,-39,o),
(138,-10,o),
(166,2,c),
(134,11,l),
(69,-3,o),
(37,-40,o),
(37,-88,cs),
(37,-202,o),
(223,-218,o),
(337,-218,cs),
(455,-218,o),
(646,-189,o),
(646,-77,cs),
(646,-14.333,o),
(604,22.333,o),
(496,33,cs),
(211,60,ls),
(168.333,64,o),
(151,79,o),
(151,99,cs),
(151,121,o),
(180,140,o),
(217,148,c)
);
},
{
closed = 1;
nodes = (
(483,514,o),
(341,514,cs),
(185.362,514,o),
(85,429.18,o),
(85,317,cs),
(85,185,o),
(207,120,o),
(341,120,cs),
(494.659,120,o),
(604,203.847,o),
(604,317,cs),
(604,435,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
41 37 2 3 2 48 42 27 3 6 3 1 1 4 6 66 21 2 5 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 8 1 4 5 6 4 105 0 7 7 1 97 0 1 1 26 77 0 3 3 2 97 0 2 2 20 77 0 5 5 0 97 0 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 8 1 4 5 6 4 105 0 5 0 0 5 0 101 0 7 7 1 97 0 1 1 26 77 0 3 3 2 97 0 2 2 20 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 3 6 2 3 105 0 6 8 1 4 5 6 4 105 0 5 0 0 5 0 101 0 7 7 1 97 0 1 1 26 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 81 79 73 71 58 56 0 54 0 53 47 45 40 38 35 33 46 9 7 23 
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (170,0);
ref = brevecomb;
}
);
width = 707;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = g;
},
{
alignment = -1;
pos = (44,0);
ref = brevecomb;
}
);
width = 800;
}
);
unicode = 287;
},
{
glyphname = h;
kernLeft = h;
kernRight = h;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,689,l),
(141,65,l),
(29,2,l),
(29,0,l),
(332,0,l),
(332,2,l),
(221,65,l),
(221,299,ls),
(221,393,o),
(309,483,o),
(427,483,cs),
(531,483,o),
(608,415,o),
(608,274,cs),
(608,57,l),
(495,2,l),
(495,0,l),
(798,0,l),
(798,2,l),
(688,57,l),
(688,274,ls),
(688,430,o),
(582,514,o),
(447,514,cs),
(334,514,o),
(246,466,o),
(205,371,c),
(221,353,l),
(221,750,l),
(29,750,l),
(29,748,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
27 1 0 4 26 21 13 8 1 5 1 2 2 76 5 1 4 4 19 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 21 1 78 0 0 0 29 0 28 37 36 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(55,0,l),
(233,0,l),
(233,304,l),
(282,352,o),
(347,385,o),
(428,385,cs),
(535,385,o),
(600,324,o),
(600,206,cs),
(600,0,l),
(778,0,l),
(778,226,ls),
(778,418,o),
(672,515,o),
(499,515,cs),
(389,515,o),
(298,474,o),
(233,413,c),
(233,750,l),
(55,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 1 2 0 17 1 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 19 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 5 1 4 4 19 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 3 1 1 1 4 95 5 1 4 4 19 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 828;
},
{
associatedMasterId = m01;
layerId = "E5CB88D6-F33F-4AFF-8468-C6DAAAAB3199";
name = "11 feb 22, 17:26";
shapes = (
{
closed = 1;
nodes = (
(162,634,l),
(162,65,l),
(50,2,l),
(50,0,l),
(353,0,l),
(353,2,l),
(242,65,l),
(242,323,ls),
(242,416,o),
(332,488,o),
(457,488,cs),
(588,488,o),
(653,418,o),
(653,279,cs),
(653,57,l),
(540,2,l),
(540,0,l),
(843,0,l),
(843,2,l),
(733,57,l),
(733,279,ls),
(733,435,o),
(634,515,o),
(474,515,cs),
(357,515,o),
(266,470,o),
(229,396,c),
(242,373,l),
(242,700,l),
(50,700,l),
(50,699,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
27 1 0 4 26 21 13 8 1 5 1 2 2 76 5 1 4 4 19 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 21 1 78 0 0 0 29 0 28 37 36 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 888;
},
{
associatedMasterId = m01;
layerId = "6228ED2D-9E32-4252-88E6-C44356D9E87C";
name = "17 feb 22, 10:42";
shapes = (
{
closed = 1;
nodes = (
(137,653,l),
(137,65,l),
(25,2,l),
(25,0,l),
(328,0,l),
(328,2,l),
(217,65,l),
(217,304,ls),
(217,399,o),
(305,487,o),
(424,487,cs),
(551,487,o),
(628,417,o),
(628,274,cs),
(628,57,l),
(515,2,l),
(515,0,l),
(818,0,l),
(818,2,l),
(708,57,l),
(708,274,ls),
(708,430,o),
(602,514,o),
(446,514,cs),
(330,514,o),
(242,471,o),
(204,376,c),
(217,358,l),
(217,715,l),
(25,715,l),
(25,714,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
27 1 0 4 26 21 13 8 1 5 1 2 2 76 5 1 4 4 19 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 21 1 78 0 0 0 29 0 28 37 36 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 843;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "C58C6781-5F08-4820-9FD6-D50B64C875B2";
name = "21 feb 22, 12:00";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(248,0,l),
(248,339,l),
(297.333,375,o),
(362.333,390,o),
(453,390,cs),
(590.333,390,o),
(645,339,o),
(645,211,cs),
(645,0,l),
(823,0,l),
(823,211,ls),
(823,399.633,o),
(699.44,520,o),
(489,520,cs),
(391.667,520,o),
(310.667,487.667,o),
(248,441,c),
(248,730,l),
(70,730,l),
(70,730,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
1 1 2 0 17 1 1 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 19 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 5 1 4 4 19 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 3 1 1 1 4 95 5 1 4 4 19 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
metricLeft = "=n-5";
metricRight = n;
note = h;
unicode = 104;
},
{
glyphname = i;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-6,0);
ref = idotless;
},
{
alignment = -1;
pos = (75,0);
ref = dotaccentcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
18 14 13 3 3 2 1 76 0 0 1 0 133 4 1 1 2 1 133 0 2 2 20 77 0 3 3 21 3 78 0 0 21 19 17 15 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 369;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (30,0);
ref = dotaccentcomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 133 4 1 1 2 2 1 112 0 2 2 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 0 133 4 1 1 2 1 133 0 2 2 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 0 133 4 1 1 2 1 133 0 2 2 3 96 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 133 4 1 1 2 1 133 0 2 3 3 2 87 0 2 2 3 96 0 3 2 3 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 15 14 13 12 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
metricLeft = "=n";
metricRight = "=n+10";
note = i;
unicode = 105;
},
{
glyphname = iacute;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (58,0);
ref = acutecomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (34,0);
ref = acutecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 1 2 0 1 103 0 2 2 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (13,0);
ref = circumflexcomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (-219,0);
ref = circumflexcomb;
}
);
width = 338;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
kernLeft = i;
kernRight = i;
lastChange = "2022-10-17 21:28:10 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (-1,0);
ref = dieresiscomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (-85,0);
ref = dieresiscomb;
}
);
width = 338;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = igrave;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (18,0);
ref = gravecomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (-101,0);
ref = gravecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 20 77 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 4 1 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 9 8 7 6 0 5 0 4 33 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (2,0);
ref = macroncomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (-157,0);
ref = macroncomb;
}
);
width = 338;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (81,0);
ref = dotaccentcomb;
},
{
pos = (54,0);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
25 24 1 3 0 4 11 10 2 1 0 2 76 0 1 0 2 1 2 101 0 6 6 5 97 0 5 5 19 77 7 1 4 4 20 77 3 1 0 0 21 0 78 0 0 37 35 31 29 0 27 0 26 21 37 35 34 8 7 26 
CALL[ ]	/* CallFunction */";
};
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (30,0);
ref = dotaccentcomb;
},
{
pos = (-122,15);
ref = ogonekcomb;
}
);
width = 338;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = j;
kernLeft = j;
kernRight = J;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = jdotless;
},
{
pos = (186,0);
ref = dotaccentcomb;
}
);
width = 441;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = jdotless;
},
{
pos = (151,0);
ref = dotaccentcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
12 1 2 3 29 1 4 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 0 133 5 1 1 3 1 133 0 2 0 4 2 4 101 0 3 3 20 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 1 0 133 5 1 1 3 1 133 0 3 2 3 133 0 2 4 4 2 89 0 2 2 4 97 0 4 2 4 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 27 25 21 20 16 14 0 11 0 10 36 6 7 23 
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
kernLeft = k;
kernRight = k;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (386,0);
},
{
name = top;
pos = (386,750);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(679,496,l),
(679,500,l),
(437,500,l),
(437,496,l),
(545,443,l),
(221,241,l),
(221,750,l),
(29,750,l),
(29,749,l),
(141,689,l),
(141,64,l),
(29,4,l),
(29,0,l),
(332,0,l),
(332,4,l),
(221,64,l),
(221,208,l)
);
},
{
closed = 1;
nodes = (
(366,373,l),
(273,370,l),
(515,46,l),
(451,4,l),
(451,0,l),
(727,0,l),
(727,4,l),
(609,50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
25 1 1 4 5 1 0 1 24 19 18 17 16 10 2 1 8 2 0 3 76 0 0 1 2 1 0 2 128 5 1 4 4 19 77 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 27 0 26 38 36 34 19 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 767;
},
{
anchors = (
{
name = bottom;
pos = (358,0);
},
{
name = top;
pos = (358,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(303,232,l),
(488,0,l),
(671,0,l),
(420,309,l)
);
},
{
closed = 1;
nodes = (
(691,500,l),
(477,500,l),
(223,316,l),
(223,750,l),
(55,750,l),
(55,0,l),
(223,0,l),
(223,160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 8 7 4 1 5 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 3 3 19 77 0 0 0 20 77 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 3 3 19 77 0 0 0 1 95 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 1 0 87 2 1 1 1 3 95 4 1 3 3 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 12 0 12 20 18 18 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 731;
},
{
associatedMasterId = m01;
layerId = "2C735073-8B48-4E3F-92DE-00F4D9BA9BAA";
name = "11 feb 22, 17:29";
shapes = (
{
closed = 1;
nodes = (
(740,496,l),
(740,500,l),
(498,500,l),
(498,496,l),
(581,438,l),
(222,224,l),
(222,700,l),
(30,700,l),
(30,699,l),
(142,634,l),
(142,64,l),
(30,4,l),
(30,0,l),
(333,0,l),
(333,4,l),
(222,64,l),
(222,198,l)
);
},
{
closed = 1;
nodes = (
(420,347,l),
(321,344,l),
(551,64,l),
(498,4,l),
(498,0,l),
(782,0,l),
(782,4,l),
(655,64,l),
(435,328,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
25 1 1 4 5 1 0 1 24 19 18 17 16 10 2 1 8 2 0 3 76 0 0 1 2 1 0 2 128 5 1 4 4 19 77 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 27 0 26 38 36 34 19 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 837;
},
{
anchors = (
{
name = bottom;
pos = (373,0);
},
{
name = top;
pos = (373,730);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "A8BC6C4C-2B18-48A4-AE57-D68C808AB63A";
name = "21 feb 22, 12:00";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(248,0,l),
(238,3,l),
(238,157,l),
(328,220,l),
(533,0,l),
(716,0,l),
(437,297,l),
(726,500,l),
(522,500,l),
(238,316,l),
(238,730,l),
(70,730,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 8 7 4 1 5 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 3 3 19 77 0 0 0 20 77 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 3 3 19 77 0 0 0 1 95 2 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 0 1 1 0 87 2 1 1 1 3 95 4 1 3 3 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 12 0 12 20 18 18 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 746;
},
{
anchors = (
{
name = bottom;
pos = (386,0);
},
{
name = top;
pos = (386,750);
}
);
associatedMasterId = m01;
layerId = "179FC63C-E402-4C70-A3C1-AC99D3FF5494";
name = "23 feb 22, 11:24";
shapes = (
{
closed = 1;
nodes = (
(689,496,l),
(689,500,l),
(447,500,l),
(447,496,l),
(555,443,l),
(221,231,l),
(221,750,l),
(29,750,l),
(29,749,l),
(141,689,l),
(141,64,l),
(29,4,l),
(29,0,l),
(332,0,l),
(332,4,l),
(221,64,l),
(221,198,l)
);
},
{
closed = 1;
nodes = (
(365,367,l),
(274,364,l),
(525,46,l),
(461,4,l),
(461,0,l),
(737,0,l),
(737,4,l),
(619,50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
25 1 1 4 5 1 0 1 24 19 18 17 16 10 2 1 8 2 0 3 76 0 0 1 2 1 0 2 128 5 1 4 4 19 77 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 27 0 26 38 36 34 19 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
metricLeft = h;
note = k;
unicode = 107;
},
{
glyphname = l;
kernLeft = l;
kernRight = l;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (191,0);
},
{
name = center;
pos = (191,375);
},
{
name = top;
pos = (191,750);
},
{
name = topright;
pos = (352,750);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,748,l),
(154,684,l),
(154,65,l),
(39,2,l),
(39,0,l),
(342,0,l),
(342,2,l),
(229,65,l),
(229,750,l),
(39,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
7 6 1 3 0 1 1 76 2 1 1 1 19 77 0 0 0 21 0 78 0 0 0 9 0 8 34 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 374;
},
{
anchors = (
{
name = bottom;
pos = (160,0);
},
{
name = center;
pos = (160,365);
},
{
name = top;
pos = (160,730);
},
{
name = topright;
pos = (308,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(65,0,l),
(243,0,l),
(243,750,l),
(65,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 19 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 95 2 1 1 1 19 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
metricLeft = "=h+10";
metricRight = "=h+10";
note = l;
unicode = 108;
},
{
glyphname = lacute;
kernLeft = l;
kernRight = l;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (68,250);
ref = acutecomb;
}
);
width = 374;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = l;
},
{
pos = (25,230);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
10 4 2 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 3 3 0 112 0 2 3 1 3 2 1 128 4 1 3 3 19 77 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 0 3 0 133 0 2 3 1 3 2 1 128 4 1 3 3 19 77 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 3 0 133 0 2 3 1 3 2 1 128 0 1 1 3 95 4 1 3 3 19 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 17 19 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 303;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
kernLeft = l;
kernRight = l;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
alignment = -1;
pos = (257,-11);
ref = caroncomb.alt;
}
);
width = 374;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
alignment = -1;
ref = l;
},
{
pos = (278,0);
ref = caroncomb.alt;
}
);
width = 553;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = lslash;
kernLeft = l;
kernRight = l;
lastChange = "2022-04-09 17:03:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,483,l),
(322,508,l),
(42,300,l),
(59,275,l)
);
},
{
ref = l;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
17 16 15 14 9 8 7 6 5 1 0 11 1 0 1 76 0 0 0 19 77 0 1 1 21 1 78 38 34 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 374;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
metricLeft = "=l-30";
metricRight = "=l-30";
shapes = (
{
pos = (95,0);
ref = l;
},
{
closed = 1;
nodes = (
(476,425,l),
(415,528,l),
(35,320,l),
(96,217,l)
);
}
);
width = 506;
}
);
metricLeft = l;
metricRight = l;
note = lslash;
unicode = 322;
},
{
glyphname = m;
kernLeft = m;
kernRight = m;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,434,l),
(146,65,l),
(34,2,l),
(34,0,l),
(337,0,l),
(337,2,l),
(226,65,l),
(226,315,ls),
(226,416,o),
(301,484,o),
(412,484,cs),
(520,484,o),
(597,417,o),
(597,274,cs),
(597,57,l),
(484,2,l),
(484,0,l),
(787,0,l),
(787,2,l),
(677,57,l),
(677,280,ls),
(677,396,o),
(751,484,o),
(867,484,cs),
(992,484,o),
(1051,412,o),
(1051,269,cs),
(1051,57,l),
(938,2,l),
(938,0,l),
(1241,0,l),
(1241,2,l),
(1131,57,l),
(1131,279,ls),
(1131,422,o),
(1048,515,o),
(882,515,cs),
(758,515,o),
(674,443,o),
(650,340,c),
(668,339,l),
(638,452,o),
(546,515,o),
(425,515,cs),
(319,515,o),
(244,471,o),
(214,399,c),
(226,378,l),
(226,500,l),
(34,500,l),
(34,499,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
50 49 44 35 30 20 15 7 1 9 2 3 1 76 8 1 7 7 20 77 5 1 3 3 0 97 1 1 0 0 26 77 6 4 2 2 2 21 2 78 0 0 0 52 0 51 37 37 38 37 37 36 35 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1263;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(753,0,l),
(753,226,ls),
(753,418,o),
(647,515,o),
(494,515,cs),
(384,515,o),
(303,474,o),
(238,413,c),
(238,500,l),
(60,500,l),
(60,0,l),
(238,0,l),
(238,304,l),
(287,352,o),
(342,385,o),
(423,385,cs),
(510,385,o),
(575,324,o),
(575,206,cs),
(575,0,l)
);
},
{
closed = 1;
nodes = (
(795,352,o),
(850,385,o),
(931,385,cs),
(1018,385,o),
(1083,324,o),
(1083,206,cs),
(1083,0,l),
(1261,0,l),
(1261,226,ls),
(1261,418,o),
(1155,515,o),
(1002,515,cs),
(892,515,o),
(811,484,o),
(706,377,c),
(746,304,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 3 0 33 21 2 2 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 3 7 33 21 2 2 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 3 0 97 8 7 1 3 0 0 26 77 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
8 1 7 7 20 77 5 1 3 3 0 97 1 1 0 0 26 77 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
1 1 0 5 1 3 2 0 3 105 8 1 7 7 2 95 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 1 7 3 2 7 87 1 1 0 5 1 3 2 0 3 105 8 1 7 7 2 95 6 4 2 2 7 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 0 36 19 36 20 36 19 35 35 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1311;
},
{
associatedMasterId = m01;
layerId = "DE271BD2-C8D7-4730-96E6-3D89F8F439B8";
name = "11 feb 22, 17:13";
shapes = (
{
closed = 1;
nodes = (
(162,434,l),
(162,65,l),
(50,2,l),
(50,0,l),
(353,0,l),
(353,2,l),
(242,65,l),
(242,315,ls),
(242,416.109,o),
(316.638,487,o),
(417,487,cs),
(535.667,487,o),
(613,416.667,o),
(613,274,cs),
(613,57,l),
(500,2,l),
(500,0,l),
(803,0,l),
(803,2,l),
(693,57,l),
(693,274,l),
(693,280,ls),
(693,396.216,o),
(761.651,487,o),
(871,487,cs),
(988.333,487,o),
(1067,411.667,o),
(1067,269,cs),
(1067,57,l),
(954,2,l),
(954,0,l),
(1257,0,l),
(1257,2,l),
(1147,57,l),
(1147,269,ls),
(1147,421.941,o),
(1044,514,o),
(885,514,cs),
(778,514,o),
(707.667,455.667,o),
(677,369,c),
(642.333,463.667,o),
(551,514,o),
(431,514,cs),
(347,514,o),
(278,480.333,o),
(242,423,c),
(242,500,l),
(50,500,l),
(50,499,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
50 49 44 35 30 20 15 7 1 9 2 3 1 76 8 1 7 7 20 77 5 1 3 3 0 97 1 1 0 0 26 77 6 4 2 2 2 21 2 78 0 0 0 52 0 51 37 37 38 37 37 36 35 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1302;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "106C9224-E8BF-4926-8F1C-DB96F61C1CF9";
name = "21 feb 22, 12:02";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(248,0,l),
(248,339,l),
(297.333,375,o),
(362.333,390,o),
(453,390,cs),
(543.667,390,o),
(590,366.667,o),
(610,316,cs),
(620,290.667,o),
(625,255.667,o),
(625,211,cs),
(625,0,l),
(803,0,l),
(803,201,ls),
(803,259.667,o),
(794,311,o),
(776,355,c),
(822,378.333,o),
(882.667,390,o),
(958,390,cs),
(1047.333,390,o),
(1092.167,366.833,o),
(1111.5,315.5,cs),
(1121.167,289.833,o),
(1126,255,o),
(1126,211,cs),
(1126,0,l),
(1304,0,l),
(1304,211,ls),
(1304,403,o),
(1196.667,520,o),
(990,520,cs),
(883.333,520,o),
(793.333,481.667,o),
(732,427,c),
(678,489,o),
(597,520,o),
(489,520,cs),
(391.667,520,o),
(310.667,487.667,o),
(248,441,c),
(248,500,l),
(70,500,l),
(70,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 3 0 33 21 2 2 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 3 7 33 21 2 2 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
5 1 3 3 0 97 8 7 1 3 0 0 26 77 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
8 1 7 7 20 77 5 1 3 3 0 97 1 1 0 0 26 77 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
1 1 0 5 1 3 2 0 3 105 8 1 7 7 2 95 6 4 2 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
8 1 7 3 2 7 87 1 1 0 5 1 3 2 0 3 105 8 1 7 7 2 95 6 4 2 2 7 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 36 0 36 19 36 20 36 19 35 35 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 1384;
}
);
metricLeft = "=n";
metricRight = "=n";
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = n;
kernRight = n;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (421,0);
},
{
name = top;
pos = (421,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,439,l),
(146,65,l),
(34,2,l),
(34,0,l),
(337,0,l),
(337,2,l),
(226,65,l),
(226,299,ls),
(226,393,o),
(311,483,o),
(434,483,cs),
(540,483,o),
(613,415,o),
(613,274,cs),
(613,57,l),
(500,2,l),
(500,0,l),
(803,0,l),
(803,2,l),
(693,57,l),
(693,274,ls),
(693,430,o),
(587,514,o),
(440,514,cs),
(337,514,o),
(251,466,o),
(210,371,c),
(226,353,l),
(226,500,l),
(34,500,l),
(34,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 27 22 13 8 1 6 1 2 1 76 5 1 4 4 20 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 21 1 78 0 0 0 30 0 29 37 37 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 825;
},
{
anchors = (
{
name = bottom;
pos = (442,0);
},
{
name = top;
pos = (442,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(60,0,l),
(238,0,l),
(238,304,l),
(287,352,o),
(352,385,o),
(433,385,cs),
(540,385,o),
(605,324,o),
(605,206,cs),
(605,0,l),
(783,0,l),
(783,226,ls),
(783,418,o),
(677,515,o),
(504,515,cs),
(394,515,o),
(303,474,o),
(238,413,c),
(238,500,l),
(60,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
1 1 2 0 16 1 1 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
1 1 2 4 16 1 1 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 5 4 2 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 20 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 5 1 4 4 1 95 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 2 1 4 87 0 0 0 2 1 0 2 105 5 1 4 4 1 95 3 1 1 4 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 833;
},
{
anchors = (
{
name = bottom;
pos = (452,0);
},
{
name = top;
pos = (452,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "C7472714-C39F-4613-A42A-807A23781EAA";
name = "21 feb 22, 11:20";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(248,0,l),
(248,334,l),
(297,370,o),
(362,385,o),
(453,385,cs),
(590,385,o),
(645,334,o),
(645,206,cs),
(645,0,l),
(823,0,l),
(823,206,ls),
(823,398,o),
(719,515,o),
(519,515,cs),
(406,515,o),
(313,482,o),
(248,433,c),
(248,500,l),
(70,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
1 1 2 0 16 1 1 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
1 1 2 4 16 1 1 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 5 4 2 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 4 4 20 77 0 2 2 0 97 0 0 0 26 77 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 2 1 0 2 105 5 1 4 4 1 95 3 1 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 4 2 1 4 87 0 0 0 2 1 0 2 105 5 1 4 4 1 95 3 1 1 4 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
kernLeft = n;
kernRight = n;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (298,0);
ref = acutecomb;
}
);
width = 825;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = n;
},
{
pos = (307,0);
ref = acutecomb;
}
);
width = 833;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
kernLeft = n;
kernRight = n;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (253,0);
ref = caroncomb;
}
);
width = 825;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = n;
},
{
pos = (54,0);
ref = caroncomb;
}
);
width = 833;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = ntilde;
kernLeft = n;
kernRight = n;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (230,0);
ref = tildecomb;
}
);
width = 825;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = n;
},
{
pos = (76,0);
ref = tildecomb;
}
);
width = 833;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = o;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (356,0);
},
{
name = center;
pos = (356,250);
},
{
name = ogonek;
pos = (644,10);
},
{
name = top;
pos = (356,500);
},
{
name = topright;
pos = (696,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,-15,o),
(664,101,o),
(664,250,cs),
(664,415,o),
(508,515,o),
(358,515,cs),
(202,515,o),
(48,411,o),
(48,250,cs),
(48,84,o),
(210,-15,o),
(358,-15,cs)
);
},
{
closed = 1;
nodes = (
(135,390,o),
(229,489,o),
(358,489,cs),
(485,489,o),
(577,390,o),
(577,250,cs),
(577,108,o),
(483,11,o),
(358,11,cs),
(229,11,o),
(135,110,o),
(135,250,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 3 3 0 97 0 0 0 26 77 0 2 2 1 97 4 1 1 1 27 1 78 0 0 28 26 20 18 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 712;
},
{
anchors = (
{
name = bottom;
pos = (420,0);
},
{
name = center;
pos = (420,250);
},
{
name = ogonek;
pos = (760,10);
},
{
name = top;
pos = (420,500);
},
{
name = topright;
pos = (825,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(194,515,o),
(43,403,o),
(43,250,cs),
(43,70,o),
(234,-15,o),
(420,-15,cs),
(595,-15,o),
(797,63,o),
(797,250,cs),
(797,403,o),
(646,515,o),
(420,515,cs)
);
},
{
closed = 1;
nodes = (
(217,341,o),
(281,383,o),
(420,383,cs),
(559,383,o),
(623,341,o),
(623,250,cs),
(623,157,o),
(559,117,o),
(420,117,cs),
(281,117,o),
(217,157,o),
(217,250,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 26 77 0 2 2 1 97 4 1 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 3 2 0 3 105 0 2 2 1 97 4 1 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 25 23 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 840;
},
{
anchors = (
{
name = bottom;
pos = (361,0);
},
{
name = center;
pos = (361,250);
},
{
name = ogonek;
pos = (649,10);
},
{
name = top;
pos = (361,500);
},
{
name = topright;
pos = (701,500);
}
);
associatedMasterId = m01;
layerId = "8CB58B1B-CE4B-490E-A113-23913E472700";
name = "11 feb 22, 16:57";
shapes = (
{
closed = 1;
nodes = (
(548.699,-14,o),
(678,98.814,o),
(678,250,cs),
(678,352.667,o),
(618,435.833,o),
(522,480.5,cs),
(474,502.833,o),
(421,514,o),
(363,514,cs),
(247,514,o),
(143.333,467,o),
(86,387,cs),
(57.333,347,o),
(43,301.333,o),
(43,250,cs),
(43,147.333,o),
(104.5,64.167,o),
(202.5,19.5,cs),
(251.5,-2.833,o),
(305,-14,o),
(363,-14,cs)
);
},
{
closed = 1;
nodes = (
(128,391.894,o),
(222.385,488,o),
(363,488,cs),
(502.422,488,o),
(593,392.163,o),
(593,250,cs),
(593,106.133,o),
(500.003,12,o),
(363,12,cs),
(222.385,12,o),
(128,108.106,o),
(128,250,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 3 3 0 97 0 0 0 26 77 0 2 2 1 97 4 1 1 1 27 1 78 0 0 28 26 20 18 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 721;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (233,0);
ref = acutecomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (285,0);
ref = acutecomb;
}
);
width = 840;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (188,0);
ref = circumflexcomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (32,0);
ref = circumflexcomb;
}
);
width = 840;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (174,0);
ref = dieresiscomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (166,0);
ref = dieresiscomb;
}
);
width = 840;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (193,0);
ref = gravecomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (150,0);
ref = gravecomb;
}
);
width = 840;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (155,0);
ref = hungarumlautcomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (120,0);
ref = hungarumlautcomb;
}
);
width = 840;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (177,0);
ref = macroncomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (94,0);
ref = macroncomb;
}
);
width = 840;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
closed = 1;
nodes = (
(574,554,l),
(144,-45,l),
(174,-65,l),
(603,534,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
16 1 2 0 43 42 27 26 4 3 2 4 1 2 1 3 3 76 15 14 2 0 74 3 2 2 1 73 0 2 2 0 97 0 0 0 26 77 0 3 3 1 97 4 1 1 1 27 1 78 0 0 36 34 30 28 0 23 0 22 42 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 740;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
34 18 2 3 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 0 97 0 0 0 26 77 0 3 3 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 55 38 34 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
kernLeft = o;
kernRight = o;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = o;
},
{
pos = (165,0);
ref = tildecomb;
}
);
width = 712;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
},
{
pos = (54,0);
ref = tildecomb;
}
);
width = 840;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
kernLeft = o;
kernRight = e;
lastChange = "2022-04-09 17:03:54 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (530,0);
ref = e;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
10 1 9 7 34 27 26 3 3 2 2 76 11 1 9 0 2 3 9 2 103 8 1 7 7 0 97 1 1 0 0 26 77 0 3 3 4 97 10 5 2 4 4 27 77 0 6 6 4 97 10 5 2 4 4 27 4 78 54 54 0 0 54 61 54 61 59 57 50 48 42 40 0 37 0 36 39 35 19 36 38 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1212;
},
{
anchors = (
{
name = bottom;
pos = (420,0);
},
{
name = center;
pos = (420,250);
},
{
name = ogonek;
pos = (760,10);
},
{
name = top;
pos = (420,500);
},
{
name = topright;
pos = (825,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(194,515,o),
(43,403,o),
(43,250,cs),
(43,70,o),
(234,-15,o),
(420,-15,cs),
(547,-15,o),
(689,26,o),
(757,121,c),
(756,378,l),
(697,461,o),
(576,515,o),
(420,515,cs)
);
},
{
closed = 1;
nodes = (
(217,341,o),
(281,383,o),
(420,383,cs),
(559,383,o),
(623,341,o),
(623,250,cs),
(623,157,o),
(559,117,o),
(420,117,cs),
(281,117,o),
(217,157,o),
(217,250,cs)
);
},
{
alignment = -1;
pos = (581,0);
ref = e;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
10 1 7 0 24 1 3 2 31 25 2 4 3 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
10 1 7 0 24 1 3 2 31 25 2 4 6 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
11 1 9 0 2 3 9 2 103 8 1 7 7 0 97 1 1 0 0 26 77 6 1 3 3 4 97 10 5 2 4 4 27 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
1 1 0 8 1 7 9 0 7 105 11 1 9 0 2 3 9 2 103 0 3 3 4 97 10 5 2 4 4 27 77 0 6 6 4 97 10 5 2 4 4 27 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
1 1 0 8 1 7 9 0 7 105 11 1 9 0 2 3 9 2 103 0 3 3 4 97 10 5 2 4 4 24 77 0 6 6 4 97 10 5 2 4 4 24 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
1 1 0 8 1 7 9 0 7 105 11 1 9 0 2 3 9 2 103 0 3 3 4 97 0 4 4 24 77 0 6 6 5 97 10 1 5 5 24 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
1 1 0 8 1 7 9 0 7 105 11 1 9 0 2 3 9 2 103 0 6 4 5 6 89 0 3 0 4 5 3 4 105 0 6 6 5 97 10 1 5 6 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
51 51 0 0 51 57 51 57 55 53 47 45 39 37 0 34 0 33 37 34 19 36 38 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1379;
},
{
associatedMasterId = m01;
layerId = "57CA9BFB-05A0-453B-AFE9-80DF6B04763A";
name = "11 feb 22, 19:08";
shapes = (
{
closed = 1;
nodes = (
(453.667,-14,o),
(544,34,o),
(592,110,c),
(644,32.667,o),
(739.667,-14,o),
(845,-14,cs),
(965.051,-14,o),
(1076.605,43.726,o),
(1108,111,c),
(1094,128,l),
(1075.246,74.083,o),
(974.401,27,o),
(876,27,cs),
(739.868,27,o),
(631,129.457,o),
(631,265,c),
(1136,255,l),
(1136,353.667,o),
(1087.833,435.833,o),
(1000.5,480.5,cs),
(956.833,502.833,o),
(905.667,514,o),
(847,514,cs),
(737.667,514,o),
(643.667,466,o),
(593,390,c),
(545,467.333,o),
(453.667,514,o),
(327,514,cs),
(203,514,o),
(106.5,463,o),
(56.5,383,cs),
(31.5,343,o),
(19.333,298.667,o),
(20,250,cs),
(18.667,152.667,o),
(66.833,68.833,o),
(159.5,21.5,cs),
(205.833,-2.167,o),
(261.667,-14,o),
(327,-14,cs)
);
},
{
closed = 1;
nodes = (
(102,398.682,o),
(192.256,500,o),
(327,500,cs),
(463.451,500,o),
(549,398.764,o),
(549,250,cs),
(549,103.089,o),
(461.754,0,o),
(327,0,cs),
(192.889,0,o),
(102,102.841,o),
(102,250,cs)
);
},
{
closed = 1;
nodes = (
(631,442.333,o),
(726.333,500,o),
(845,500,cs),
(945,500,o),
(1007.833,456.5,o),
(1036.5,394.5,cs),
(1050.833,363.5,o),
(1058,330.667,o),
(1058,296,c),
(631,281,l),
(631,281,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
10 1 9 7 34 27 26 3 3 2 2 76 11 1 9 0 2 3 9 2 103 8 1 7 7 0 97 1 1 0 0 26 77 0 3 3 4 97 10 5 2 4 4 27 77 0 6 6 4 97 10 5 2 4 4 27 4 78 54 54 0 0 54 61 54 61 59 57 50 48 42 40 0 37 0 36 39 35 19 36 38 12 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1156;
}
);
metricLeft = o;
metricRight = e;
note = oe;
unicode = 339;
},
{
glyphname = p;
kernLeft = p;
kernRight = p;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,48,l),
(235,15,o),
(305,-11,o),
(377,-11,cs),
(526,-11,o),
(675,99,o),
(675,255,cs),
(675,399,o),
(539,514,o),
(382,514,cs),
(294,514,o),
(236,481,o),
(192,444,c),
(192,500,l),
(0,500,l),
(0,498,l),
(112,434,l),
(112,-185,l),
(1,-248,l),
(1,-250,l),
(354,-250,l),
(354,-248,l),
(192,-185,l)
);
},
{
closed = 1;
nodes = (
(192,409,l),
(233,453,o),
(306,488,o),
(370,488,cs),
(500,488,o),
(580,398,o),
(580,255,cs),
(580,112,o),
(491,15,o),
(369,15,cs),
(294,15,o),
(237,46,o),
(192,87,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
38 37 22 15 1 5 4 5 21 16 2 2 1 2 76 6 1 3 3 20 77 0 5 5 0 97 0 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 22 2 78 0 0 35 33 28 26 0 24 0 23 36 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 723;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(238,-250,l),
(238,57,l),
(296,3,o),
(394,-15,o),
(476,-15,cs),
(668,-15,o),
(799,93,o),
(799,251,cs),
(799,409,o),
(667,515,o),
(476,515,cs),
(395,515,o),
(298,487,o),
(238,438,c),
(238,500,l),
(60,500,l),
(60,-250,l)
);
},
{
closed = 1;
nodes = (
(238,334,l),
(300,366,o),
(373,390,o),
(450,390,cs),
(569,390,o),
(625,351,o),
(625,250,cs),
(625,149,o),
(567,110,o),
(450,110,cs),
(373,110,o),
(300,126,o),
(238,162,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
1 1 5 0 31 30 2 4 5 15 1 1 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
1 1 5 3 31 30 2 4 5 15 1 1 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 0 97 6 3 2 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 0 97 6 3 2 0 0 26 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 0 97 0 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 3 95 6 1 3 3 20 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 5 4 0 5 105 6 1 3 0 2 3 2 99 0 4 4 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 3 5 2 3 87 0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 105 6 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 28 26 22 20 0 18 0 18 19 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 842;
},
{
associatedMasterId = m01;
layerId = "A9C5EFB7-06B2-43DA-BD00-BFF1816FA7ED";
name = "17 feb 22, 10:36";
shapes = (
{
closed = 1;
nodes = (
(0,497,l),
(112,433,l),
(112,-136,l),
(0,-198,l),
(0,-200,l),
(353,-200,l),
(353,-198,l),
(192,-136,l),
(192,42,l),
(240,7.333,o),
(306.667,-11,o),
(380,-11,cs),
(547,-11,o),
(700,92,o),
(700,255,cs),
(700,399.36,o),
(564.067,514,o),
(380,514,cs),
(308,514,o),
(240,495.333,o),
(192,462,c),
(192,499,l),
(0,499,l)
);
},
{
closed = 1;
nodes = (
(192,427,l),
(237.333,467,o),
(306.667,488,o),
(380,488,cs),
(528,488,o),
(615,397.667,o),
(615,255,cs),
(615,111.753,o),
(523.166,15,o),
(380,15,cs),
(309.333,15,o),
(237.333,37.667,o),
(192,79,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
38 37 22 15 1 5 4 5 21 16 2 2 1 2 76 6 1 3 3 20 77 0 5 5 0 97 0 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 22 2 78 0 0 35 33 28 26 0 24 0 23 36 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 758;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "1436E90D-EB7A-45E4-A8AD-5FC13BCF44F1";
name = "21 feb 22, 12:04";
shapes = (
{
closed = 1;
nodes = (
(70,-249,l),
(249,-250,l),
(249,53,l),
(310.333,10.333,o),
(398,-20,o),
(486,-20,cs),
(697.057,-20,o),
(829,90.945,o),
(829,249,cs),
(829,406.508,o),
(697.69,520,o),
(486,520,cs),
(398,520,o),
(310.333,486.667,o),
(249,440,c),
(249,500,l),
(70,500,l),
(70,500,l)
);
},
{
closed = 1;
nodes = (
(249,339,l),
(303.667,372.333,o),
(385.333,399,o),
(460,399,cs),
(597.333,399,o),
(655,352.333,o),
(655,251,cs),
(655,149.667,o),
(598.667,110,o),
(460,110,cs),
(385.333,110,o),
(303.667,131.333,o),
(249,162,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
1 1 5 0 31 30 2 4 5 15 1 1 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
1 1 5 3 31 30 2 4 5 15 1 1 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 5 0 97 6 3 2 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 0 97 6 3 2 0 0 26 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 5 5 0 97 0 0 0 26 77 0 4 4 1 97 0 1 1 27 77 0 2 2 3 95 6 1 3 3 20 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 5 4 0 5 105 6 1 3 0 2 3 2 99 0 4 4 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 3 5 2 3 87 0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 105 6 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 28 26 22 20 0 18 0 18 19 38 35 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
metricRight = "=o";
note = p;
unicode = 112;
},
{
glyphname = thorn;
lastChange = "2022-04-09 17:03:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,700,l),
(24,700,l),
(24,698,l),
(136,634,l),
(136,-135,l),
(25,-198,l),
(25,-200,l),
(378,-200,l),
(378,-198,l),
(216,-135,l)
);
},
{
closed = 1;
nodes = (
(215,48,l),
(258,15,o),
(328,-11,o),
(400,-11,cs),
(549,-11,o),
(698,99,o),
(698,255,cs),
(698,399,o),
(562,514,o),
(405,514,cs),
(317,514,o),
(259,481,o),
(215,444,c),
(215,409,l),
(256,453,o),
(329,488,o),
(393,488,cs),
(523,488,o),
(603,398,o),
(603,255,cs),
(603,112,o),
(514,15,o),
(392,15,cs),
(317,15,o),
(260,46,o),
(215,87,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
18 2 2 0 3 17 12 2 2 1 2 76 0 0 0 5 4 0 5 106 6 1 3 3 20 77 7 1 4 4 1 97 0 1 1 27 77 0 2 2 22 2 78 22 21 0 0 28 26 21 29 22 29 0 20 0 19 34 36 35 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 746;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(228,-250,l),
(228,57,l),
(286,3,o),
(384,-15,o),
(466,-15,cs),
(658,-15,o),
(789,93,o),
(789,251,cs),
(789,409,o),
(657,515,o),
(466,515,cs),
(385,515,o),
(288,487,o),
(228,438,c),
(228,750,l),
(50,750,l),
(50,-250,l)
);
},
{
closed = 1;
nodes = (
(228,334,l),
(290,366,o),
(363,390,o),
(440,390,cs),
(559,390,o),
(615,351,o),
(615,250,cs),
(615,149,o),
(557,110,o),
(440,110,cs),
(363,110,o),
(290,126,o),
(228,162,c)
);
}
);
width = 832;
}
);
metricLeft = "=h-5";
metricRight = p;
note = thorn;
unicode = 254;
},
{
glyphname = q;
kernLeft = o;
kernRight = q;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,85,l),
(486,45,o),
(409,14,o),
(355,14,cs),
(223,14,o),
(143,104,o),
(143,247,cs),
(143,390,o),
(231,486,o),
(353,486,cs),
(428,486,o),
(486,450,o),
(531,409,c)
);
},
{
closed = 1;
nodes = (
(369,-248,l),
(369,-250,l),
(722,-250,l),
(722,-248,l),
(611,-185,l),
(612,515,l),
(611,515,l),
(531,444,l),
(482,481,o),
(433,513,o),
(344,513,cs),
(197,513,o),
(48,403,o),
(48,247,cs),
(48,103,o),
(184,-12,o),
(341,-12,cs),
(425,-12,o),
(483,17,o),
(531,50,c),
(531,-185,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
21 1 4 2 30 29 20 6 4 3 4 5 0 2 0 1 3 76 0 4 4 2 97 0 2 2 26 77 0 3 3 1 97 0 1 1 27 77 0 0 0 22 0 78 37 39 38 37 33 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 735;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(782,506,l),
(674,506,l),
(614,441,l),
(554,486,o),
(457,515,o),
(366,515,cs),
(175,515,o),
(43,409,o),
(43,251,cs),
(43,93,o),
(174,-15,o),
(366,-15,cs),
(458,-15,o),
(546,6,o),
(604,60,c),
(604,-250,l),
(782,-250,l)
);
},
{
closed = 1;
nodes = (
(542,129,o),
(469,110,o),
(392,110,cs),
(275,110,o),
(217,149,o),
(217,250,cs),
(217,351,o),
(273,390,o),
(392,390,cs),
(469,390,o),
(542,369,o),
(604,337,c),
(604,165,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
16 1 5 2 25 24 2 4 5 2 1 1 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
16 1 5 3 25 24 2 4 5 2 1 1 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 2 97 3 1 2 2 26 77 0 4 4 1 97 0 1 1 27 77 0 0 0 2 97 3 1 2 2 26 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 77 0 0 0 3 95 0 3 3 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 5 4 2 5 105 0 3 0 0 3 0 99 0 4 4 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 5 0 3 87 0 2 0 5 4 2 5 105 0 4 0 1 0 4 1 105 0 3 3 0 95 0 0 3 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 34 19 38 35 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 842;
},
{
associatedMasterId = m01;
layerId = "989BC5B6-980C-460E-A2B7-1856816C664C";
name = "17 feb 22, 10:40";
shapes = (
{
closed = 1;
nodes = (
(663,500,l),
(603,430,l),
(555,483,o),
(470,514,o),
(378,514,cs),
(194,514,o),
(58,399,o),
(58,255,cs),
(58,158,o),
(116,72,o),
(213,25,cs),
(262,1,o),
(317,-11,o),
(378,-11,cs),
(462,-11,o),
(536,13,o),
(585,57,c),
(585,-136,l),
(424,-199,l),
(424,-201,l),
(777,-201,l),
(777,-199,l),
(665,-136,l),
(665,500,l)
);
},
{
closed = 1;
nodes = (
(143,398,o),
(230,488,o),
(378,488,cs),
(462,488,o),
(542,460,o),
(585,409,c),
(585,99,l),
(541,46,o),
(459,15,o),
(378,15,cs),
(235,15,o),
(143,112,o),
(143,255,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
21 1 4 2 30 29 20 6 4 3 4 5 0 2 0 1 3 76 0 4 4 2 97 0 2 2 26 77 0 3 3 1 97 0 1 1 27 77 0 0 0 22 0 78 37 39 38 37 33 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 777;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "AF7CA9D6-5172-4E12-A8FC-3133E69405AA";
name = "21 feb 22, 12:06";
shapes = (
{
closed = 1;
nodes = (
(640,500,l),
(621,439,l),
(561,487,o),
(472,520,o),
(383,520,cs),
(171,520,o),
(40,407,o),
(40,249,cs),
(40,91,o),
(172,-20,o),
(383,-20,cs),
(471,-20,o),
(559,10,o),
(620,53,c),
(620,-270,l),
(799,-269,l),
(799,500,l),
(799,500,l)
);
},
{
closed = 1;
nodes = (
(214,352,o),
(272,399,o),
(409,399,cs),
(484,399,o),
(565,372,o),
(620,339,c),
(620,162,l),
(565,131,o),
(484,110,o),
(409,110,cs),
(270,110,o),
(214,150,o),
(214,251,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
16 1 5 2 25 24 2 4 5 2 1 1 4 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
16 1 5 3 25 24 2 4 5 2 1 1 4 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 5 5 2 97 3 1 2 2 26 77 0 4 4 1 97 0 1 1 27 77 0 0 0 2 97 3 1 2 2 26 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 2 97 0 2 2 26 77 0 4 4 1 97 0 1 1 27 77 0 0 0 3 95 0 3 3 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 5 4 2 5 105 0 3 0 0 3 0 99 0 4 4 1 97 0 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 5 0 3 87 0 2 0 5 4 2 5 105 0 4 0 1 0 4 1 105 0 3 3 0 95 0 0 3 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
37 34 19 38 35 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
metricLeft = "=o";
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = r;
kernRight = r;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (187,0);
},
{
name = top;
pos = (349,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,498,l),
(146,434,l),
(146,65,l),
(34,2,l),
(34,0,l),
(367,0,l),
(367,2,l),
(226,65,l),
(226,265,ls),
(226,384,o),
(289,483,o),
(380,483,cs),
(464,483,o),
(526,403,o),
(526,304,c),
(528,304,l),
(607,374,l),
(570,469,o),
(493,510,o),
(406,510,cs),
(319,510,o),
(259,468,o),
(226,401,c),
(226,500,l),
(34,500,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
24 23 18 8 7 1 6 2 1 1 76 4 1 3 3 20 77 0 1 1 0 97 0 0 0 26 77 0 2 2 21 2 78 0 0 0 26 0 25 37 39 35 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 627;
},
{
anchors = (
{
name = bottom;
pos = (147,0);
},
{
name = top;
pos = (287,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(60,0,l),
(238,0,l),
(238,304,l),
(281,350,o),
(332,375,o),
(403,375,cs),
(470,375,o),
(513,364,o),
(554,336,c),
(554,496,l),
(527,507,o),
(477,515,o),
(442,515,cs),
(361,515,o),
(293,482,o),
(238,427,c),
(238,500,l),
(60,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 1 0 13 7 2 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
6 1 3 0 1 1 1 3 13 7 2 2 1 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 1 0 97 4 3 2 0 0 26 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 20 77 0 1 1 0 97 0 0 0 26 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 105 4 1 3 3 2 95 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 1 2 3 87 0 0 0 1 2 0 1 105 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 16 0 16 19 37 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 584;
},
{
anchors = (
{
name = bottom;
pos = (172,0);
},
{
name = top;
pos = (297,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "2901BB81-56D5-4C5F-B737-36488DF38833";
name = "21 feb 22, 11:19";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(248,0,l),
(248,329,l),
(291,365,o),
(342.333,380,o),
(413,380,cs),
(479.667,380,o),
(522.667,369,o),
(564,341,c),
(564,501,l),
(537.333,511.667,o),
(483.667,520,o),
(449,520,cs),
(370.333,520,o),
(303,497,o),
(248,452,c),
(248,500,l),
(70,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
6 1 2 1 0 13 7 2 2 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
6 1 3 0 1 1 1 3 13 7 2 2 1 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 1 0 97 4 3 2 0 0 26 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 3 3 20 77 0 1 1 0 97 0 0 0 26 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 105 4 1 3 3 2 95 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 3 1 2 3 87 0 0 0 1 2 0 1 105 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 16 0 16 19 37 34 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
metricLeft = "=n";
note = r;
unicode = 114;
},
{
glyphname = racute;
kernLeft = r;
kernRight = r;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (226,0);
ref = acutecomb;
}
);
width = 627;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = r;
},
{
pos = (152,0);
ref = acutecomb;
}
);
width = 584;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
kernLeft = r;
kernRight = r;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (181,0);
ref = caroncomb;
}
);
width = 627;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = r;
},
{
pos = (-101,0);
ref = caroncomb;
}
);
width = 584;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = s;
kernLeft = s;
kernRight = s;
lastChange = "2022-10-17 21:27:51 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = top;
pos = (332,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,41,l),
(243,4,o),
(306,-15,o),
(386,-15,cs),
(506,-15,o),
(609,36,o),
(609,124,cs),
(609,210,o),
(526,246,o),
(441,266,cs),
(312,297,ls),
(242,314,o),
(147,335,o),
(147,402,cs),
(147,451,o),
(191,481,o),
(290,481,cs),
(389,481,o),
(493,436,o),
(590,317,c),
(594,320,l),
(516,500,l),
(455,465,l),
(411,491,o),
(354,513,o),
(262,513,cs),
(143,513,o),
(70,460,o),
(70,391,cs),
(70,304,o),
(154,256,o),
(269,229,cs),
(400,198,ls),
(466,182,o),
(535,170,o),
(535,110,cs),
(535,50,o),
(458,15,o),
(377,15,cs),
(247,15,o),
(122,96,o),
(54,211,c),
(49,209,l),
(125,-4,l),
(124,-4,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
22 1 2 1 41 23 21 3 0 2 42 1 3 0 3 76 0 2 2 1 97 0 1 1 26 77 0 0 0 3 97 0 3 3 27 3 78 42 39 43 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (364,0);
},
{
name = top;
pos = (364,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(577,493,o),
(484,515,o),
(360,515,cs),
(177,515,o),
(55,457,o),
(55,350,cs),
(55,262,o),
(139,211,o),
(295,196,cs),
(432,183,ls),
(515,175,o),
(556,175,o),
(556,146,cs),
(556,104,o),
(457,100,o),
(377,100,cs),
(283,100,o),
(185,123,o),
(100,171,c),
(51,66,l),
(167,11,o),
(271,-15,o),
(388,-15,cs),
(589,-15,o),
(704,43,o),
(704,154,cs),
(704,249,o),
(612,286,o),
(452,301,cs),
(317,314,ls),
(277,318,o),
(208,317,o),
(208,359,cs),
(208,405,o),
(290,403,o),
(341,403,cs),
(397,403,o),
(514,394,o),
(627,355,c),
(669,453,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 0 37 1 4 5 18 1 2 1 19 1 3 2 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 0 37 1 1 5 18 1 2 1 19 1 3 2 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 2 4 1 103 0 5 5 0 97 0 0 0 26 77 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 103 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 103 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 5 2 5 1 2 128 0 0 0 5 1 0 5 105 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 51 37 35 52 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 767;
},
{
anchors = (
{
name = bottom;
pos = (332,0);
},
{
name = top;
pos = (332,500);
}
);
associatedMasterId = m01;
layerId = "70952336-B00B-451C-B1F7-E2886B5F0B10";
name = "11 feb 22, 17:14";
shapes = (
{
closed = 1;
nodes = (
(171,41,l),
(234.333,3.667,o),
(306,-15,o),
(386,-15,cs),
(520.667,-15,o),
(624,36,o),
(624,124,cs),
(624,221.333,o),
(502,270,o),
(322,294,cs),
(245,304,o),
(142,331,o),
(142,398,cs),
(142,447.333,o),
(194,481,o),
(290,481,cs),
(379.333,481,o),
(492.667,439.667,o),
(590,317,c),
(594,320,l),
(512,500,l),
(452,465,l),
(410.667,491.667,o),
(336,513,o),
(252,513,cs),
(121.333,513,o),
(63,456.333,o),
(63,387,cs),
(63,300.333,o),
(162,236,o),
(314,216,cs),
(394,205,o),
(544,191,o),
(544,110,cs),
(544,50,o),
(462.333,15,o),
(357,15,cs),
(239,15,o),
(107,96,o),
(45,211,c),
(40,209,l),
(116,-4,l),
(115,-4,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
22 1 2 1 41 23 21 3 0 2 42 1 3 0 3 76 0 2 2 1 97 0 1 1 26 77 0 0 0 3 97 0 3 3 27 3 78 42 39 43 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
anchors = (
{
name = bottom;
pos = (404,0);
},
{
name = top;
pos = (404,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "38A4D2C9-2FD5-4A2F-9D11-55C7D77466EF";
name = "21 feb 22, 12:07";
shapes = (
{
closed = 1;
nodes = (
(634,498,o),
(541,520,o),
(397,520,cs),
(203.667,520,o),
(82,458.667,o),
(82,352,cs),
(82,258.667,o),
(173.333,212.333,o),
(348,203,cs),
(465,197,ls),
(561,192.333,o),
(609,174.667,o),
(609,144,cs),
(609,94,o),
(469,94,o),
(419,94,cs),
(305,94,o),
(244,115,o),
(119,168,c),
(70,66,l),
(186,10.667,o),
(305.667,-17,o),
(429,-17,cs),
(637,-17,o),
(767,41.333,o),
(767,152,cs),
(767,246.667,o),
(675.333,298.333,o),
(492,307,cs),
(374,313,ls),
(334,315,o),
(232,316,o),
(232,358,cs),
(232,408,o),
(357,413,o),
(408,413,cs),
(452.667,413,o),
(492,410.167,o),
(526,404.5,cs),
(594,393.167,o),
(613.333,385.333,o),
(684,360,c),
(726,458,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 0 37 1 4 5 18 1 2 1 19 1 3 2 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
38 1 5 0 37 1 1 5 18 1 2 1 19 1 3 2 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 1 2 4 1 103 0 5 5 0 97 0 0 0 26 77 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 103 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 0 0 5 4 0 5 105 0 4 0 1 2 4 1 103 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 5 2 5 1 2 128 0 0 0 5 1 0 5 105 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 51 37 35 52 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
kernLeft = s;
kernRight = s;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (209,0);
ref = acutecomb;
}
);
width = 664;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = s;
},
{
pos = (229,0);
ref = acutecomb;
}
);
width = 767;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
kernLeft = s;
kernRight = s;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (164,0);
ref = caroncomb;
}
);
width = 664;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = s;
},
{
pos = (-24,0);
ref = caroncomb;
}
);
width = 767;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
kernLeft = s;
kernRight = s;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (215,0);
ref = cedillacomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
22 1 2 1 64 23 21 3 0 2 65 62 2 3 0 3 76 61 60 51 3 5 73 0 4 0 5 4 5 101 0 2 2 1 97 0 1 1 26 77 0 0 0 3 97 0 3 3 27 3 78 45 49 42 39 43 36 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = s;
},
{
pos = (129,0);
ref = cedillacomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
42 1 6 0 41 1 5 6 18 1 2 1 19 1 3 2 46 23 2 8 3 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
42 1 6 0 41 1 5 6 18 1 2 1 19 1 3 2 46 23 2 4 3 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
42 1 6 0 41 1 1 6 18 1 2 1 19 1 3 2 46 23 2 4 3 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 8 3 8 134 0 5 0 1 2 5 1 103 0 6 6 0 97 0 0 0 26 77 0 2 2 3 95 7 4 2 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 8 4 8 134 0 5 0 1 2 5 1 103 0 6 6 0 97 0 0 0 26 77 7 1 3 3 18 77 0 2 2 4 97 0 4 4 24 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 8 4 8 134 0 0 0 6 5 0 6 105 0 5 0 1 2 5 1 103 7 1 3 3 18 77 0 2 2 4 97 0 4 4 24 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
47 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
7 1 3 2 4 2 3 4 128 0 8 4 8 134 0 0 0 6 5 0 6 105 0 5 0 1 2 5 1 103 0 2 3 4 2 89 0 2 2 4 97 0 4 2 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 1 6 2 6 1 2 128 7 1 3 2 4 2 3 4 128 0 8 4 8 134 0 0 0 6 1 0 6 105 0 2 3 4 2 89 0 2 2 4 97 0 4 2 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
19 21 36 51 34 22 35 52 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = germandbls;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(395,41,l),
(448,3,o),
(472,-15,o),
(531,-15,cs),
(607,-15,o),
(689,35,o),
(689,122,cs),
(689,218,o),
(615,246,o),
(523,290,cs),
(453,324,o),
(393,352,o),
(393,396,cs),
(393,479,o),
(577,478,o),
(577,621,cs),
(577,688,o),
(515,764,o),
(378,764,cs),
(250,764,o),
(156,686,o),
(156,548,cs),
(156,72,l),
(42,6,l),
(42,1,l),
(236,1,l),
(236,548,ls),
(236,670,o),
(298,733,o),
(388,733,cs),
(463,733,o),
(495,689,o),
(495,635,cs),
(495,507,o),
(323,480,o),
(323,379,cs),
(323,305,o),
(388,277,o),
(469,236,cs),
(557,193,o),
(616,173,o),
(616,101,cs),
(616,50,o),
(578,14,o),
(523,14,cs),
(447,14,o),
(361,92,o),
(316,190,c),
(310,187,l),
(349,-4,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
44 20 2 5 1 63 45 43 33 4 0 5 64 1 6 3 3 76 0 2 2 4 97 0 4 4 19 77 0 5 5 1 97 0 1 1 26 77 0 3 3 21 77 0 0 0 6 97 0 6 6 27 6 78 42 41 38 20 37 43 36 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 726;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(562,214,ls),
(600,198,o),
(607,175,o),
(607,162,cs),
(607,131,o),
(583,110,o),
(543,110,cs),
(509,110,o),
(427,123,o),
(352,191,c),
(277,96,l),
(363,11,o),
(477,-15,o),
(564,-15,cs),
(665,-15,o),
(765,43,o),
(765,154,cs),
(765,251,o),
(674,301,o),
(642,315,cs),
(583,340,ls),
(533,361,o),
(497,372,o),
(497,393,cs),
(497,443,o),
(643,457,o),
(643,586,cs),
(643,702,o),
(507,764,o),
(354,764,cs),
(160,764,o),
(60,634,o),
(60,472,cs),
(60,0,l),
(225,0,l),
(222,462,ls),
(221,598,o),
(304,637,o),
(368,637,cs),
(414,637,o),
(475,620,o),
(475,567,cs),
(475,496,o),
(334,473,o),
(334,375,cs),
(334,310,o),
(405,280,o),
(446,263,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 0 1 1 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 0 1 0 5 1 103 0 2 2 4 97 0 4 4 19 77 0 0 0 3 97 7 6 2 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 0 1 0 5 1 103 0 2 2 4 97 0 4 4 19 77 0 3 3 18 77 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 6 0 3 6 128 0 4 0 2 5 4 2 105 0 5 0 1 0 5 1 103 0 0 3 6 0 89 0 0 0 6 97 7 1 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 35 0 34 21 35 19 35 36 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 780;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "C1E93F7A-30DB-4B4E-AEDE-26B44A4EFE67";
name = "21 feb 22, 14:49";
shapes = (
{
closed = 1;
nodes = (
(1041,-12,o),
(1186,73.333,o),
(1186,228,cs),
(1186,360,o),
(1076,431.667,o),
(856,443,c),
(925.333,468.333,o),
(961,514.333,o),
(961,573,cs),
(961,628.333,o),
(930.833,670.333,o),
(870.5,699,cs),
(810.167,727.667,o),
(721.667,742,o),
(605,742,cs),
(259.667,742,o),
(80,613,o),
(80,365,cs),
(80,0,l),
(250,0,l),
(250,344,ls),
(250,530.667,o),
(364.333,627,o),
(583,627,cs),
(727.667,627,o),
(800,600.333,o),
(800,547,cs),
(800,505,o),
(734,436.667,o),
(602,342,c),
(704,342,ls),
(818,342,o),
(903.5,333.167,o),
(960.5,315.5,cs),
(1017.5,297.833,o),
(1046,270.667,o),
(1046,234,cs),
(1046,197.333,o),
(1024,168.833,o),
(980,148.5,cs),
(936,128.167,o),
(872.333,118,o),
(789,118,cs),
(639.667,118,o),
(506,138.333,o),
(388,179,c),
(380,39,l),
(516,5,o),
(645.667,-12,o),
(769,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 0 1 1 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 5 0 1 0 5 1 103 0 2 2 4 97 0 4 4 19 77 0 0 0 3 97 7 6 2 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 0 1 0 5 1 103 0 2 2 4 97 0 4 4 19 77 0 3 3 18 77 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 6 0 3 6 128 0 4 0 2 5 4 2 105 0 5 0 1 0 5 1 103 0 0 3 6 0 89 0 0 0 6 97 7 1 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 35 0 34 21 35 19 35 36 35 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 1266;
},
{
associatedMasterId = m01;
layerId = "A18AB67A-FAB6-4495-9C38-FD33E1A30CEE";
name = "21 feb 22, 15:09";
shapes = (
{
closed = 1;
nodes = (
(392,41,l),
(450.667,3.667,o),
(517.333,-15,o),
(592,-15,cs),
(717.333,-15,o),
(814,36,o),
(814,124,cs),
(814,221.333,o),
(699.667,270,o),
(533,294,cs),
(467.667,303.333,o),
(423.333,317.833,o),
(400,337.5,cs),
(376.667,357.167,o),
(365,377.333,o),
(365,398,cs),
(365,447.333,o),
(413.667,481,o),
(503,481,cs),
(585.667,481,o),
(692.667,439.667,o),
(782,317,c),
(786,320,l),
(710,500,l),
(657,467,l),
(655,523,ls),
(655,623.085,o),
(553.012,700,o),
(396,700,cs),
(237.78,700,o),
(144,609.988,o),
(144,484,cs),
(144,65,l),
(30,4,l),
(30,0,l),
(224,0,l),
(224,484,ls),
(224,596.006,o),
(296.207,672,o),
(396,672,cs),
(510.961,672,o),
(585,605.57,o),
(585,520,cs),
(585,496,l),
(547.667,507.333,o),
(508.667,513,o),
(468,513,cs),
(345.333,513,o),
(291,456.333,o),
(291,387,cs),
(291,300.333,o),
(383.667,236,o),
(525,216,cs),
(619.667,202.667,o),
(672.333,191.667,o),
(711,165,cs),
(730.333,151.667,o),
(740,133.667,o),
(740,111,cs),
(740,49.667,o),
(665,15,o),
(565,15,cs),
(506.333,15,o),
(428.167,42.333,o),
(359.5,101,cs),
(325.167,130.333,o),
(297,167,o),
(275,211,c),
(270,209,l),
(341,-4,l),
(341,-4,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
44 20 2 5 1 63 45 43 33 4 0 5 64 1 6 3 3 76 0 2 2 4 97 0 4 4 19 77 0 5 5 1 97 0 1 1 26 77 0 3 3 21 77 0 0 0 6 97 0 6 6 27 6 78 42 41 38 20 37 43 36 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 844;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
kernLeft = t;
kernRight = t;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (272,0);
},
{
name = center;
pos = (272,250);
},
{
name = top;
pos = (264,497);
},
{
name = topright;
pos = (217,754);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,127,l),
(441,69,o),
(390,19,o),
(316,19,cs),
(218,19,o),
(163,89,o),
(163,213,cs),
(163,476,l),
(462,476,l),
(462,500,l),
(163,500,l),
(163,650,l),
(161,650,l),
(49,500,l),
(-30,500,l),
(-30,476,l),
(83,476,l),
(83,188,ls),
(83,54,o),
(174,-12,o),
(297,-12,cs),
(434,-12,o),
(483,89,o),
(503,112,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
11 1 2 74 0 6 1 5 1 6 5 128 4 1 1 1 2 95 3 1 2 2 20 77 0 5 5 0 97 0 0 0 27 0 78 19 35 17 19 17 19 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (333,0);
},
{
name = center;
pos = (299,250);
},
{
name = top;
pos = (299,500);
},
{
name = topright;
pos = (327,750);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(527,136,l),
(490,124,o),
(444,116,o),
(396,116,cs),
(316,116,o),
(286,150,o),
(286,233,cs),
(286,376,l),
(524,376,l),
(524,500,l),
(286,500,l),
(286,637,l),
(143,637,l),
(123,500,l),
(0,500,l),
(0,376,l),
(116,376,l),
(116,193,ls),
(116,51,o),
(198,-15,o),
(361,-15,cs),
(417,-15,o),
(478,-2,o),
(527,15,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 6 1 23 1 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 2 5 1 1 6 2 1 103 0 3 3 17 77 0 6 6 0 98 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 6 0 98 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 6 0 98 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 0 0 6 89 0 6 6 0 98 0 0 6 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
35 17 17 17 17 19 33 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 597;
},
{
anchors = (
{
name = bottom;
pos = (272,0);
},
{
name = center;
pos = (272,250);
},
{
name = top;
pos = (272,500);
},
{
name = topright;
pos = (523,700);
}
);
associatedMasterId = m01;
layerId = "263CFDEF-9AFC-445B-9F66-30C521E0B1F0";
name = "11 feb 22, 17:31";
shapes = (
{
closed = 1;
nodes = (
(487,179,l),
(487,75,o),
(413,15,o),
(315,15,cs),
(196.333,15,o),
(163,103.667,o),
(163,233,cs),
(163,476,l),
(485,476,l),
(485,500,l),
(163,500,l),
(171,650,l),
(169,650,l),
(49,500,l),
(-30,500,l),
(-30,476,l),
(83,476,l),
(83,218,ls),
(83,48.667,o),
(193,-12,o),
(313,-12,cs),
(455,-12,o),
(513,89,o),
(513,179,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
11 1 2 74 0 6 1 5 1 6 5 128 4 1 1 1 2 95 3 1 2 2 20 77 0 5 5 0 97 0 0 0 27 0 78 19 35 17 19 17 19 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (272,0);
},
{
name = center;
pos = (272,250);
},
{
name = top;
pos = (272,500);
},
{
name = topright;
pos = (523,700);
}
);
associatedMasterId = m01;
background = {
shapes = (
{
closed = 1;
nodes = (
(490,289,l),
(538,382,l),
(483,458,o),
(394,514,o),
(274,514,cs),
(102,514,o),
(-24,405,o),
(-24,251,cs),
(-24,86,o),
(117,-14,o),
(280,-14,cs),
(395,-14,o),
(486,35,o),
(541,115,c),
(523,130,l),
(471,66,o),
(391,27,o),
(303,27,cs),
(165,27,o),
(60,127,o),
(60,267,cs),
(60,388,o),
(138,486,o),
(271,486,cs),
(395,486,o),
(456,410,o),
(487,289,c)
);
}
);
};
layerId = "03DC17DB-BDE5-40EB-AC0D-F34D98D7BABB";
name = "11 feb 22, 17:31";
shapes = (
{
closed = 1;
nodes = (
(472,169,l),
(472,75,o),
(398,15,o),
(315,15,cs),
(217,15,o),
(163,89,o),
(163,223,cs),
(163,476,l),
(467,476,l),
(467,500,l),
(163,500,l),
(171,650,l),
(169,650,l),
(49,500,l),
(-30,500,l),
(-30,476,l),
(83,476,l),
(83,208,ls),
(83,66,o),
(164,-12,o),
(313,-12,cs),
(440,-12,o),
(498,89,o),
(498,169,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
11 1 2 74 0 6 1 5 1 6 5 128 4 1 1 1 2 95 3 1 2 2 20 77 0 5 5 0 97 0 0 0 27 0 78 19 35 17 19 17 19 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 543;
},
{
anchors = (
{
name = bottom;
pos = (371,-10);
},
{
name = center;
pos = (299,250);
},
{
name = top;
pos = (299,500);
},
{
name = topright;
pos = (341,730);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "534E3F82-C5B3-4178-B42A-2F99F75DC865";
name = "21 feb 22, 12:10";
shapes = (
{
closed = 1;
nodes = (
(557,136,l),
(520,124,o),
(454,116,o),
(406,116,cs),
(326,116,o),
(296,139.667,o),
(296,213,cs),
(296,376,l),
(554,376,l),
(554,500,l),
(296,500,l),
(296,637,l),
(153,637,l),
(133,500,l),
(0,500,l),
(0,376,l),
(126,376,l),
(126,193,ls),
(126,51,o),
(208,-15,o),
(371,-15,cs),
(427,-15,o),
(508,-2,o),
(557,15,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 6 1 23 1 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 2 5 1 1 6 2 1 103 0 3 3 17 77 0 6 6 0 98 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 6 0 98 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 6 0 98 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 3 133 4 1 2 5 1 1 6 2 1 103 0 6 0 0 6 89 0 6 6 0 98 0 0 6 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
35 17 17 17 17 19 33 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = t;
unicode = 116;
},
{
glyphname = tcaron;
kernLeft = t;
kernRight = t;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (197,54);
ref = caroncomb.alt;
}
);
width = 543;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = t;
},
{
pos = (297,20);
ref = caroncomb.alt;
}
);
width = 597;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = u;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (415,0);
},
{
name = ogonek;
pos = (730,0);
},
{
name = top;
pos = (385,500);
},
{
name = topright;
pos = (814,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(782,2,l),
(670,66,l),
(670,500,l),
(479,500,l),
(479,497,l),
(590,435,l),
(590,227,ls),
(590,104,o),
(509,14,o),
(385,14,cs),
(280,14,o),
(203,84,o),
(203,227,cs),
(203,500,l),
(13,500,l),
(13,498,l),
(123,443,l),
(123,227,ls),
(123,71,o),
(229,-13,o),
(371,-13,cs),
(471,-13,o),
(550,29,o),
(590,101,c),
(590,0,l),
(782,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
24 20 8 1 4 2 1 1 76 3 1 1 1 20 77 5 1 4 4 21 77 0 2 2 0 97 0 0 0 27 0 78 0 0 0 26 0 25 37 35 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 803;
},
{
anchors = (
{
name = bottom;
pos = (442,0);
},
{
name = ogonek;
pos = (795,10);
},
{
name = top;
pos = (442,500);
},
{
name = topright;
pos = (863,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(793,500,l),
(615,500,l),
(615,202,l),
(566,144,o),
(491,115,o),
(420,115,cs),
(313,115,o),
(248,176,o),
(248,284,cs),
(248,500,l),
(70,500,l),
(70,264,ls),
(70,72,o),
(191,-15,o),
(360,-15,cs),
(464,-15,o),
(550,22,o),
(615,93,c),
(615,0,l),
(793,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
16 1 2 1 1 1 0 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
16 1 2 1 1 1 4 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 20 77 0 2 2 0 97 5 4 2 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 20 77 5 1 4 4 18 77 0 2 2 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 18 77 0 2 2 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 4 0 2 89 3 1 1 5 1 4 0 1 4 103 0 2 2 0 97 0 0 2 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 20 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
},
{
anchors = (
{
name = bottom;
pos = (419,0);
},
{
name = ogonek;
pos = (754,10);
},
{
name = top;
pos = (419,500);
},
{
name = topright;
pos = (818,500);
}
);
associatedMasterId = m01;
layerId = "CC837CDD-68F3-421F-8BF5-73E6209BCC89";
name = "14 feb 22, 11:19";
shapes = (
{
closed = 1;
nodes = (
(788,2,l),
(676,66,l),
(676,500,l),
(485,500,l),
(485,497,l),
(596,435,l),
(596,227,ls),
(596,103.85,o),
(514.888,14,o),
(391,14,cs),
(272.333,14,o),
(195,84.333,o),
(195,227,cs),
(195,500,l),
(5,500,l),
(5,498,l),
(115,443,l),
(115,227,ls),
(115,71,o),
(221,-13,o),
(377,-13,cs),
(477,-13,o),
(556,29,o),
(596,101,c),
(596,0,l),
(788,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
24 20 8 1 4 2 1 1 76 3 1 1 1 20 77 5 1 4 4 21 77 0 2 2 0 97 0 0 0 27 0 78 0 0 0 26 0 25 37 35 36 35 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 838;
},
{
anchors = (
{
name = bottom;
pos = (442,0);
},
{
name = ogonek;
pos = (813,0);
},
{
name = top;
pos = (442,500);
},
{
name = topright;
pos = (863,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "8298D9C9-C297-477B-AFD6-4D966B51F380";
name = "21 feb 22, 12:11";
shapes = (
{
closed = 1;
nodes = (
(813,500,l),
(635,500,l),
(635,155,l),
(592.333,124.333,o),
(535.333,110,o),
(450,110,cs),
(312.667,110,o),
(258,161,o),
(258,289,cs),
(258,500,l),
(80,500,l),
(80,289,ls),
(80,100.367,o),
(203.56,-20,o),
(414,-20,cs),
(500,-20,o),
(573.667,4,o),
(635,52,c),
(635,0,l),
(813,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
16 1 2 1 1 1 0 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
16 1 2 1 1 1 4 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 20 77 0 2 2 0 97 5 4 2 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 20 77 5 1 4 4 18 77 0 2 2 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 18 77 0 2 2 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 4 0 2 89 3 1 1 5 1 4 0 1 4 103 0 2 2 0 97 0 0 2 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 20 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 883;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (262,0);
ref = acutecomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (307,0);
ref = acutecomb;
}
);
width = 883;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (217,0);
ref = circumflexcomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (54,0);
ref = circumflexcomb;
}
);
width = 883;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (203,0);
ref = dieresiscomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (188,0);
ref = dieresiscomb;
}
);
width = 883;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (222,0);
ref = gravecomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (172,0);
ref = gravecomb;
}
);
width = 883;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (184,0);
ref = hungarumlautcomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (142,0);
ref = hungarumlautcomb;
}
);
width = 883;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (206,0);
ref = macroncomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (116,0);
ref = macroncomb;
}
);
width = 883;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (525,0);
ref = ogonekcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
42 38 26 19 4 5 4 7 6 2 0 3 2 76 0 0 0 1 0 1 101 6 1 4 4 20 77 8 7 2 2 2 21 77 0 5 5 3 97 0 3 3 27 3 78 0 0 0 44 0 43 37 35 36 35 21 37 35 9 7 29 
CALL[ ]	/* CallFunction */";
};
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
alignment = -1;
pos = (416,15);
ref = ogonekcomb;
scale = (0.9923,1);
}
);
width = 883;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
kernLeft = u;
kernRight = u;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
pos = (251,0);
ref = ringcomb;
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
pos = (183,0);
ref = ringcomb;
}
);
width = 883;
}
);
note = uring;
unicode = 367;
},
{
glyphname = v;
kernLeft = v;
kernRight = v;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,441,l),
(729,498,l),
(729,500,l),
(487,500,l),
(487,498,l),
(564,441,l),
(358,43,l),
(376,20,l)
);
},
{
closed = 1;
nodes = (
(232,498,l),
(232,500,l),
(-53,500,l),
(-53,498,l),
(70,438,l),
(330,-8,l),
(423,-8,l),
(161,438,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
15 14 13 7 4 1 0 1 76 2 1 0 0 20 77 0 1 1 21 1 78 35 19 32 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 701;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(401,141,l),
(589,500,l),
(779,500,l),
(496,0,l),
(306,0,l),
(12,500,l),
(202,500,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 20 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 0 1 133 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 797;
},
{
associatedMasterId = m01;
layerId = "3D7F3C0F-0802-4AEF-B022-DBF1734B4222";
name = "11 feb 22, 17:34";
shapes = (
{
closed = 1;
nodes = (
(387,63,l),
(606,441,l),
(529,498,l),
(529,500,l),
(771,500,l),
(771,498,l),
(634,441,l),
(405,40,l)
);
},
{
closed = 1;
nodes = (
(442,-8,l),
(349,-8,l),
(63,438,l),
(-60,498,l),
(-60,500,l),
(225,500,l),
(225,498,l),
(154,438,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
15 14 13 7 4 1 0 1 76 2 1 0 0 20 77 0 1 1 21 1 78 35 19 32 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 711;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "BC6B4BF5-5BC2-4FCA-8D32-1BE0E363D445";
name = "21 feb 22, 12:12";
shapes = (
{
closed = 1;
nodes = (
(409,141,l),
(617,500,l),
(807,500,l),
(504,0,l),
(314,0,l),
(0,500,l),
(190,500,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 20 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 0 1 133 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 6 0 6 17 17 4 7 24 
CALL[ ]	/* CallFunction */";
};
width = 807;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
kernLeft = v;
kernRight = w;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,438,l),
(354,73,l),
(165,438,l),
(276,498,l),
(276,500,l),
(-49,499,l),
(-49,500,l),
(78,438,l),
(307,-8,l),
(399,-8,l),
(370,46,l),
(538,432,l)
);
},
{
closed = 1;
nodes = (
(779,-8,l),
(752,44,l),
(919,435,l),
(1052,498,l),
(1052,500,l),
(810,500,l),
(810,498,l),
(893,435,l),
(735,72,l),
(565,438,l),
(636,498,l),
(636,500,l),
(351,500,l),
(351,498,l),
(478,438,l),
(687,-8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
26 25 23 22 16 15 14 8 5 4 10 0 2 1 76 4 3 2 2 2 20 77 1 1 0 0 21 0 78 40 37 35 19 18 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1021;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(-18,500,l),
(226,0,l),
(416,0,l),
(567,366,l),
(726,0,l),
(916,0,l),
(1139,500,l),
(953,500,l),
(815,161,l),
(662,500,l),
(469,500,l),
(327,161,l),
(168,500,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 20 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
18 17 16 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 1140;
},
{
associatedMasterId = m01;
layerId = "8C80C38C-6902-443A-8794-385A76B65A05";
name = "11 feb 22, 17:34";
shapes = (
{
closed = 1;
nodes = (
(370,46,l),
(399,-8,l),
(307,-8,l),
(77,438,l),
(-50,500,l),
(-50,499,l),
(275,500,l),
(275,498,l),
(164,438,l),
(354,73,l),
(511,438,l),
(537,432,l)
);
},
{
closed = 1;
nodes = (
(477,438,l),
(350,498,l),
(350,500,l),
(635,500,l),
(635,498,l),
(564,438,l),
(735,72,l),
(892,435,l),
(809,498,l),
(809,500,l),
(1051,500,l),
(1051,498,l),
(918,435,l),
(752,44,l),
(779,-8,l),
(687,-8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
26 25 23 22 16 15 14 8 5 4 10 0 2 1 76 4 3 2 2 2 20 77 1 1 0 0 21 0 78 40 37 35 19 18 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 1021;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
kernLeft = x;
kernRight = x;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(656,0,l),
(656,2,l),
(549,55,l),
(168,446,l),
(239,498,l),
(239,500,l),
(-59,500,l),
(-59,498,l),
(65,446,l),
(452,55,l),
(451,55,l),
(363,2,l),
(363,0,l)
);
},
{
closed = 1;
nodes = (
(475,446,l),
(97,55,l),
(-18,3,l),
(-18,1,l),
(231,1,l),
(231,3,l),
(134,55,l),
(510,446,l),
(629,498,l),
(629,500,l),
(378,500,l),
(378,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 81 values pushed */
18 15 8 1 4 3 2 1 76 14 1 2 2 1 3 2 75 0 7 1 7 133 6 1 2 1 3 1 2 3 128 4 8 2 3 0 1 3 0 126 9 1 5 0 5 134 0 1 1 20 77 0 0 0 21 0 78 20 20 0 0 30 28 27 26 20 25 20 24 23 22 0 19 0 19 20 37 35 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 625;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(467,245,l),
(730,500,l),
(528,500,l),
(356,327,l)
);
},
{
closed = 1;
nodes = (
(295,267,l),
(18,0,l),
(219,0,l),
(408,184,l)
);
},
{
closed = 1;
nodes = (
(225,500,l),
(16,500,l),
(525,0,l),
(736,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
11 8 5 2 4 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 20 77 3 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 2 95 3 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
1 1 0 2 2 0 87 1 1 0 0 2 95 3 1 2 0 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "7E809083-84F1-4BB6-8077-0801F832A662";
name = "21 feb 22, 12:15";
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(211,0,l),
(393,173,l),
(575,0,l),
(786,0,l),
(501,256,l),
(772,500,l),
(563,500,l),
(393,338,l),
(223,500,l),
(14,500,l),
(285,256,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
11 8 5 2 4 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 20 77 3 1 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
1 1 0 0 2 95 3 1 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
1 1 0 2 2 0 87 1 1 0 0 2 95 3 1 2 0 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
kernLeft = y;
kernRight = y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,0,l),
(132,438,l),
(233,496,l),
(233,500,l),
(-83,500,l),
(-83,496,l),
(40,438,l),
(318,0,l)
);
},
{
closed = 1;
nodes = (
(688,496,l),
(688,500,l),
(426,500,l),
(426,496,l),
(523,441,l),
(273,-47,ls),
(231,-129,o),
(199,-190,o),
(137,-190,cs),
(82,-190,o),
(43,-164,o),
(14,-97,c),
(10,-97,l),
(-42,-159,l),
(-9,-218,o),
(55,-250,o),
(106,-250,cs),
(209,-250,o),
(240,-182,o),
(314,-38,cs),
(559,441,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
35 34 29 23 5 5 3 0 14 12 2 1 3 2 76 4 1 0 0 20 77 5 1 3 3 21 77 0 1 1 2 97 0 2 2 22 2 78 20 35 19 38 38 32 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 701;
},
{
anchors = (
{
name = bottom;
pos = (398,0);
},
{
name = top;
pos = (398,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(184,500,l),
(10,500,l),
(13,495,l),
(322,-13,l),
(402,131,l)
);
},
{
closed = 1;
nodes = (
(280,-60,o),
(250,-118,o),
(177,-118,cs),
(161,-118,o),
(139,-113,o),
(116,-101,c),
(78,-222,l),
(109,-240,o),
(151,-250,o),
(192,-250,cs),
(306,-250,o),
(376,-189,o),
(440,-67,cs),
(735,500,l),
(572,500,l),
(322,20,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 13 9 3 3 1 19 1 0 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 1 1 20 77 0 3 3 0 98 0 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 1 3 1 133 0 3 3 0 98 0 0 0 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
2 1 1 3 1 133 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 19 35 32 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 795;
},
{
anchors = (
{
name = bottom;
pos = (351,0);
},
{
name = top;
pos = (351,500);
}
);
associatedMasterId = m01;
layerId = "12BCDB70-CF8B-4268-AC6E-14EAE2E337B0";
name = "11 feb 22, 17:37";
shapes = (
{
closed = 1;
nodes = (
(63,438,l),
(-60,496,l),
(-60,500,l),
(256,500,l),
(256,496,l),
(155,438,l),
(383,56,l),
(416,0,l),
(342,0,l)
);
},
{
closed = 1;
nodes = (
(354,-8,ls),
(270,-145,o),
(215,-200,o),
(122,-200,cs),
(54,-200,o),
(1,-168,o),
(-32,-109,c),
(13,-27,l),
(17,-27,l),
(56,-104,o),
(95,-136,o),
(160,-136,cs),
(219,-136,o),
(267,-95,o),
(313,-17,cs),
(586,441,l),
(489,496,l),
(489,500,l),
(751,500,l),
(751,496,l),
(622,441,l),
(396,61,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
35 34 29 23 5 5 3 0 14 12 2 1 3 2 76 4 1 0 0 20 77 5 1 3 3 21 77 0 1 1 2 97 0 2 2 22 2 78 20 35 19 38 38 32 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 701;
},
{
anchors = (
{
name = bottom;
pos = (398,0);
},
{
name = top;
pos = (398,500);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "6C820730-CD4E-49BE-8A42-2AFC26BDF72C";
name = "21 feb 22, 12:16";
shapes = (
{
closed = 1;
nodes = (
(123,-85,l),
(143,-95,o),
(164.667,-100,o),
(188,-100,cs),
(253.333,-100,o),
(305,-53.667,o),
(305,1,c),
(3,495,l),
(0,500,l),
(180,500,l),
(396,141,l),
(612,495,l),
(615,500,l),
(795,500,l),
(792,495,l),
(454,-49,ls),
(382,-166.333,o),
(280,-232,o),
(176,-232,cs),
(144.667,-232,o),
(113.333,-226,o),
(82,-214,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
18 13 9 3 3 1 19 1 0 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 1 1 20 77 0 3 3 0 98 0 0 0 22 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 1 3 1 133 0 3 3 0 98 0 0 0 22 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
2 1 1 3 1 133 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 19 35 32 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 795;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
kernLeft = y;
kernRight = y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (228,0);
ref = acutecomb;
}
);
width = 701;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = y;
},
{
pos = (263,0);
ref = acutecomb;
}
);
width = 795;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
kernLeft = y;
kernRight = y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (183,0);
ref = circumflexcomb;
}
);
width = 701;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = y;
},
{
pos = (10,0);
ref = circumflexcomb;
}
);
width = 795;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
kernLeft = y;
kernRight = y;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = y;
},
{
pos = (169,0);
ref = dieresiscomb;
}
);
width = 701;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = y;
},
{
pos = (144,0);
ref = dieresiscomb;
}
);
width = 795;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = z;
kernLeft = z;
kernRight = z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (356,0);
},
{
name = center;
pos = (356,250);
},
{
name = top;
pos = (354,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(50,14,l),
(509,473,l),
(199,473,l),
(33,347,l),
(29,347,l),
(139,535,l),
(142,535,l),
(199,500,l),
(620,500,l),
(620,480,l),
(169,28,l),
(497,28,l),
(660,153,l),
(664,153,l),
(555,-35,l),
(551,-35,l),
(497,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 2 1 11 2 2 0 2 15 1 3 0 3 76 9 1 1 74 0 2 2 1 95 0 1 1 20 77 0 0 0 3 95 0 3 3 21 3 78 18 21 18 20 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 702;
},
{
anchors = (
{
name = bottom;
pos = (388,0);
},
{
name = center;
pos = (388,250);
},
{
name = top;
pos = (388,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(706,117,l),
(300,117,l),
(699,402,l),
(699,500,l),
(60,500,l),
(60,383,l),
(463,383,l),
(67,98,l),
(67,0,l),
(706,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
6 1 0 1 1 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 0 1 1 20 77 0 2 2 3 95 4 1 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 0 2 1 0 103 0 2 2 3 95 4 1 3 3 18 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 1 0 0 2 1 0 103 0 2 3 3 2 87 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 9 0 9 18 17 18 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 776;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
kernLeft = z;
kernRight = z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (231,0);
ref = acutecomb;
}
);
width = 702;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = z;
},
{
pos = (253,0);
ref = acutecomb;
}
);
width = 776;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
kernLeft = z;
kernRight = z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (186,0);
ref = caroncomb;
}
);
width = 702;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = z;
},
{
ref = caroncomb;
}
);
width = 776;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
kernLeft = z;
kernRight = z;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = z;
},
{
pos = (254,0);
ref = dotaccentcomb;
}
);
width = 702;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = z;
},
{
pos = (249,0);
ref = dotaccentcomb;
}
);
width = 776;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = f_i;
lastChange = "2022-10-30 11:34:18 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = f;
},
{
pos = (545,0);
ref = i;
},
{
pos = (914,0);
ref = fi;
}
);
width = 1764;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = fi;
}
);
width = 842;
}
);
metricLeft = f;
metricRight = i;
},
{
glyphname = f_l;
lastChange = "2022-10-30 11:34:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = f;
},
{
pos = (545,0);
ref = l;
},
{
pos = (919,0);
ref = fl;
}
);
width = 1763;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = fl;
}
);
width = 850;
}
);
metricLeft = f;
metricRight = l;
},
{
glyphname = ordfeminine;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,535,l),
(203,535,ls),
(115,535,o),
(0,516,o),
(0,425,cs),
(0,364,o),
(54,323,o),
(149,323,cs),
(209,323,o),
(290,350,o),
(345,411,c),
(345,440,l),
(286,381,o),
(215,353,o),
(161,353,cs),
(101,353,o),
(66,373,o),
(66,429,cs),
(66,502,o),
(149,511,o),
(234,511,cs),
(347,511,l)
);
},
{
closed = 1;
nodes = (
(340,334,l),
(481,334,l),
(481,335,l),
(400,381,l),
(400,544,ls),
(400,653,o),
(328,715,o),
(209,715,cs),
(124,715,o),
(51,679,o),
(0,617,c),
(43,560,l),
(44,560,l),
(82,649,o),
(135,694,o),
(210,694,cs),
(288,694,o),
(340,646,o),
(340,563,cs)
);
}
);
width = 456;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = a;
}
);
width = 825;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (366,0);
},
{
name = center;
pos = (366,250);
},
{
name = ogonek;
pos = (654,10);
},
{
name = top;
pos = (366,500);
},
{
name = topright;
pos = (706,500);
}
);
guides = (
{
pos = (285,285);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,326,o),
(510,412,o),
(510,521,cs),
(510,642,o),
(396,715,o),
(285,715,cs),
(171,715,o),
(58,639,o),
(58,521,cs),
(58,399,o),
(177,326,o),
(285,326,cs)
);
},
{
closed = 1;
nodes = (
(122,623,o),
(190,691,o),
(285,691,cs),
(379,691,o),
(446,623,o),
(446,521,cs),
(446,417,o),
(376,352,o),
(285,352,cs),
(190,352,o),
(122,418,o),
(122,521,cs)
);
}
);
width = 568;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = o;
}
);
width = 840;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = zero;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(583,-14,o),
(740,140,o),
(740,335,cs),
(740,550,o),
(588,700,o),
(389,700,cs),
(195,700,o),
(40,550,o),
(40,335,cs),
(40,140,o),
(188,-14,o),
(388,-14,cs)
);
},
{
closed = 1;
nodes = (
(592,582,l),
(171,131,l),
(189,100,l),
(610,552,l)
);
},
{
closed = 1;
nodes = (
(631,544,o),
(631,335,cs),
(631,142,o),
(581,14,o),
(391,14,cs),
(198,14,o),
(149,142,o),
(149,335,cs),
(149,544,o),
(215,672,o),
(390,672,cs),
(581,672,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
35 34 18 17 4 3 2 1 76 0 2 2 0 97 0 0 0 17 77 0 3 3 1 97 4 1 1 1 27 1 78 0 0 29 27 22 20 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 780;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(783,-15,o),
(955,127,o),
(955,353,cs),
(955,575,o),
(783,715,o),
(508,715,cs),
(239,715,o),
(70,575,o),
(70,353,cs),
(70,127,o),
(239,-15,o),
(508,-15,cs)
);
},
{
closed = 1;
nodes = (
(245,495,o),
(339,575,o),
(508,575,cs),
(683,575,o),
(780,497,o),
(780,355,cs),
(780,206,o),
(683,125,o),
(508,125,cs),
(339,125,o),
(245,205,o),
(245,350,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 23 77 0 2 2 1 97 4 1 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 19 77 0 2 2 1 97 4 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 4 1 1 2 1 101 0 3 3 0 97 0 0 0 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 25 23 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1015;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "7E540652-2904-4AA3-A95E-8826DA52B605";
name = "21 feb 22, 15:04";
shapes = (
{
closed = 1;
nodes = (
(726,-20,o),
(875,44,o),
(955,157,cs),
(995,213,o),
(1015,279,o),
(1015,354,cs),
(1015,579,o),
(825,720,o),
(545,720,cs),
(265,720,o),
(75,579,o),
(75,354,cs),
(75,203,o),
(159,87,o),
(302,26,cs),
(373,-5,o),
(454,-20,o),
(545,-20,cs)
);
},
{
closed = 1;
nodes = (
(255,499,o),
(357,570,o),
(545,570,cs),
(733,570,o),
(835,499,o),
(835,354,cs),
(835,203,o),
(733,130,o),
(545,130,cs),
(357,130,o),
(255,203,o),
(255,354,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 23 77 0 2 2 1 97 4 1 1 1 27 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 97 0 0 0 19 77 0 2 2 1 97 4 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 4 1 1 2 1 101 0 3 3 0 97 0 0 0 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 25 23 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1090;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(494,0,l),
(494,2,l),
(336,71,l),
(331,705,l),
(306,705,l),
(57,542,l),
(62,533,l),
(256,603,l),
(256,71,l),
(98,1,l),
(98,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
18 11 1 3 2 0 1 76 0 0 1 2 1 0 2 128 0 1 1 17 77 0 2 2 21 2 78 34 25 37 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 504;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(339,0,l),
(514,0,l),
(514,700,l),
(372,700,l),
(283,621,o),
(178,566,o),
(55,551,c),
(55,400,l),
(178,419,o),
(272,465,o),
(339,522,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 3 2 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 17 77 0 1 1 18 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 18 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 22 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 594;
},
{
associatedMasterId = m01;
layerId = "4E40A873-3B07-40AC-AE5D-5E3D7015ADD9";
name = "15 feb 22, 22:00";
shapes = (
{
closed = 1;
nodes = (
(474,0,l),
(474,2,l),
(336,71,l),
(331,665,l),
(306,665,l),
(233,567,o),
(163,521,o),
(47,482,c),
(57,461,l),
(74,466,o),
(184,503,o),
(214,503,cs),
(257,503,o),
(256,480,o),
(256,415,cs),
(256,71,l),
(98,1,l),
(98,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
18 11 1 3 2 0 1 76 0 0 1 2 1 0 2 128 0 1 1 17 77 0 2 2 21 2 78 34 25 37 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,705,o),
(659,637,o),
(659,526,cs),
(659,361,o),
(501,307,o),
(369,261,cs),
(221,209,o),
(165,139,o),
(161,78,c),
(547,80,l),
(695,220,l),
(697,220,l),
(604,-34,l),
(579,0,l),
(107,0,l),
(107,175,o),
(225,247,o),
(373,299,cs),
(513,348,o),
(559,429,o),
(559,526,cs),
(559,610,o),
(493,677,o),
(384,677,cs),
(242,677,o),
(173,560,o),
(171,441,c),
(169,441,l),
(82,515,l),
(137,640,o),
(246,705,o),
(393,705,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
21 3 2 3 2 0 1 76 20 1 1 73 0 0 0 3 97 4 1 3 3 17 77 0 2 2 1 95 0 1 1 21 1 78 0 0 0 35 0 34 20 25 39 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(828,0,l),
(828,135,l),
(269,135,l),
(269,199,o),
(361,210,o),
(469,242,cs),
(627,288,o),
(820,314,o),
(820,505,cs),
(820,641,o),
(684,719,o),
(453,719,cs),
(332,719,o),
(208,686,o),
(99,640,c),
(104,494,l),
(199,549,o),
(320,587,o),
(447,587,cs),
(555,587,o),
(640,564,o),
(640,502,cs),
(640,441,o),
(573,413,o),
(450,378,cs),
(313,339,o),
(70,300,o),
(70,40,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 0 1 13 1 2 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 1 97 0 1 1 23 77 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 1 97 0 1 1 19 77 0 2 2 3 95 0 3 3 18 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 0 3 2 3 99 0 0 0 1 97 0 1 1 19 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 0 2 1 0 105 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 25 35 42 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 908;
},
{
associatedMasterId = m01;
layerId = "5771EC56-0319-4513-8ECB-4018ADE2D715";
name = "11 feb 22, 19:36";
shapes = (
{
closed = 1;
nodes = (
(556,670,o),
(655,601.667,o),
(655,491,cs),
(655,339,o),
(497,299,o),
(369,254,cs),
(221,202,o),
(151,139.333,o),
(147,78,c),
(557,80,l),
(711,200,l),
(713,200,l),
(580,-34,l),
(555,0,l),
(100,0,l),
(100,93.333,o),
(130.333,155.667,o),
(209,209,cs),
(248.333,235.667,o),
(303,261.667,o),
(373,287,cs),
(509,336.333,o),
(555,393.667,o),
(555,491,cs),
(555,575,o),
(500.333,642,o),
(391,642,cs),
(304.333,642,o),
(239.833,592,o),
(208.5,520,cs),
(192.833,484,o),
(184.667,446,o),
(184,406,c),
(182,406,l),
(105,480,l),
(159.667,605.333,o),
(260,670,o),
(404,670,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
21 3 2 3 2 0 1 76 20 1 1 73 0 0 0 3 97 4 1 3 3 17 77 0 2 2 1 95 0 1 1 21 1 78 0 0 0 35 0 34 20 25 39 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 784;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,-15,o),
(627,67,o),
(627,189,cs),
(627,328,o),
(521,387,o),
(401,386,c),
(516,413,o),
(576,477,o),
(576,557,cs),
(576,666,o),
(471,715,o),
(343,715,cs),
(184,715,o),
(99,626,o),
(64,548,c),
(147,475,l),
(149,475,l),
(156,601,o),
(229,688,o),
(344,688,cs),
(429,688,o),
(486,642,o),
(486,567,cs),
(486,467,o),
(398,402,o),
(203,363,c),
(210,331,l),
(288,349,o),
(333,356,o),
(372,356,cs),
(466,356,o),
(527,288,o),
(527,192,cs),
(527,75,o),
(450,11,o),
(344,11,cs),
(207,11,o),
(143,118,o),
(138,225,c),
(136,225,l),
(54,146,l),
(98,41,o),
(225,-15,o),
(344,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
34 32 2 4 2 43 1 1 4 19 4 3 3 0 1 3 76 0 4 0 1 0 4 1 105 0 2 2 3 97 0 3 3 17 77 0 0 0 5 97 6 1 5 5 27 5 78 0 0 0 52 0 51 38 41 41 36 40 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(652,-15,o),
(814,75,o),
(814,197,cs),
(814,290,o),
(770,345,o),
(656,368,c),
(763,404,o),
(787,455,o),
(787,511,cs),
(787,649,o),
(635,715,o),
(412,715,cs),
(269,715,o),
(139,674,o),
(60,641,c),
(83,512,l),
(174,545,o),
(283,573,o),
(431,573,cs),
(572,573,o),
(627,548,o),
(627,499,cs),
(627,441,o),
(558,425,o),
(410,425,cs),
(265,425,l),
(265,296,l),
(410,296,ls),
(565,296,o),
(634,289,o),
(634,214,cs),
(634,154,o),
(558,124,o),
(416,124,cs),
(261,124,o),
(172,147,o),
(93,186,c),
(60,54,l),
(160,7,o),
(262,-15,o),
(395,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
23 1 3 4 22 1 2 3 32 1 1 2 2 1 0 1 1 1 5 0 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 97 0 4 4 23 77 0 0 0 5 97 6 1 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 0 2 1 103 0 3 3 4 97 0 4 4 19 77 0 0 0 5 97 6 1 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 0 1 0 2 1 103 0 0 6 1 5 0 5 101 0 3 3 4 97 0 4 4 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 0 3 2 4 3 105 0 2 0 1 0 2 1 103 0 0 5 5 0 89 0 0 0 5 97 6 1 5 0 5 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 39 0 38 36 36 33 36 36 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 884;
},
{
associatedMasterId = m01;
layerId = "3C0D6F9A-E45F-4EED-9825-B41A6611CFEA";
name = "11 feb 22, 19:37";
shapes = (
{
closed = 1;
nodes = (
(514.445,-14,o),
(638,62.979,o),
(638,191,cs),
(638,326,o),
(522,369,o),
(401,358,c),
(519.667,395.333,o),
(580,447.667,o),
(580,525,cs),
(580,615.667,o),
(491,670,o),
(363,670,cs),
(193.667,670,o),
(98.667,595.333,o),
(64,498,c),
(147,425,l),
(149,425,l),
(126,541,o),
(229,646,o),
(363,646,cs),
(447,646,o),
(490,604.667,o),
(490,538,cs),
(490,444.667,o),
(397.667,380.667,o),
(203,326,c),
(211,300,l),
(302.667,331.333,o),
(332.667,341,o),
(382,341,cs),
(483.333,341,o),
(538,288,o),
(538,188,cs),
(538,74.667,o),
(460,10,o),
(344,10,cs),
(187,10,o),
(129,118,o),
(129,225,c),
(127,225,l),
(45,146,l),
(89,31,o),
(219,-14,o),
(344,-14,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
34 32 2 4 2 43 1 1 4 19 4 3 3 0 1 3 76 0 4 0 1 0 4 1 105 0 2 2 3 97 0 3 3 17 77 0 0 0 5 97 6 1 5 5 27 5 78 0 0 0 52 0 51 38 41 41 36 40 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 682;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(659,191,l),
(659,223,l),
(58,223,l),
(74,215,l),
(194,263,o),
(364,435,o),
(479,620,c),
(348,715,l),
(355,491,o),
(227,318,o),
(29,221,c),
(29,191,l)
);
},
{
closed = 1;
nodes = (
(414,67,l),
(288,3,l),
(288,0,l),
(625,0,l),
(625,3,l),
(499,67,l),
(499,433,l),
(414,383,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
15 1 1 0 12 7 2 2 1 2 76 25 21 20 3 0 5 0 74 4 1 0 3 1 1 2 0 1 103 0 2 2 21 2 78 25 19 34 19 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 726;
},
{
background = {
shapes = (
{
closed = 1;
nodes = (
(541,0,l),
(541,518,l),
(254,283,l),
(883,283,l),
(883,158,l),
(15,158,l),
(15,274,l),
(552,700,l),
(711,700,l),
(711,0,l)
);
}
);
};
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(711,158,l),
(883,158,l),
(883,283,l),
(711,283,l),
(711,700,l),
(552,700,l),
(15,274,l),
(15,158,l),
(541,158,l),
(541,0,l),
(711,0,l)
);
},
{
closed = 1;
nodes = (
(541,518,l),
(541,283,l),
(254,283,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 0 1 3 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 1 17 77 0 4 4 18 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 4 18 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 1 87 2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 1 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 19 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 913;
},
{
associatedMasterId = m01;
layerId = "024E96B2-E064-43E2-BB11-788937D7BB4A";
name = "17 feb 22, 12:04";
shapes = (
{
closed = 1;
nodes = (
(659,179,l),
(686,331,l),
(684,333,l),
(560,209,l),
(58,209,l),
(68,201,l),
(208,249,o),
(338,376,o),
(489,606,c),
(348,701,l),
(365,477,o),
(247,304,o),
(29,207,c),
(29,179,l)
);
},
{
closed = 1;
nodes = (
(414,67,l),
(288,3,l),
(288,0,l),
(625,0,l),
(625,3,l),
(499,67,l),
(499,429,l),
(414,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
15 1 1 0 12 7 2 2 1 2 76 25 21 20 3 0 5 0 74 4 1 0 3 1 1 2 0 1 103 0 2 2 21 2 78 25 19 34 19 17 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 726;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "B269CE5D-978B-4227-921F-341BF93DB4AE";
name = "9 apr 22, 12:06";
shapes = (
{
closed = 1;
nodes = (
(541,0,l),
(541,518,l),
(254,283,l),
(883,283,l),
(883,158,l),
(15,158,l),
(15,274,l),
(552,700,l),
(711,700,l),
(711,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
2 1 0 1 3 1 3 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 1 17 77 0 4 4 18 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 4 18 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 1 87 2 1 0 5 1 3 4 0 3 103 0 1 1 4 95 0 4 1 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 19 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 913;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,-14,o),
(646,76,o),
(646,219,cs),
(646,377,o),
(541,449,o),
(385,449,cs),
(260,449,o),
(197,404,o),
(122,338,c),
(136,330,l),
(188,624,l),
(519,624,l),
(537,573,l),
(538,573,l),
(645,739,l),
(533,700,l),
(165,700,l),
(101,321,l),
(135,313,l),
(216,382,o),
(278,412,o),
(367,412,cs),
(463,412,o),
(546,367,o),
(546,217,cs),
(546,93,o),
(470,11,o),
(354,11,cs),
(243,11,o),
(174,76,o),
(147,203,c),
(63,124,l),
(118,49,o),
(222,-14,o),
(355,-14,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
20 1 4 3 24 16 3 2 4 0 1 2 76 19 1 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 1 0 4 1 105 0 3 3 2 95 0 2 2 17 77 0 0 0 5 97 6 1 5 5 27 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 3 4 2 3 103 0 4 0 1 0 4 1 105 0 0 0 5 97 6 1 5 5 27 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 34 0 33 35 20 20 36 37 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 708;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(610,-15,o),
(861,50,o),
(861,246,cs),
(861,384,o),
(703,488,o),
(521,488,cs),
(401,488,o),
(313,467,o),
(232,401,c),
(232,562,l),
(778,562,l),
(778,700,l),
(82,700,l),
(82,262,l),
(221,262,l),
(296,324,o),
(379,349,o),
(483,349,cs),
(599,349,o),
(681,316,o),
(681,247,cs),
(681,140,o),
(540,125,o),
(433,125,cs),
(334,125,o),
(200,157,o),
(84,201,c),
(77,58,l),
(189,17,o),
(305,-15,o),
(452,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 1 5 3 1 0 2 2 1 6 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 4 4 3 95 0 3 3 17 77 0 1 1 5 97 0 5 5 20 77 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 1 0 1 2 0 128 0 3 0 4 5 3 4 103 0 5 0 1 2 5 1 105 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 3 0 4 5 3 4 103 0 5 0 1 2 5 1 105 0 0 6 6 0 89 0 0 0 6 97 7 1 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 32 0 31 35 17 17 18 36 37 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 916;
},
{
associatedMasterId = m01;
layerId = "42DF9A15-CC1D-493C-8523-059A3BE86795";
name = "11 feb 22, 19:38";
shapes = (
{
closed = 1;
nodes = (
(538.333,-14,o),
(653,73.667,o),
(653,219,cs),
(653,346.862,o),
(543.668,430,o),
(381,430,cs),
(275.667,430,o),
(200.667,395.667,o),
(122,333,c),
(181,593,l),
(522,574,l),
(537,533,l),
(539,523,l),
(658,699,l),
(536,650,l),
(172,660,l),
(88,307,l),
(122,299,l),
(203.333,368.333,o),
(282.333,406,o),
(365,406,cs),
(479.667,406,o),
(553,336.667,o),
(553,214,cs),
(553,92.667,o),
(482.667,16,o),
(344,16,cs),
(220,16,o),
(150.667,73.667,o),
(124,203,c),
(40,124,l),
(94.667,38.667,o),
(209,-14,o),
(345,-14,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
20 1 4 3 24 16 3 2 4 0 1 2 76 19 1 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 1 0 4 1 105 0 3 3 2 95 0 2 2 17 77 0 0 0 5 97 6 1 5 5 27 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 0 3 4 2 3 103 0 4 0 1 0 4 1 105 0 0 0 5 97 6 1 5 5 27 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 34 0 33 35 20 20 36 37 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 708;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "7A00FBBB-E53D-4AD2-A116-6A1604D60BAF";
name = "21 feb 22, 15:02";
shapes = (
{
closed = 1;
nodes = (
(644.667,-18,o),
(779.667,26.5,o),
(849,104.5,cs),
(883.667,143.5,o),
(901,189.667,o),
(901,243,cs),
(901,387.832,o),
(763.213,491,o),
(558,491,cs),
(440.667,491,o),
(333.333,461,o),
(252,405,c),
(252,560,l),
(818,560,l),
(818,700,l),
(102,700,l),
(102,275,l),
(241,277,l),
(315.667,329,o),
(419,355,o),
(523,355,cs),
(659,355,o),
(721,320,o),
(721,244,cs),
(721,204.667,o),
(702.833,174.5,o),
(666.5,153.5,cs),
(630.167,132.5,o),
(569,122,o),
(483,122,cs),
(353.667,122,o),
(208,144,o),
(92,188,c),
(85,39,l),
(197,4.333,o),
(335.333,-18,o),
(462,-18,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 1 1 5 3 1 0 2 2 1 6 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 0 4 4 3 95 0 3 3 17 77 0 1 1 5 97 0 5 5 20 77 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 2 1 0 1 2 0 128 0 3 0 4 5 3 4 103 0 5 0 1 2 5 1 105 0 0 0 6 97 7 1 6 6 24 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 2 1 0 1 2 0 128 0 3 0 4 5 3 4 103 0 5 0 1 2 5 1 105 0 0 6 6 0 89 0 0 0 6 97 7 1 6 0 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 32 0 31 35 17 17 18 36 37 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,311,l),
(198,383,o),
(284,433,o),
(362,433,cs),
(478,433,o),
(554,355,o),
(554,224,cs),
(554,108,o),
(488,11,o),
(368,11,cs),
(225,11,o),
(159,151,o),
(159,280,cs),
(159,505,o),
(265,690,o),
(579,681,c),
(579,710,l),
(302,720,o),
(61,611,o),
(61,303,cs),
(61,130,o),
(170,-14,o),
(370,-14,cs),
(542,-14,o),
(651,102,o),
(651,237,cs),
(651,399,o),
(515,466,o),
(383,466,cs),
(295,466,o),
(203,425,o),
(159,360,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
1 1 4 5 1 76 0 0 0 5 4 0 5 105 0 3 3 2 97 0 2 2 17 77 0 4 4 1 97 0 1 1 27 1 78 36 36 17 21 38 35 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 688;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(754,-20,o),
(902,69,o),
(902,238,cs),
(902,394,o),
(764,478,o),
(523,478,cs),
(404,478,o),
(304,458,o),
(244,397,c),
(257,524,o),
(375,580,o),
(531,580,cs),
(640,580,o),
(750,555,o),
(839,511,c),
(862,656,l),
(783,695,o),
(648,715,o),
(543,715,cs),
(215,715,o),
(75,571,o),
(75,326,cs),
(75,99.333,o),
(219.667,-20,o),
(497,-20,cs)
);
},
{
closed = 1;
nodes = (
(277,316,o),
(342,348,o),
(508,348,cs),
(659,348,o),
(727,316,o),
(727,241,cs),
(727,155,o),
(659,120,o),
(508,120,cs),
(342,120,o),
(277,155,o),
(277,241,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 1 0 9 1 2 1 16 1 5 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 0 97 0 0 0 23 77 0 5 5 2 97 0 2 2 20 77 0 4 4 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 5 4 2 5 105 0 1 1 0 97 0 0 0 23 77 0 4 4 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 5 4 2 5 105 0 1 1 0 97 0 0 0 19 77 0 4 4 3 97 6 1 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 0 5 4 2 5 105 0 4 6 1 3 4 3 101 0 1 1 0 97 0 0 0 19 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 2 0 1 105 0 2 0 5 4 2 5 105 0 4 3 3 4 89 0 4 4 3 97 6 1 3 4 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 37 35 29 27 0 24 0 23 36 37 36 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 969;
},
{
associatedMasterId = m01;
layerId = "22BCEF1C-0A63-4E36-830F-2B9DD69A774F";
name = "11 feb 22, 19:39";
shapes = (
{
closed = 1;
nodes = (
(141,121,o),
(141,240,cs),
(141,455,o),
(278,659,o),
(588,647,c),
(589,670,l),
(316,680,o),
(45,551,o),
(45,273,cs),
(45,99.667,o),
(148,-14,o),
(344,-14,cs),
(526.086,-14,o),
(643,77.773,o),
(643,215,cs),
(643,368,o),
(504,443,o),
(379,443,cs),
(283,443,o),
(196,407,o),
(152,348,c),
(145,305,l),
(188,377,o),
(266,419,o),
(352,419,cs),
(482.667,419,o),
(542,354.333,o),
(542,213,cs),
(542,77,o),
(471.333,11,o),
(342,11,cs),
(193,11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
1 1 4 5 1 76 0 0 0 5 4 0 5 105 0 3 3 2 97 0 2 2 17 77 0 4 4 1 97 0 1 1 27 1 78 36 36 17 21 38 35 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 688;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "D0238EF7-701D-43DA-A6F4-91AACA175BFF";
name = "21 feb 22, 15:02";
shapes = (
{
closed = 1;
nodes = (
(783.667,-20,o),
(934,68.667,o),
(934,238,cs),
(934,399.333,o),
(793.667,483,o),
(523,483,cs),
(403.667,483,o),
(304,462.667,o),
(224,422,c),
(242.667,496.667,o),
(283,543,o),
(371,567,cs),
(415,579,o),
(473.333,585,o),
(546,585,cs),
(628.667,585,o),
(749.667,560,o),
(839,516,c),
(862,661,l),
(783.333,699.667,o),
(657.667,720,o),
(543,720,cs),
(215,720,o),
(75,591.333,o),
(75,326,cs),
(75,99.333,o),
(219.667,-20,o),
(497,-20,cs)
);
},
{
closed = 1;
nodes = (
(240,298.333,o),
(271.833,329.667,o),
(348.5,343,cs),
(386.833,349.667,o),
(440,353,o),
(508,353,cs),
(684.494,353,o),
(759,335.205,o),
(759,241,cs),
(759,177,o),
(731.833,145.667,o),
(660.5,131,cs),
(624.833,123.667,o),
(574,120,o),
(508,120,cs),
(324.008,120,o),
(240,141.374,o),
(240,241,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 1 0 9 1 2 1 16 1 5 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 1 0 97 0 0 0 23 77 0 5 5 2 97 0 2 2 20 77 0 4 4 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 5 4 2 5 105 0 1 1 0 97 0 0 0 23 77 0 4 4 3 97 6 1 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 5 4 2 5 105 0 1 1 0 97 0 0 0 19 77 0 4 4 3 97 6 1 3 3 24 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 0 5 4 2 5 105 0 4 6 1 3 4 3 101 0 1 1 0 97 0 0 0 19 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 2 0 1 105 0 2 0 5 4 2 5 105 0 4 3 3 4 89 0 4 4 3 97 6 1 3 4 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 37 35 29 27 0 24 0 23 36 37 36 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 1009;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,0,l),
(449,4,l),
(341,61,l),
(341,231,o),
(433,491,o),
(680,697,c),
(680,701,l),
(154,701,l),
(103,721,l),
(100,721,l),
(33,450,l),
(35,450,l),
(151,622,l),
(560,622,l),
(404,497,o),
(226,240,o),
(231,0,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
15 5 2 2 0 1 76 7 1 1 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
15 5 4 3 4 2 1 1 76 7 1 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 2 1 133 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
38 21 19 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 715;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(447,0,l),
(460,284,o),
(554,414,o),
(764,569,c),
(764,700,l),
(44,697,l),
(44,558,l),
(530,558,l),
(311,386,o),
(288,199,o),
(273,0,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 17 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 17 19 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 809;
},
{
associatedMasterId = m01;
layerId = "1B4E60E3-E24E-4190-AEF7-0BB2F1FBC5C4";
name = "11 feb 22, 19:40";
shapes = (
{
closed = 1;
nodes = (
(423,0,l),
(423,4,l),
(305,74,l),
(305,187,o),
(353,286,o),
(452,406,cs),
(501,466,o),
(574,546,o),
(670,647,c),
(670,651,l),
(172,651,l),
(154,691,l),
(152,691,l),
(1,480,l),
(3,480,l),
(152,565,l),
(583,595,l),
(404,437,o),
(189,232,o),
(194,0,c)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
15 5 2 2 0 1 76 7 1 1 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
15 5 4 3 4 2 1 1 76 7 1 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 17 77 0 2 2 21 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 21 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 2 1 133 0 2 2 21 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
38 21 19 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 715;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "33065D98-01AF-41A3-BC46-B4D7381B5995";
name = "21 feb 22, 15:02";
shapes = (
{
closed = 1;
nodes = (
(443,0,l),
(469.667,168,o),
(519.667,277,o),
(625,385,cs),
(677.667,439,o),
(750.667,500.333,o),
(844,569,c),
(844,700,l),
(75,697,l),
(75,557,l),
(605,557,l),
(461,438.333,o),
(382,346.667,o),
(330,224,cs),
(304,162.667,o),
(283.333,88,o),
(268,0,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 17 77 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 17 19 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 919;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(469,373,l),
(554,386,o),
(619,451,o),
(619,537,cs),
(619,637,o),
(504,715,o),
(353,715,cs),
(205,715,o),
(88,635,o),
(88,528,cs),
(88,419,o),
(186,374,o),
(282,350,cs),
(443,309,ls),
(536,285,o),
(557,238,o),
(557,178,cs),
(557,82,o),
(477,13,o),
(359,13,cs),
(234,13,o),
(164,106,o),
(164,208,cs),
(164,272,o),
(194,321,o),
(274,364,c),
(245,373,l),
(124,342,o),
(69,260,o),
(69,185,cs),
(69,38,o),
(222,-15,o),
(359,-15,cs),
(493,-15,o),
(653,55,o),
(653,200,cs),
(653,287,o),
(601,352,o),
(502,378,cs),
(317,426,ls),
(225,450,o),
(172,488,o),
(172,557,cs),
(172,632,o),
(238,689,o),
(353,689,cs),
(466,689,o),
(533,631,o),
(533,537,cs),
(533,456,o),
(502,403,o),
(441,378,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
48 41 16 2 4 2 3 1 76 0 3 3 0 97 0 0 0 17 77 0 2 2 1 97 0 1 1 27 1 78 55 53 38 45 40 4 7 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(755,-15,o),
(906,58,o),
(906,199,cs),
(906,282,o),
(852,342,o),
(748,375,c),
(831,402,o),
(875,456,o),
(875,529,cs),
(875,688,o),
(631,715,o),
(493,715,cs),
(345,715,o),
(101,688,o),
(101,529,cs),
(101,456,o),
(145,402,o),
(228,375,c),
(124,342,o),
(70,282,o),
(70,199,cs),
(70,58,o),
(221,-15,o),
(493,-15,cs)
);
},
{
closed = 1;
nodes = (
(251,278,o),
(316,304,o),
(493,304,cs),
(663,304,o),
(725,278,o),
(725,204,cs),
(725,129,o),
(663,102,o),
(493,102,cs),
(316,102,o),
(251,129,o),
(251,204,cs)
);
},
{
closed = 1;
nodes = (
(262,577,o),
(324,601,o),
(493,601,cs),
(655,601,o),
(714,577,o),
(714,521,cs),
(714,455,o),
(655,432,o),
(493,432,cs),
(324,432,o),
(262,455,o),
(262,521,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 5 2 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 2 4 3 105 0 5 5 0 97 0 0 0 23 77 0 2 2 1 97 6 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 2 4 3 105 0 5 5 0 97 0 0 0 19 77 0 2 2 1 97 6 1 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 3 2 4 3 105 0 2 6 1 1 2 1 101 0 5 5 0 97 0 0 0 19 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 49 47 43 41 36 34 28 26 0 23 0 22 42 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 976;
},
{
associatedMasterId = m01;
layerId = "0259D81F-7B34-4909-AFCB-4F4B327F2A76";
name = "11 feb 22, 19:42";
shapes = (
{
closed = 1;
nodes = (
(484,357,l),
(569,370,o),
(638,435,o),
(638,507,cs),
(638,601.853,o),
(521.497,670,o),
(360,670,cs),
(207.02,670,o),
(86,599.759,o),
(86,493,cs),
(86,403,o),
(177,348,o),
(273,326,cs),
(458,283,ls),
(551,261,o),
(582,222.333,o),
(582,161,cs),
(582,81.69,o),
(487.156,13,o),
(359,13,cs),
(219.376,13,o),
(135,83.83,o),
(135,179,cs),
(135,254,o),
(165,295,o),
(255,338,c),
(226,347,l),
(105,316,o),
(40,242,o),
(40,173,cs),
(40,33,o),
(217,-15,o),
(359,-15,cs),
(503,-15,o),
(678,55,o),
(678,188,cs),
(678,270.667,o),
(616,328,o),
(517,352,cs),
(313,400,ls),
(216,423,o),
(159,467.667,o),
(159,521,cs),
(159,597,o),
(240,644,o),
(360,644,cs),
(482.667,644,o),
(555,596.333,o),
(555,507,cs),
(555,440,o),
(517,387,o),
(456,362,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
48 41 16 2 4 2 3 1 76 0 3 3 0 97 0 0 0 17 77 0 2 2 1 97 0 1 1 27 1 78 55 53 38 45 40 4 7 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "7E7CE9AE-0EC5-41C8-A996-C4257191B2F6";
name = "21 feb 22, 15:03";
shapes = (
{
closed = 1;
nodes = (
(807.667,-17,o),
(959,57.667,o),
(959,199,cs),
(959,281.667,o),
(905,341.667,o),
(801,375,c),
(883.667,401.667,o),
(928,455.667,o),
(928,529,cs),
(928,592.333,o),
(893.167,640.5,o),
(823.5,673.5,cs),
(753.833,706.5,o),
(651.667,723,o),
(517,723,cs),
(382.333,723,o),
(280.167,706.5,o),
(210.5,673.5,cs),
(140.833,640.5,o),
(106,592.333,o),
(106,529,cs),
(106,455.667,o),
(150.333,401.667,o),
(233,375,c),
(129,341.667,o),
(75,281.667,o),
(75,199,cs),
(75,57.667,o),
(226.333,-17,o),
(517,-17,cs)
);
},
{
closed = 1;
nodes = (
(255,256,o),
(280.333,281.833,o),
(355,294.5,cs),
(392.333,300.833,o),
(446.333,304,o),
(517,304,cs),
(638.311,304,o),
(723.967,295.532,o),
(757,264,cs),
(771.667,250,o),
(779,230,o),
(779,204,cs),
(779,150.667,o),
(753.5,124.167,o),
(679.5,111.5,cs),
(642.5,105.167,o),
(588.333,102,o),
(517,102,cs),
(393.277,102,o),
(309.797,110.449,o),
(277,142.5,cs),
(262.333,156.833,o),
(255,177.333,o),
(255,204,cs)
);
},
{
closed = 1;
nodes = (
(266,552.333,o),
(286,575.333,o),
(326,590,cs),
(366,604.667,o),
(429.667,612,o),
(517,612,cs),
(604.333,612,o),
(668,604.667,o),
(708,590,cs),
(748,575.333,o),
(768,552.333,o),
(768,521,cs),
(768,489.667,o),
(748.167,467,o),
(708.5,453,cs),
(668.833,439,o),
(605,432,o),
(517,432,cs),
(429,432,o),
(365.167,439,o),
(325.5,453,cs),
(285.833,467,o),
(266,489.667,o),
(266,521,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 5 2 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 2 4 3 105 0 5 5 0 97 0 0 0 23 77 0 2 2 1 97 6 1 1 1 24 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 3 2 4 3 105 0 5 5 0 97 0 0 0 19 77 0 2 2 1 97 6 1 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 3 2 4 3 105 0 2 6 1 1 2 1 101 0 5 5 0 97 0 0 0 19 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 49 47 43 41 36 34 28 26 0 23 0 22 42 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1034;
},
{
associatedMasterId = m01;
layerId = "BFF74D09-C3E0-4B0F-9948-E7C555E942B5";
name = "23 feb 22, 11:39";
shapes = (
{
closed = 1;
nodes = (
(469,357,l),
(554,370,o),
(616,435,o),
(616,507,cs),
(616,597,o),
(504,665,o),
(353,665,cs),
(205,665,o),
(92,595,o),
(92,498,cs),
(92,403,o),
(186,348,o),
(282,324,cs),
(443,283,ls),
(536,259,o),
(557,222,o),
(557,161,cs),
(557,82,o),
(477,13,o),
(359,13,cs),
(234,13,o),
(164,104,o),
(164,196,cs),
(164,254,o),
(184,295,o),
(264,338,c),
(235,347,l),
(114,316,o),
(69,242,o),
(69,173,cs),
(69,33,o),
(222,-15,o),
(359,-15,cs),
(493,-15,o),
(653,55,o),
(653,188,cs),
(653,271,o),
(601,326,o),
(502,352,cs),
(317,400,ls),
(225,424,o),
(172,468,o),
(172,527,cs),
(172,592,o),
(238,639,o),
(353,639,cs),
(466,639,o),
(533,591,o),
(533,507,cs),
(533,440,o),
(502,387,o),
(441,362,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
48 41 16 2 4 2 3 1 76 0 3 3 0 97 0 0 0 17 77 0 2 2 1 97 0 1 1 27 1 78 55 53 38 45 40 4 7 25 
CALL[ ]	/* CallFunction */";
};
width = 718;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (688,701);
ref = six;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
28 11 2 1 0 1 76 0 1 0 5 4 1 5 105 0 0 0 2 97 0 2 2 17 77 0 4 4 3 97 0 3 3 27 3 78 37 17 21 38 36 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 688;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (969,695);
ref = six;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 1 2 4 9 1 1 2 8 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 23 77 0 1 1 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 19 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 2 1 4 2 105 0 1 0 0 1 0 101 0 5 5 3 97 6 1 3 3 19 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 0 5 4 3 5 105 0 4 0 2 1 4 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 36 34 28 26 0 23 0 22 35 37 36 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 969;
},
{
associatedMasterId = m01;
layerId = "388F6DE9-BC6A-4484-AB79-BB57AC2940AD";
name = "11 feb 22, 19:45";
shapes = (
{
closed = 1;
nodes = (
(534,348,l),
(479,266,o),
(414,235,o),
(321,235,cs),
(193,235,o),
(140,292.667,o),
(140,434,cs),
(140,582,o),
(203.333,645,o),
(330,645,cs),
(464.667,645,o),
(528,558,o),
(528,350,cs),
(522,67,o),
(388,9,o),
(129,9,c),
(129,-14,l),
(462.333,-14,o),
(628,101.667,o),
(628,371,cs),
(628,551,o),
(523,670,o),
(338,670,cs),
(151.603,670,o),
(40,575.821,o),
(40,436,cs),
(40,285,o),
(169,210,o),
(296,210,cs),
(399,210,o),
(482,246,o),
(532,311,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
28 11 2 1 0 1 76 0 1 0 5 4 1 5 105 0 0 0 2 97 0 2 2 17 77 0 4 4 3 97 0 3 3 27 3 78 37 17 21 38 36 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 668;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "24057459-7344-4E45-8237-15715F223344";
name = "21 feb 22, 15:03";
shapes = (
{
closed = 1;
nodes = (
(221.333,720,o),
(75,640,o),
(75,472,cs),
(75,310.667,o),
(214,227,o),
(486,227,cs),
(605.333,227,o),
(705,247.333,o),
(785,288,c),
(757,176,o),
(656.333,115,o),
(443,115,cs),
(360.333,115,o),
(239.333,140,o),
(150,184,c),
(127,39,l),
(205.667,0.333,o),
(331.333,-20,o),
(446,-20,cs),
(776.667,-20,o),
(934,112.667,o),
(934,374,cs),
(934,600.667,o),
(789.333,720,o),
(512,720,cs)
);
},
{
closed = 1;
nodes = (
(250,527.667,o),
(277.167,556.667,o),
(348.5,570,cs),
(384.167,576.667,o),
(435,580,o),
(501,580,cs),
(621.011,580,o),
(702.375,570.856,o),
(736,536.5,cs),
(751.333,520.833,o),
(759,498.333,o),
(759,469,cs),
(759,374.502,o),
(681.896,357,o),
(501,357,cs),
(324.506,357,o),
(250,374.795,o),
(250,469,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 1 2 4 9 1 1 2 8 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 23 77 0 1 1 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 19 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 2 1 4 2 105 0 1 0 0 1 0 101 0 5 5 3 97 6 1 3 3 19 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 0 5 4 3 5 105 0 4 0 2 1 4 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 36 34 28 26 0 23 0 22 35 37 36 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 1009;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "81DBDA2B-8094-4B18-8E45-10774E357D28";
name = "23 feb 22, 12:34";
shapes = (
{
closed = 1;
nodes = (
(201,720,o),
(55,640,o),
(55,472,cs),
(55,311,o),
(194,227,o),
(456,227,cs),
(565,227,o),
(665,247,o),
(745,288,c),
(717,176,o),
(616,115,o),
(413,115,cs),
(340,115,o),
(219,140,o),
(130,184,c),
(107,39,l),
(186,0,o),
(311,-20,o),
(416,-20,cs),
(737,-20,o),
(894,113,o),
(894,374,cs),
(894,601,o),
(749,720,o),
(482,720,cs)
);
},
{
closed = 1;
nodes = (
(230,588,o),
(382,580,o),
(471,580,cs),
(577,580,o),
(719,585,o),
(719,469,cs),
(719,375,o),
(642,357,o),
(471,357,cs),
(305,357,o),
(230,375,o),
(230,469,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
15 1 2 4 9 1 1 2 8 1 0 1 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 23 77 0 1 1 0 97 0 0 0 27 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 2 1 4 2 105 0 5 5 3 97 6 1 3 3 19 77 0 1 1 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 0 2 1 4 2 105 0 1 0 0 1 0 101 0 5 5 3 97 6 1 3 3 19 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 0 5 4 3 5 105 0 4 0 2 1 4 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 36 34 28 26 0 23 0 22 35 37 36 7 7 25 
CALL[ ]	/* CallFunction */";
};
width = 979;
}
);
note = nine;
unicode = 57;
},
{
glyphname = fraction;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,673,l),
(-227,-48,l),
(-190,-48,l),
(355,673,l)
);
}
);
width = 120;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(293,686,l),
(-281,-59,l),
(-163,-59,l),
(411,686,l)
);
}
);
width = 130;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (279,0);
ref = fraction;
},
{
pos = (399,0);
ref = two.dnom;
}
);
width = 832;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = one.numr;
},
{
pos = (334,0);
ref = fraction;
},
{
alignment = -1;
pos = (479,0);
ref = two.dnom;
}
);
width = 992;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = one.numr;
},
{
pos = (279,0);
ref = fraction;
},
{
pos = (399,0);
ref = four.dnom;
}
);
width = 811;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = one.numr;
},
{
pos = (334,0);
ref = fraction;
},
{
alignment = -1;
pos = (444,0);
ref = four.dnom;
}
);
width = 1007;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = three.numr;
},
{
pos = (377,0);
ref = fraction;
},
{
pos = (497,0);
ref = four.dnom;
}
);
width = 909;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = three.numr;
},
{
pos = (534,0);
ref = fraction;
},
{
alignment = -1;
pos = (654,0);
ref = four.dnom;
}
);
width = 1207;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = period;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(130,-15,o),
(156,11,o),
(156,43,cs),
(156,75,o),
(129,101,o),
(98,101,cs),
(66,101,o),
(40,75,o),
(40,43,cs),
(40,11,o),
(67,-15,o),
(98,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 97 2 1 1 1 27 1 78 0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 196;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(84.333,-10,o),
(50,18.667,o),
(50,72,cs),
(50,125.333,o),
(84.333,154,o),
(139,154,cs),
(193.667,154,o),
(228,125.333,o),
(228,72,cs),
(228,18.667,o),
(193.667,-10,o),
(139,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 1 97 2 1 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,-10,o),
(129,-4,o),
(136,7,c),
(136,-39,o),
(116,-92,o),
(45,-128,c),
(52,-141,l),
(124,-114,o),
(163,-50,o),
(163,11,cs),
(163,64,o),
(141,102,o),
(99,102,cs),
(65,102,o),
(40,76,o),
(40,45,cs),
(40,14,o),
(64,-10,o),
(94,-10,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
18 1 1 0 1 76 16 15 2 1 73 0 0 0 1 97 2 1 1 1 21 1 78 0 0 0 20 0 19 38 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 193;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(167,-95,l),
(186,-54,ls),
(202,-19,o),
(225,28,o),
(225,69,cs),
(225,114,o),
(192,155,o),
(137,155,cs),
(86,155,o),
(44,123,o),
(44,69,cs),
(44,8,o),
(93,-11,o),
(127,-11,c),
(91,-95,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 134 0 1 1 0 95 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
18 17 16 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,414);
ref = period;
},
{
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 4 1 1 2 0 1 105 0 2 2 3 97 0 3 3 27 3 78 0 0 21 19 15 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 196;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,361);
ref = period;
},
{
ref = period;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 0 97 0 0 0 20 77 0 3 3 2 97 0 2 2 18 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 4 1 1 3 0 1 105 0 3 3 2 97 0 2 2 18 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 4 1 1 3 0 1 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 21 19 15 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = comma;
},
{
pos = (0,414);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
30 1 3 2 1 76 28 27 2 3 73 0 0 4 1 1 2 0 1 105 0 2 2 3 97 0 3 3 21 3 78 0 0 33 31 20 18 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 193;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,360);
ref = period;
},
{
ref = comma;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 3 4 133 0 3 1 3 133 0 2 0 2 134 0 1 1 0 95 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 3 4 133 0 3 1 3 133 0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 34 18 17 16 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 300;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (-10,0);
ref = period;
},
{
pos = (309,0);
ref = period;
},
{
pos = (628,0);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 2 0 0 1 97 5 3 6 3 1 1 27 1 78 0 0 33 31 27 25 21 19 15 13 0 11 0 10 36 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 814;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (400,0);
ref = period;
},
{
pos = (800,0);
ref = period;
},
{
ref = period;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
5 3 2 0 0 1 97 4 2 6 3 1 1 24 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 3 2 0 1 1 0 89 5 3 2 0 0 1 97 4 2 6 3 1 0 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 33 31 27 25 21 19 15 13 0 11 0 10 36 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1078;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,206,l),
(113,206,l),
(140,700,l),
(65,700,l)
);
},
{
ref = period;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 0 2 0 1 2 128 0 0 0 19 77 0 2 2 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 0 133 0 1 2 1 133 0 2 2 3 97 0 3 3 27 3 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 35 18 33 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 204;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(80,234,l),
(198,234,l),
(208,450,l),
(208,734,l),
(70,734,l),
(70,450,l)
);
},
{
ref = period;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 3 1 3 0 114 4 1 1 1 132 0 3 3 2 95 0 2 2 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 3 1 3 0 1 128 4 1 1 1 132 0 3 3 2 95 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 16 15 13 12 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,499);
ref = exclam;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 1 3 0 3 1 0 128 0 3 3 2 97 0 2 2 20 77 0 0 0 22 0 78 36 35 19 32 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 204;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,504);
ref = exclam;
scale = (1,-1);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 1 0 1 133 0 0 2 2 0 112 0 2 3 3 2 87 0 2 2 3 96 0 3 2 3 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
4 1 1 0 1 133 0 0 2 0 133 0 2 3 3 2 87 0 2 2 3 96 0 3 2 3 80 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 17 16 14 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 278;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,328,o),
(409,369,o),
(409,518,cs),
(409,633,o),
(346,690,o),
(249,690,cs),
(144,690,o),
(82,630,o),
(78,483,c),
(-7,528,l),
(19,647,o),
(118,715,o),
(251,715,cs),
(395,715,o),
(487,637,o),
(487,518,cs),
(487,370,o),
(354,297,o),
(249,295,c),
(243,175,l),
(217,175,l),
(212,323,l)
);
},
{
pos = (132,0);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 2 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 1 5 1 0 114 0 5 6 1 5 6 126 0 6 6 132 0 4 0 1 0 4 1 105 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 1 5 1 0 5 128 0 5 6 1 5 6 126 0 6 6 132 0 4 0 1 0 4 1 105 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 1 5 1 0 5 128 0 5 6 1 5 6 126 0 6 6 132 0 2 0 3 4 2 3 105 0 4 1 1 4 89 0 4 4 1 97 0 1 4 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 34 20 38 38 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 517;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(455,322,ls),
(601,327,o),
(692,404,o),
(692,522,cs),
(692,652,o),
(574,734,o),
(387,734,cs),
(254,734,o),
(128,694,o),
(61,631,c),
(113,508,l),
(172,557,o),
(258,602,o),
(395,602,cs),
(505,602,o),
(541,583,o),
(541,526,cs),
(541,468,o),
(506,448,o),
(380,447,cs),
(263,446,l),
(263,226,l),
(397,226,l),
(397,320,l)
);
},
{
pos = (202,-4);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
21 1 3 2 22 1 4 3 47 1 0 1 46 1 6 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 1 1 4 97 5 1 4 4 26 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 5 5 26 77 0 1 1 4 97 0 4 4 26 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 1 4 5 114 0 4 0 1 0 4 1 103 0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 1 4 5 114 0 4 0 1 0 4 1 103 0 0 7 1 6 9 0 6 105 0 9 0 8 9 8 101 0 3 3 2 97 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
57 55 37 17 37 17 37 37 37 67 65 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 741;
},
{
associatedMasterId = m01;
layerId = "E5847D01-CAA0-41F6-9ADA-7094B65E85F9";
name = "11 feb 22, 19:18";
shapes = (
{
closed = 1;
nodes = (
(286,344,o),
(392,407,o),
(392,510,qs),
(392,585,o),
(315,676,o),
(255,676,qs),
(182,676,o),
(94,574,o),
(94,475,q),
(50,519,l),
(50,561,o),
(101,640,o),
(194,689,o),
(255,689,qs),
(320,689,o),
(416,642,o),
(467,561,o),
(467,510,qs),
(467,446,o),
(380,359,o),
(273,317,o),
(249,317,q),
(242,206,l),
(225,206,l),
(224,344,l)
);
},
{
closed = 1;
nodes = (
(182,22,o),
(213,-8,o),
(234,-8,qs),
(255,-8,o),
(286,21,o),
(286,44,qs),
(286,66,o),
(256,96,o),
(234,96,qs),
(212,96,o),
(182,66,o),
(182,44,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 2 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 1 5 1 0 114 0 5 6 1 5 6 126 0 6 6 132 0 4 0 1 0 4 1 105 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 0 1 5 1 0 5 128 0 5 6 1 5 6 126 0 6 6 132 0 4 0 1 0 4 1 105 0 3 3 2 97 0 2 2 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 1 5 1 0 5 128 0 5 6 1 5 6 126 0 6 6 132 0 2 0 3 4 2 3 105 0 4 1 1 4 89 0 4 4 1 97 0 1 4 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 34 20 38 38 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 517;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "E3EEA22E-FB5E-4E74-8DCE-5DC36EAE25CE";
name = "21 feb 22, 17:09";
shapes = (
{
closed = 1;
nodes = (
(682,279,l),
(589,226,o),
(451,208,o),
(356,208,cs),
(225,208,o),
(78,241,o),
(78,360,cs),
(78,447,o),
(150,515,o),
(313,523,cs),
(420,528,ls),
(507,532,o),
(551,530.234,o),
(551,572,cs),
(551,622,o),
(424,622,o),
(375,622,cs),
(269.667,622,o),
(172.333,593.333,o),
(103,544,c),
(51,647,l),
(128.333,703,o),
(257.667,734,o),
(387,734,cs),
(567,734,o),
(692,675.333,o),
(692,562,cs),
(692,434,o),
(580,417,o),
(465,411,cs),
(376,406,ls),
(252,399,o),
(219,381,o),
(219,358,cs),
(219,334,o),
(250,315,o),
(345,315,cs),
(402,315,o),
(551,326,o),
(635,378,c)
);
},
{
pos = (202,-4);
ref = period;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
21 1 3 2 22 1 4 3 47 1 0 1 46 1 6 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 1 1 4 97 5 1 4 4 26 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 5 5 26 77 0 1 1 4 97 0 4 4 26 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 1 4 5 114 0 4 0 1 0 4 1 103 0 0 7 1 6 9 0 6 105 0 3 3 2 97 0 2 2 19 77 0 9 9 8 97 0 8 8 24 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 4 1 4 5 114 0 4 0 1 0 4 1 103 0 0 7 1 6 9 0 6 105 0 9 0 8 9 8 101 0 3 3 2 97 0 2 2 19 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
57 55 37 17 37 17 37 37 37 67 65 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (517,499);
ref = question;
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 2 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 6 5 133 0 6 0 6 133 0 0 1 1 0 112 0 1 0 4 3 1 4 106 0 3 3 2 97 0 2 2 22 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 5 6 5 133 0 6 0 6 133 0 0 1 0 133 0 1 0 4 3 1 4 106 0 3 3 2 97 0 2 2 22 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 34 20 38 38 17 16 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 517;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (743,500);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
47 1 0 7 48 1 1 0 23 1 4 5 22 1 3 4 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 2 1 1 1 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 0 6 6 18 77 2 1 1 1 5 97 0 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 6 1 2 114 0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 0 6 6 18 77 0 1 1 5 97 0 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 1 6 1 2 114 0 6 5 5 6 112 0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 0 1 1 5 97 0 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 6 1 2 114 0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 0 6 6 18 77 0 1 1 5 97 0 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 1 6 1 2 114 0 6 5 5 6 112 0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 4 0 3 4 3 101 0 1 1 5 97 0 5 5 18 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 2 1 6 1 2 114 0 6 5 5 6 112 0 10 0 9 7 10 9 105 8 1 7 0 0 1 7 0 105 0 1 0 5 4 1 5 105 0 4 3 3 4 89 0 4 4 3 97 0 3 4 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
58 56 52 50 17 37 17 37 37 37 17 51 65 11 7 31 
CALL[ ]	/* CallFunction */";
};
width = 741;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,218);
ref = period;
}
);
width = 196;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,187);
ref = period;
}
);
width = 278;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,183,o),
(220,219,o),
(220,268,cs),
(220,317,o),
(183,354,o),
(135,354,cs),
(87,354,o),
(50,317,o),
(50,268,cs),
(50,219,o),
(87,183,o),
(135,183,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 270;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (-21,167);
ref = period;
scale = (1.4118,1.4118);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,400,o),
(223,410,o),
(223,432,cs),
(223,439.333,o),
(220,455.667,o),
(214,481,cs),
(208,505,o),
(204,528,o),
(202,550,c),
(207,546,o),
(223,533,o),
(248,511,cs),
(265,496,o),
(293,467,o),
(310,467,cs),
(330,467,o),
(338,486,o),
(338,496,cs),
(338,518.667,o),
(322.333,525.333,o),
(281,536,cs),
(249.667,544.667,o),
(226,553.333,o),
(210,562,c),
(226.667,570,o),
(249,578.333,o),
(277,587,cs),
(290,590,o),
(339,607,o),
(339,629,cs),
(339,644,o),
(327,658,o),
(311,658,cs),
(291,658,o),
(268,633,o),
(254,619,cs),
(230.667,597,o),
(213.333,582,o),
(202,574,c),
(202.667,578,o),
(206.667,600.667,o),
(214,642,cs),
(220,672,o),
(223,689.667,o),
(223,695,cs),
(223,711,o),
(210,724,o),
(194,724,cs),
(178,724,o),
(165,711,o),
(165,695,cs),
(165,689.667,o),
(168,672,o),
(174,642,cs),
(181.333,600.667,o),
(185.333,578,o),
(186,574,c),
(179.333,578.667,o),
(163,593,o),
(120,631,cs),
(110,640,o),
(90,658,o),
(78,658,cs),
(61,658,o),
(49,643,o),
(49,628,cs),
(49,617,o),
(54,608,o),
(64,604,cs),
(178,562,l),
(156.667,550.667,o),
(135.333,542.667,o),
(114,538,cs),
(87,531,o),
(50,526,o),
(50,496,cs),
(50,483,o),
(61,467,o),
(78,467,cs),
(90.667,467,o),
(109.333,480,o),
(134,506,cs),
(148.667,522,o),
(166,536.667,o),
(186,550,c),
(184,528,o),
(180,505,o),
(174,481,cs),
(168,458.333,o),
(165,442,o),
(165,432,cs),
(165,415,o),
(177,400,o),
(194,400,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
47 1 1 2 82 68 37 20 7 5 0 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 2 133 6 1 5 0 5 134 4 1 0 0 1 97 3 1 1 1 17 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
6 1 5 0 5 134 0 2 2 19 77 4 1 0 0 1 97 3 1 1 1 17 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 1 2 133 6 1 5 0 5 134 4 1 0 0 1 97 3 1 1 1 17 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 2 133 6 1 5 0 5 134 3 1 1 0 0 1 89 3 1 1 1 0 97 4 1 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 90 0 89 78 76 58 56 45 43 31 30 42 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 388;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(685,258,l),
(547,414,l),
(745,442,l),
(715,576,l),
(501,517,l),
(511,734,l),
(372,734,l),
(382,517,l),
(169,576,l),
(139,442,l),
(336,414,l),
(199,258,l),
(299,169,l),
(444,358,l),
(585,169,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
16 5 3 0 4 0 1 1 76 17 4 2 0 73 4 1 2 5 1 1 0 2 1 103 0 0 0 3 95 0 3 3 19 0 78 17 17 17 17 20 17 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 881;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(572,211,l),
(572,243,l),
(-5,243,l),
(-5,211,l)
);
},
{
closed = 1;
nodes = (
(646,463,l),
(646,494,l),
(69,494,l),
(69,463,l)
);
},
{
closed = 1;
nodes = (
(93,0,l),
(128,0,l),
(327,700,l),
(292,700,l)
);
},
{
closed = 1;
nodes = (
(313,0,l),
(348,0,l),
(547,700,l),
(512,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
17 13 2 4 74 27 3 2 0 73 6 5 2 4 10 7 2 3 2 4 3 103 12 11 8 3 2 0 0 2 87 12 11 8 3 2 2 0 95 9 1 2 0 2 0 79 28 28 28 31 28 31 30 29 25 24 17 17 19 19 17 17 17 19 16 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 626;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(1012,561,l),
(128,561,l),
(128,433,l),
(1012,433,l)
);
},
{
closed = 1;
nodes = (
(918,290,l),
(70,290,l),
(70,162,l),
(918,162,l)
);
},
{
closed = 1;
nodes = (
(510,0,l),
(666,0,l),
(886,715,l),
(730,715,l)
);
},
{
closed = 1;
nodes = (
(186,0,l),
(342,0,l),
(562,715,l),
(406,715,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 6 2 4 9 3 16 3 1 0 4 1 104 10 2 2 0 15 13 2 11 12 0 11 103 7 1 5 5 19 77 14 1 12 12 18 12 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
14 1 12 11 12 134 8 6 2 4 9 3 16 3 1 0 4 1 104 10 2 2 0 15 13 2 11 12 0 11 103 7 1 5 5 19 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
0 0 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 0 3 0 3 17 17 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1116;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,-168,l),
(374,715,l),
(340,715,l),
(43,-168,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 426;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(21,-182,l),
(174,-182,l),
(490,715,l),
(338,715,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 18 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 520;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (419,0);
ref = slash;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
2 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 426;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (551,0);
ref = slash;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 5 0 4 33 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 560;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = hyphen;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,244,l),
(343,299,l),
(40,299,l),
(40,244,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(40,205,l),
(420,206,l),
(420,340,l),
(40,340,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 460;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,255,l),
(591,255,l),
(591,287,l),
(0,287,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 591;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(0,232,l),
(644,232,l),
(644,317,l),
(0,317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 644;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(898,255,l),
(898,287,l),
(0,287,l),
(0,255,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 898;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(0,232,l),
(944,232,l),
(944,317,l),
(0,317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 944;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = underscore;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,-80,l),
(422,-48,l),
(0,-48,l),
(0,-80,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 422;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(0,-125,l),
(478,-125,l),
(478,-40,l),
(0,-40,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 478;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = parenleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,458,o),
(174,621,o),
(281,710,c),
(267,728,l),
(131,633,o),
(22,443,o),
(22,276,cs),
(22,109,o),
(132,-83,o),
(267,-176,c),
(281,-157,l),
(174,-68,o),
(109,94,o),
(109,276,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
10 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 328;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(467,-250,l),
(469,-248,l),
(321,-118,o),
(212,59,o),
(212,259,cs),
(212,457,o),
(317,634,o),
(465,762,c),
(464,764,l),
(283,764,l),
(141,643,o),
(50,443,o),
(50,259,cs),
(50,73,o),
(142,-129,o),
(283,-250,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 41 23 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 413;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (310,0);
ref = parenleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
10 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 328;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (423,0);
ref = parenleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 19 0 19 41 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(190,141,ls),
(195,233,o),
(143,278,o),
(85,278,c),
(85,272,l),
(143,273,o),
(195,318,o),
(190,409,cs),
(180,608,ls),
(177,676,o),
(219,689,o),
(285,705,c),
(280,724,l),
(179,700,o),
(107,673,o),
(113,567,cs),
(123,395,ls),
(126,336,o),
(109,289,o),
(41,286,c),
(41,265,l),
(109,261,o),
(126,214,o),
(123,155,cs),
(113,-17,ls),
(107,-123,o),
(179,-150,o),
(280,-174,c),
(285,-155,l),
(221,-140,o),
(177,-123,o),
(180,-58,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
41 1 0 1 1 76 36 30 29 3 1 74 46 45 4 3 4 0 73 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 17 31 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 335;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(521,-250,l),
(521,-134,l),
(374,-134,ls),
(356,-134,o),
(347,-124,o),
(347,-103,cs),
(347,53,ls),
(347,165,o),
(312,228,o),
(220,258,c),
(312,287,o),
(347,350,o),
(347,462,cs),
(347,618,ls),
(347,639,o),
(356,649,o),
(374,649,cs),
(521,649,l),
(521,765,l),
(348,765,ls),
(249,765,o),
(188,707,o),
(188,615,cs),
(188,440,ls),
(188,369,o),
(148,321,o),
(75,321,cs),
(50,321,l),
(50,194,l),
(75,194,ls),
(148,194,o),
(188,146,o),
(188,75,cs),
(188,-100,ls),
(188,-192,o),
(249,-250,o),
(348,-250,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
25 1 0 1 1 76 0 2 0 3 1 2 3 103 0 1 0 0 4 1 0 105 0 4 5 5 4 87 0 4 4 5 95 6 1 5 4 5 79 0 0 0 34 0 33 42 33 37 33 37 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (335,0);
ref = braceleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
14 1 1 0 1 76 26 25 19 3 0 74 10 9 4 3 4 1 73 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 40 39 38 37 2 7 22 
CALL[ ]	/* CallFunction */";
};
width = 335;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (541,0);
ref = braceleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
11 1 5 4 1 76 0 3 0 2 4 3 2 103 0 4 0 5 1 4 5 105 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 33 37 33 42 33 33 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(215,-146,l),
(74,-143,l),
(102,-12,o),
(116,120,o),
(116,271,cs),
(116,424,o),
(102,555,o),
(74,686,c),
(215,689,l),
(215,714,l),
(145,714,o),
(90,715,o),
(50,717,c),
(50,-174,l),
(90,-172,o),
(145,-171,o),
(215,-171,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 4 1 0 3 0 79 1 0 11 10 6 5 4 2 0 12 1 12 5 7 22 
CALL[ ]	/* CallFunction */";
};
width = 265;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(50,-250,l),
(383,-250,l),
(383,-134,l),
(209,-134,l),
(209,649,l),
(383,649,l),
(383,765,l),
(50,765,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 0 0 0 7 0 7 17 17 17 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (265,0);
ref = bracketleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 0 0 3 1 0 103 4 1 3 2 2 3 87 4 1 3 3 2 95 0 2 3 2 79 0 0 0 12 0 12 33 33 20 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 265;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (433,0);
ref = bracketleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,-5,o),
(130,0,o),
(138,11,c),
(138,-38,o),
(112,-73,o),
(59,-94,c),
(65,-111,l),
(117,-94,o),
(163,-50,o),
(163,21,cs),
(163,64,o),
(141,97,o),
(103,97,cs),
(72,97,o),
(50,74,o),
(50,45,cs),
(50,17,o),
(72,-5,o),
(100,-5,cs)
);
}
);
width = 203;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(155,-115,l),
(186,-54,ls),
(203,-21,o),
(225,28,o),
(225,69,cs),
(225,114,o),
(192,155,o),
(137,155,cs),
(86,155,o),
(44,123,o),
(44,69,cs),
(44,8,o),
(93,-11,o),
(127,-11,c),
(79,-115,l)
);
}
);
width = 293;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = quotesinglbase;
},
{
pos = (140,0);
ref = quotesinglbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
18 1 1 0 1 76 16 15 2 1 73 0 0 0 1 97 2 1 1 1 21 1 78 0 0 0 20 0 19 38 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 353;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = quotesinglbase;
},
{
pos = (210,0);
ref = quotesinglbase;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 134 0 1 1 0 95 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
18 17 16 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (353,653);
ref = quotedblbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
31 12 2 1 0 1 76 26 7 2 0 74 2 1 0 1 1 0 89 2 1 0 0 1 97 3 4 2 1 0 1 81 0 0 42 40 34 32 0 22 0 21 45 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 353;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (503,632);
ref = quotedblbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
7 0 2 2 1 1 76 4 1 1 5 1 2 1 2 100 3 1 0 0 19 0 78 17 17 18 17 17 17 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (353,1271);
ref = quotedblleft;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
39 3 2 0 1 1 76 34 22 21 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 0 0 1 97 2 1 1 1 19 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 1 0 0 1 89 2 1 1 1 0 97 3 1 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
45 43 38 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 353;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,614);
ref = quotedblbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 4 2 0 1 1 76 5 1 2 0 2 134 3 1 0 0 1 95 4 1 1 1 19 0 78 18 17 17 18 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 503;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (213,603);
ref = quotesinglbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
12 1 1 0 1 76 7 1 0 74 0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 22 0 21 45 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 203;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (293,646);
ref = quotesinglbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
0 1 2 1 1 76 0 1 0 2 1 2 100 0 0 0 19 0 78 17 17 17 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,617);
ref = quotesinglbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 0 1 1 76 22 21 2 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 97 0 1 1 19 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
38 36 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 203;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,602);
ref = quotesinglbase;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 1 2 1 76 0 0 1 0 134 0 1 1 2 95 0 2 2 19 1 78 17 17 17 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 293;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (-20,0);
ref = guilsinglleft;
},
{
pos = (150,0);
ref = guilsinglleft;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
23 17 13 7 2 50 
CALL[ ]	/* CallFunction */";
};
width = 483;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = guilsinglleft;
},
{
pos = (362,0);
ref = guilsinglleft;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
12 8 5 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (463,0);
ref = guillemotleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 18 12 4 2 50 
CALL[ ]	/* CallFunction */";
};
width = 483;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (806,0);
ref = guillemotleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 10 5 2 2 50 
CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,78,l),
(226,142,o),
(179,200,o),
(142,253,c),
(179,306,o),
(226,364,o),
(283,428,c),
(269,442,l),
(247,420,o),
(219,395,o),
(186,366,cs),
(96,290,l),
(50,253,l),
(96,216,l),
(186,140,ls),
(219,111,o),
(247,86,o),
(269,64,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 333;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(384,6,l),
(384,166,l),
(237,256,l),
(384,346,l),
(384,506,l),
(60,316,l),
(60,196,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (333,0);
ref = guilsinglleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
12 4 1 50 
CALL[ ]	/* CallFunction */";
};
width = 333;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = guilsinglleft;
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = quotesingle;
},
{
pos = (110,0);
ref = quotesingle;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
24 11 2 1 0 1 76 3 1 1 1 0 97 2 1 0 0 19 1 78 23 35 23 38 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 230;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (223,0);
ref = quotesingle;
},
{
ref = quotesingle;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 19 1 78 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,564,l),
(100,750,l),
(20,750,l),
(51,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
11 1 1 0 1 76 0 1 1 0 97 0 0 0 19 1 78 23 38 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 120;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(62,484,l),
(189,484,l),
(201,625,l),
(201,750,l),
(50,750,l),
(50,625,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 19 1 78 18 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = florin;
lastChange = "2022-05-04 21:43:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,413,l),
(86,440,l),
(463,440,l),
(463,413,l)
);
},
{
closed = 1;
nodes = (
(198,500,ls),
(198,611,o),
(267,715,o),
(399,715,cs),
(468,715,o),
(518,686,o),
(584,635,c),
(534,538,l),
(532,538,l),
(502,650,o),
(462,686,o),
(397,686,cs),
(326,686,o),
(277,626,o),
(277,522,cs),
(277,135,ls),
(277,50,o),
(224,-15,o),
(129,-15,cs),
(78,-15,o),
(32,5,o),
(-23,56,c),
(35,125,l),
(37,125,l),
(57,43,o),
(95,13,o),
(130,13,cs),
(169,13,o),
(198,46,o),
(198,110,cs)
);
}
);
width = 600;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(531,466,l),
(40,466,l),
(40,346,l),
(531,346,l)
);
},
{
closed = 1;
nodes = (
(162,136,o),
(117,118,o),
(76,118,cs),
(46,118,o),
(10,135,o),
(-21,164,c),
(-56,37,l),
(-19,5,o),
(42,-14,o),
(97,-14,cs),
(241,-14,o),
(330,66,o),
(330,200,cs),
(330,500,ls),
(330,608,o),
(385,637,o),
(449,637,cs),
(496,637,o),
(542,620,o),
(573,591,c),
(607,713,l),
(570,745,o),
(500,764,o),
(425,764,cs),
(231,764,o),
(162,654,o),
(162,500,cs),
(162,210,ls)
);
}
);
width = 650;
}
);
note = florin;
unicode = 402;
},
{
glyphname = at;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(693,-18,l),
(634,-67,o),
(553,-92,o),
(461,-92,cs),
(234,-92,o),
(96,42,o),
(96,232,cs),
(96,427,o),
(237,564,o),
(444,564,cs),
(644,564,o),
(769,437,o),
(769,286,cs),
(769,130,o),
(675,48,o),
(608,48,cs),
(570,48,o),
(562,64,o),
(562,84,cs),
(562,104,o),
(571,146,o),
(582,190,cs),
(644,444,l),
(639,446,l),
(618,420,o),
(585,394,o),
(562,386,c),
(520,430,o),
(486,455,o),
(434,455,cs),
(295,455,o),
(219,276,o),
(219,150,cs),
(219,40,o),
(289,15,o),
(327,15,cs),
(394,15,o),
(456,70,o),
(505,119,c),
(500,150,l),
(424,76,o),
(387,60,o),
(360,60,cs),
(328,60,o),
(302,82,o),
(302,150,cs),
(302,227,o),
(345,426,o),
(450,426,cs),
(484,426,o),
(509,401,o),
(538,370,c),
(506,221,ls),
(496,174,o),
(483,122,o),
(483,91,cs),
(483,44,o),
(524,8,o),
(596,8,cs),
(690,8,o),
(813,110,o),
(813,281,cs),
(813,469,o),
(659,602,o),
(445,602,cs),
(208,602,o),
(51,441,o),
(51,232,cs),
(51,19,o),
(214,-131,o),
(453,-131,cs),
(557,-131,o),
(650,-101,o),
(716,-46,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
54 1 3 5 95 86 59 51 25 5 8 9 2 76 0 0 0 5 3 0 5 105 0 3 0 9 8 3 9 105 0 6 10 1 7 6 7 101 0 8 8 1 97 2 1 1 1 27 77 0 4 4 1 97 2 1 1 1 27 1 78 0 0 98 96 93 91 0 90 0 89 82 80 74 72 66 64 45 46 38 38 11 7 26 
CALL[ ]	/* CallFunction */";
};
width = 863;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(738,-198,o),
(837,-175,o),
(916,-136,c),
(908,-21,l),
(825,-64,o),
(732,-82,o),
(629,-82,cs),
(400,-82,o),
(272,40,o),
(272,218,cs),
(272,400,o),
(402,519,o),
(643,519,cs),
(801,519,o),
(987,439,o),
(987,275,cs),
(987,195,o),
(942,147,o),
(888,147,cs),
(852,147,o),
(830,170,o),
(836,208,cs),
(862,374,l),
(765,374,l),
(760,345,l),
(726,376,o),
(659,395,o),
(611,395,cs),
(477,395,o),
(387,315,o),
(387,213,cs),
(387,91,o),
(465,31,o),
(578,31,cs),
(656,31,o),
(713,73,o),
(739,128,c),
(754,74,o),
(820,51,o),
(880,51,cs),
(1012,51,o),
(1109,128,o),
(1109,272,cs),
(1109,522,o),
(850,635,o),
(636,635,cs),
(378,635,o),
(135,496,o),
(135,217,cs),
(135,-72,o),
(393,-198,o),
(626,-198,cs)
);
},
{
closed = 1;
nodes = (
(695,141,o),
(664,121,o),
(600,121,cs),
(534,121,o),
(497,157,o),
(497,215,cs),
(497,274,o),
(540,307,o),
(613,307,cs),
(672,307,o),
(716,280,o),
(738,259,c),
(730,203,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
30 1 10 3 18 1 1 5 54 1 7 1 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
30 1 10 4 18 1 1 5 54 1 7 1 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
9 1 5 2 1 1 7 5 1 106 0 7 11 1 8 7 8 101 0 6 6 0 97 0 0 0 19 77 0 10 10 3 97 4 1 3 3 26 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 5 2 1 1 7 5 1 106 0 7 11 1 8 7 8 101 0 6 6 0 97 0 0 0 19 77 0 4 4 20 77 0 10 10 3 97 0 3 3 26 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 4 3 10 3 4 10 128 0 3 0 10 5 3 10 105 9 1 5 2 1 1 7 5 1 106 0 7 11 1 8 7 8 101 0 6 6 0 97 0 0 0 19 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 4 3 10 3 4 10 128 0 0 0 6 3 0 6 105 0 3 0 10 5 3 10 105 9 1 5 2 1 1 7 5 1 106 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 68 66 62 60 0 58 0 57 38 37 36 18 37 36 38 38 12 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1244;
},
{
associatedMasterId = m01;
layerId = "4B1827A5-C43A-4432-BD01-A60751118426";
name = "14 feb 22, 11:19";
shapes = (
{
closed = 1;
nodes = (
(587.739,-171,o),
(726.698,-84.565,o),
(774,45,c),
(756,52,l),
(708.785,-69.118,o),
(577.778,-149,o),
(433,-149,cs),
(217,-149,o),
(74,5,o),
(74,219,cs),
(74,438,o),
(220,589,o),
(431,589,cs),
(624.903,589,o),
(759,463.306,o),
(759,281,cs),
(759,123.123,o),
(673.641,12,o),
(552,12,cs),
(535,12,o),
(512,24,o),
(512,54,cs),
(512,74,o),
(524.667,118.667,o),
(542,160,cs),
(664,454,l),
(651,459,l),
(637.667,429.667,o),
(604.667,403.667,o),
(574,393,c),
(516,448,o),
(494,455,o),
(474,455,cs),
(345,455,o),
(199,175,o),
(199,46,cs),
(199,10,o),
(219,-15,o),
(255,-15,cs),
(302,-15,o),
(365,59,o),
(392,98,cs),
(546,323,l),
(489,191,ls),
(467.667,145.667,o),
(453,91.667,o),
(453,61,cs),
(453,14,o),
(494,-15,o),
(541,-15,cs),
(679.826,-15,o),
(783,100.376,o),
(783,281,cs),
(783,479,o),
(635,611,o),
(431,611,cs),
(283,611,o),
(163.167,541.833,o),
(98.5,422.5,cs),
(66.167,362.833,o),
(50,295,o),
(50,219,cs),
(50,-9,o),
(205,-171,o),
(433,-171,cs)
);
},
{
closed = 1;
nodes = (
(268,137,o),
(376,432,o),
(477,432,cs),
(503,432,o),
(530.333,413.667,o),
(559,377,c),
(373,110,ls),
(332.333,51.333,o),
(303.333,22,o),
(286,22,cs),
(274,22,o),
(268,30,o),
(268,46,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 84 values pushed */
54 1 3 5 95 86 59 51 25 5 8 9 2 76 0 0 0 5 3 0 5 105 0 3 0 9 8 3 9 105 0 6 10 1 7 6 7 101 0 8 8 1 97 2 1 1 1 27 77 0 4 4 1 97 2 1 1 1 27 1 78 0 0 98 96 93 91 0 90 0 89 82 80 74 72 66 64 45 46 38 38 11 7 26 
CALL[ ]	/* CallFunction */";
};
width = 833;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
lastChange = "2022-10-17 21:36:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(624,319,o),
(675,359,o),
(725,359,cs),
(758,359,o),
(775,352,o),
(798,339,c),
(783,419,l),
(672,408,o),
(645,372,o),
(544,247,cs),
(466,150,o),
(399,14,o),
(260,14,cs),
(176,14,o),
(114,79.054,o),
(114,189,cs),
(114,294.333,o),
(167,369,o),
(251,398,c),
(297,380,ls),
(382,347,o),
(442,334,o),
(468,245,cs),
(523,58,o),
(594,-7,o),
(679,-7,cs),
(745,-7,o),
(795.333,25,o),
(824,69,c),
(808,82,l),
(782.667,46,o),
(740.333,22,o),
(703,22,cs),
(620,22,o),
(592,103,o),
(570,184,cs),
(526,343,o),
(482,394,o),
(326,443,cs),
(246,469.667,o),
(201,502.667,o),
(201,573,cs),
(201,628,o),
(247,671,o),
(326,670,cs),
(403,670,o),
(474.667,615,o),
(516,527,c),
(544,604,l),
(498.667,656,o),
(417.333,691,o),
(337,691,cs),
(227,691,o),
(136,628.561,o),
(136,541,cs),
(136,478,o),
(177.667,437.333,o),
(232,408,c),
(124,380,o),
(25,309,o),
(25,191,cs),
(25,57,o),
(138,-10,o),
(259,-10,cs),
(405,-10,o),
(479,122,o),
(558,229,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
22 21 2 2 1 93 11 2 3 2 83 67 61 60 49 41 36 7 4 3 3 76 0 2 0 3 4 2 3 105 0 1 1 0 97 0 0 0 19 77 0 4 4 5 97 8 6 2 5 5 21 77 0 7 7 5 97 8 6 2 5 5 21 5 78 0 0 78 76 0 73 0 72 65 63 58 56 44 42 40 39 26 24 19 17 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 861;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(900,334,l),
(755,334,l),
(755,318,ls),
(755,175,o),
(651,110,o),
(428,110,cs),
(310,110,o),
(195,132,o),
(195,223,cs),
(195,277,o),
(241,308,o),
(304,308,cs),
(1008,308,l),
(1008,432,l),
(297,432,ls),
(244,432,o),
(203,456,o),
(203,502,cs),
(203,564,o),
(273,591,o),
(402,591,cs),
(568,591,o),
(671,556,o),
(744,505,c),
(816,617,l),
(723,669,o),
(596,715,o),
(420,715,cs),
(189,715,o),
(44,639,o),
(44,513,cs),
(44,440,o),
(109,379,o),
(190,368,c),
(190,366,l),
(84,346,o),
(30,280,o),
(30,205,cs),
(30,65,o),
(168,-19,o),
(427,-19,cs),
(748,-19,o),
(900,124,o),
(900,322,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1058;
},
{
associatedMasterId = m01;
layerId = "4CFCD5AC-0D9A-4DC9-ADD7-A3C0D3D8BF79";
name = "17 feb 22, 15:10";
shapes = (
{
closed = 1;
nodes = (
(594,278,ls),
(624,319,o),
(666.333,349.333,o),
(701,356,cs),
(710.333,358,o),
(719.333,359,o),
(728,359,cs),
(758,359,o),
(784.667,352.333,o),
(808,339,c),
(783,409,l),
(720.333,409,o),
(648,369,o),
(601,311,cs),
(547,244,l),
(489,150,o),
(369,5,o),
(260,5,cs),
(176.039,5,o),
(114,79.054,o),
(114,189,cs),
(114,294.333,o),
(167,379.333,o),
(251,398,c),
(297,380,ls),
(382,347,o),
(446,334,o),
(468,245,cs),
(521,58,o),
(594,-7,o),
(675,-7,cs),
(735,-7,o),
(795.333,25,o),
(826,73,c),
(808,82,l),
(782.667,46,o),
(740.333,22,o),
(703,22,cs),
(620,22,o),
(590,103,o),
(570,184,cs),
(531,343,o),
(482,394,o),
(326,443,cs),
(246,469.667,o),
(201,502.667,o),
(201,560,cs),
(201,638,o),
(246.667,677,o),
(338,677,cs),
(403.333,675.667,o),
(474.667,615,o),
(516,527,c),
(544,604,l),
(498.667,656,o),
(417.333,691,o),
(340,691,cs),
(229.003,691,o),
(136,628.561,o),
(136,539,cs),
(136,488.333,o),
(177.667,437.333,o),
(235,408,c),
(124,380,o),
(25,309,o),
(25,191,cs),
(25,67,o),
(138,-10,o),
(259,-10,cs),
(375,-10,o),
(493,130,o),
(558,229,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
22 21 2 2 1 93 11 2 3 2 83 67 61 60 49 41 36 7 4 3 3 76 0 2 0 3 4 2 3 105 0 1 1 0 97 0 0 0 19 77 0 4 4 5 97 8 6 2 5 5 21 77 0 7 7 5 97 8 6 2 5 5 21 5 78 0 0 78 76 0 73 0 72 65 63 58 56 44 42 40 39 26 24 19 17 9 7 22 
CALL[ ]	/* CallFunction */";
};
width = 861;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "97F6CD2B-EBEC-4028-8A98-907188EC031A";
name = "22 feb 22, 11:57";
shapes = (
{
closed = 1;
nodes = (
(518,562,o),
(536,583.667,o),
(572,595,cs),
(608,606.333,o),
(661,612,o),
(731,612,cs),
(809.667,612,o),
(864.5,606.667,o),
(895.5,596,cs),
(926.5,585.333,o),
(942,567.667,o),
(942,543,cs),
(942,518.333,o),
(928,500.667,o),
(900,490,cs),
(872,479.333,o),
(824,474,o),
(756,474,cs),
(546,474,l),
(527.333,490.667,o),
(518,509.333,o),
(518,530,cs)
);
},
{
closed = 1;
nodes = (
(40,84.333,o),
(209.667,-12,o),
(519,-12,cs),
(667,-12,o),
(799,9,o),
(935,65,c),
(1071,0,l),
(1386,0,l),
(1091,143,l),
(1160.333,182.333,o),
(1233,233.667,o),
(1309,297,c),
(1305,494,l),
(1184.333,375.333,o),
(1056.333,285,o),
(921,223,c),
(811.667,277,o),
(732.333,320.667,o),
(683,354,c),
(831,354,ls),
(1008.333,354,o),
(1115,427,o),
(1115,551,cs),
(1115,616.333,o),
(1084.167,664.5,o),
(1022.5,695.5,cs),
(960.833,726.5,o),
(861.667,742,o),
(725,742,cs),
(457,742,o),
(333,683.333,o),
(333,550,cs),
(333,522.667,o),
(338.333,497,o),
(349,473,c),
(146.333,462.333,o),
(40,383,o),
(40,251,cs)
);
},
{
closed = 1;
nodes = (
(227,320.333,o),
(293.333,354,o),
(408,354,cs),
(441,354,l),
(509,296,o),
(610.333,231.667,o),
(745,161,c),
(669.667,141.667,o),
(592,132,o),
(512,132,cs),
(424,132,o),
(354.5,143.333,o),
(303.5,166,cs),
(252.5,188.667,o),
(227,219.667,o),
(227,259,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1426;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "45FCD5B0-0292-457C-9F7D-9B710D942F40";
name = "23 feb 22, 14:08";
shapes = (
{
closed = 1;
nodes = (
(808,0,l),
(319,411,ls),
(255,465,o),
(201,498,o),
(201,554,cs),
(201,612,o),
(250,652,o),
(316,652,cs),
(395,652,o),
(443,613,o),
(503,557,c),
(584,647,l),
(516,716,o),
(437,764,o),
(322,764,cs),
(178,764,o),
(63,680,o),
(63,547,cs),
(63,423,o),
(241,318,o),
(269,295,cs),
(613,2,l)
);
},
{
closed = 1;
nodes = (
(128,399,o),
(27,332,o),
(27,209,cs),
(27,66,o),
(140,-15,o),
(271,-15,cs),
(432,-15,o),
(512,101,o),
(563,151,cs),
(626,213,o),
(673,276,o),
(731,357,c),
(635,426,l),
(597,374,o),
(532,290,o),
(464,222,cs),
(403,160,o),
(359,115,o),
(292,115,cs),
(227,115,o),
(177,156,o),
(177,217,cs),
(177,288,o),
(233,316,o),
(304,384,c),
(207,449,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 888;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "E2E89F10-38B3-4AFF-9463-DFBD5B1144A9";
name = "3 apr 22, 15:34";
shapes = (
{
closed = 1;
nodes = (
(818,0,l),
(299,411,ls),
(233,463,o),
(190,500,o),
(190,560,cs),
(190,614,o),
(230,652,o),
(302,652,cs),
(375,652,o),
(453,613,o),
(513,557,c),
(594,647,l),
(526,716,o),
(417,764,o),
(302,764,cs),
(158,764,o),
(51,688,o),
(51,556,cs),
(51,421,o),
(220,317,o),
(249,295,cs),
(623,2,l)
);
},
{
closed = 1;
nodes = (
(114,402,o),
(7,322,o),
(7,199,cs),
(7,66,o),
(120,-15,o),
(261,-15,cs),
(412,-15,o),
(522,101,o),
(573,151,cs),
(636,213,o),
(683,276,o),
(741,357,c),
(645,426,l),
(607,374,o),
(542,292,o),
(469,216,cs),
(396,140,o),
(339,108,o),
(272,108,cs),
(206,108,o),
(150,149,o),
(150,216,cs),
(150,287,o),
(198,316,o),
(284,384,c),
(193,452,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "95166D02-562D-4C8C-BBDF-613933A487BE";
name = "3 apr 22, 16:05";
shapes = (
{
closed = 1;
nodes = (
(871,124,o),
(717,0,o),
(476,0,cs),
(460,0,ls),
(159,0,o),
(80,78,o),
(80,206,cs),
(80,296,o),
(134,362,o),
(230,380,c),
(230,383,l),
(159,394,o),
(94,451,o),
(94,524,cs),
(94,637,o),
(173,701,o),
(350,701,cs),
(785,701,l),
(785,581,l),
(342,581,ls),
(279,581,o),
(253,552,o),
(253,514,cs),
(253,473,o),
(281,450,o),
(347,450,cs),
(978,450,l),
(978,320,l),
(461,320,ls),
(316,320,o),
(260,295,o),
(260,231,cs),
(260,165,o),
(296,140,o),
(471,140,cs),
(502,140,o),
(479,140,o),
(513,140,cs),
(644,140,o),
(705,193,o),
(705,315,cs),
(705,349,l),
(871,349,l),
(871,317,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1028;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "09A17C1C-9389-4897-A7B3-BDC0A34804C5";
name = "17 ott 22, 23:29";
shapes = (
{
closed = 1;
nodes = (
(900,334,l),
(745,334,l),
(745,318,ls),
(745,186,o),
(679,121,o),
(477,121,cs),
(465,121,o),
(456,121,o),
(445,121,cs),
(308,121,o),
(210,133,o),
(210,216,cs),
(210,280,o),
(261,305,o),
(441,305,cs),
(1008,305,l),
(1008,435,l),
(407,435,ls),
(254,435,o),
(203,456,o),
(203,503,cs),
(203,559,o),
(273,581,o),
(402,581,cs),
(568,581,o),
(671,549,o),
(744,498,c),
(816,617,l),
(723,669,o),
(596,715,o),
(440,715,cs),
(189,715,o),
(44,639,o),
(44,513,cs),
(44,440,o),
(109,379,o),
(180,368,c),
(180,366,l),
(84,348,o),
(30,271,o),
(30,201,cs),
(30,93,o),
(158,-19,o),
(427,-19,cs),
(462,-19,ls),
(758,-19,o),
(900,124,o),
(900,322,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
30 1 0 1 47 33 31 28 4 7 4 36 1 5 7 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 7 7 5 97 6 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
2 1 0 8 1 4 7 0 4 105 0 1 1 3 97 0 3 3 19 77 0 5 5 18 77 0 7 7 6 97 0 6 6 24 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 2 1 0 8 1 4 7 0 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 7 6 7 5 6 128 0 3 0 1 0 3 1 105 0 0 2 4 0 87 0 2 8 1 4 7 2 4 105 0 7 5 6 7 89 0 7 7 6 97 0 6 7 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 36 35 24 36 36 20 36 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1058;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,-200,l),
(386,700,l),
(351,700,l),
(351,-200,l)
);
},
{
closed = 1;
nodes = (
(286,-200,l),
(286,700,l),
(251,700,l),
(251,-200,l)
);
},
{
closed = 1;
nodes = (
(252,700,l),
(136,700,o),
(51,615,o),
(51,510,cs),
(51,404,o),
(136,319,o),
(252,319,c)
);
},
{
closed = 1;
nodes = (
(518,698,l),
(518,700,l),
(274,700,l),
(260,667,l),
(261,673,l),
(366,673,l),
(375,635,l),
(386,635,l)
);
}
);
width = 526;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(486,-200,l),
(486,700,l),
(351,700,l),
(351,-200,l)
);
},
{
closed = 1;
nodes = (
(286,-200,l),
(286,700,l),
(151,700,l),
(151,-200,l)
);
},
{
closed = 1;
nodes = (
(152,700,l),
(36,700,o),
(-49,615,o),
(-49,510,cs),
(-49,404,o),
(36,319,o),
(152,319,c)
);
}
);
width = 600;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,380,l),
(341,396,o),
(312,406,o),
(246,406,cs),
(129,406,o),
(60,354,o),
(60,287,cs),
(60,202,o),
(143,153,o),
(244,128,cs),
(363,98,ls),
(428,82,o),
(495,70,o),
(495,11,cs),
(495,-47,o),
(420,-82,o),
(340,-82,cs),
(221,-82,o),
(111,-2,o),
(45,110,c),
(40,108,l),
(114,-100,l),
(113,-100,l),
(168,-56,l),
(230,-93,o),
(271,-111,o),
(349,-111,cs),
(467,-111,o),
(568,-61,o),
(568,25,cs),
(568,109,o),
(486,150,o),
(403,169,cs),
(287,195,ls),
(226,209,o),
(136,232,o),
(136,298,cs),
(136,346,o),
(176,375,o),
(265,375,cs),
(300,375,o),
(327,369,o),
(363,356,c)
);
},
{
closed = 1;
nodes = (
(247,161,l),
(285,147,o),
(308,141,o),
(355,141,cs),
(472,141,o),
(573,191,o),
(573,277,cs),
(573,361,o),
(492,394,o),
(409,416,cs),
(292,447,ls),
(232,463,o),
(138,484,o),
(138,550,cs),
(138,598,o),
(182,627,o),
(271,627,cs),
(358,627,o),
(460,583,o),
(555,466,c),
(559,469,l),
(482,646,l),
(419,611,l),
(379,638,o),
(332,658,o),
(241,658,cs),
(135,658,o),
(63,606,o),
(63,539,cs),
(63,453,o),
(145,407,o),
(250,380,cs),
(368,350,ls),
(433,334,o),
(501,322,o),
(501,263,cs),
(501,204,o),
(425,170,o),
(346,170,cs),
(306,170,o),
(284,178,o),
(247,192,c)
);
}
);
width = 650;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(577,650,o),
(484,672,o),
(360,672,cs),
(177,672,o),
(55,614,o),
(55,507,cs),
(55,458,o),
(75,419,o),
(118,391,c),
(78,363,o),
(55,326,o),
(55,280,cs),
(55,187,o),
(130,132,o),
(295,116,cs),
(432,103,ls),
(515,95,o),
(556,85,o),
(556,56,cs),
(556,14,o),
(457,10,o),
(377,10,cs),
(283,10,o),
(185,33,o),
(100,81,c),
(51,-24,l),
(167,-79,o),
(271,-105,o),
(388,-105,cs),
(589,-105,o),
(704,-47,o),
(704,64,cs),
(704,111,o),
(681,147,o),
(638,172,c),
(681,204,o),
(704,247,o),
(704,301,cs),
(704,396,o),
(612,437,o),
(452,450,cs),
(317,461,ls),
(277,464,o),
(208,474,o),
(208,516,cs),
(208,562,o),
(290,560,o),
(341,560,cs),
(397,560,o),
(514,551,o),
(627,512,c),
(669,610,l)
);
},
{
closed = 1;
nodes = (
(208,326,o),
(237,345,o),
(268,350,c),
(432,332,ls),
(514,323,o),
(556,322,o),
(556,283,cs),
(556,243,o),
(522,223,o),
(481,216,c),
(317,234,ls),
(277,238,o),
(208,247,o),
(208,299,cs)
);
}
);
width = 767;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "8CE2FE75-C40C-43FE-AED7-13AD85A3B9E4";
name = "23 feb 22, 12:24";
shapes = (
{
closed = 1;
nodes = (
(542,669,o),
(446,694,o),
(342,694,cs),
(171,694,o),
(69,628,o),
(69,511,cs),
(69,403,o),
(145,360,o),
(269,339,cs),
(414,315,ls),
(476,305,o),
(521,297,o),
(521,246,cs),
(521,202,o),
(459,190,o),
(439,193,c),
(449,80,l),
(564,80,o),
(669,142,o),
(669,264,cs),
(669,374,o),
(576,415,o),
(434,439,cs),
(291,463,ls),
(261,468,o),
(230,484,o),
(230,522,cs),
(230,559,o),
(264,574,o),
(321,574,cs),
(379,574,o),
(479,554,o),
(592,513,c),
(634,627,l)
);
},
{
closed = 1;
nodes = (
(298,424,l),
(195,424,o),
(73,374,o),
(73,261,cs),
(73,164,o),
(149,117,o),
(273,96,cs),
(408,73,ls),
(481,61,o),
(523,58,o),
(523,21,cs),
(523,-27,o),
(443,-34,o),
(393,-34,cs),
(281,-34,o),
(203,-3,o),
(118,37,c),
(69,-73,l),
(185,-121,o),
(259,-148,o),
(403,-148,cs),
(548,-148,o),
(673,-98,o),
(673,30,cs),
(673,140,o),
(580,172,o),
(438,195,cs),
(295,218,ls),
(256,224,o),
(226,240,o),
(226,278,cs),
(226,322,o),
(268,338,o),
(279,338,c)
);
}
);
width = 767;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "6940D702-B129-4FE3-B13E-6D2D5C83A6A6";
name = "23 feb 22, 12:26";
shapes = (
{
closed = 1;
nodes = (
(360,455,l),
(177,445,o),
(55,387,o),
(55,280,cs),
(55,187,o),
(130,132,o),
(295,116,cs),
(432,103,ls),
(515,95,o),
(556,85,o),
(556,56,cs),
(556,14,o),
(457,10,o),
(377,10,cs),
(283,10,o),
(185,33,o),
(100,81,c),
(51,-24,l),
(167,-79,o),
(271,-105,o),
(388,-105,cs),
(589,-105,o),
(704,-47,o),
(704,64,cs),
(704,159,o),
(612,206,o),
(452,221,cs),
(317,234,ls),
(277,238,o),
(208,247,o),
(208,289,cs),
(208,335,o),
(290,343,o),
(341,343,c)
);
},
{
closed = 1;
nodes = (
(577,650,o),
(484,672,o),
(360,672,cs),
(177,672,o),
(55,614,o),
(55,507,cs),
(55,414,o),
(130,356,o),
(295,343,cs),
(432,332,ls),
(515,325,o),
(556,322,o),
(556,293,cs),
(556,241,o),
(457,227,o),
(377,227,c),
(388,112,l),
(589,112,o),
(704,180,o),
(704,301,cs),
(704,396,o),
(612,437,o),
(452,450,cs),
(317,461,ls),
(277,464,o),
(208,474,o),
(208,516,cs),
(208,562,o),
(290,560,o),
(341,560,cs),
(397,560,o),
(514,551,o),
(627,512,c),
(669,610,l)
);
}
);
width = 767;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(645,-15,o),
(802,134,o),
(802,349,cs),
(802,561,o),
(649,715,o),
(420,715,cs),
(195,715,o),
(37,564,o),
(37,349,cs),
(37,139,o),
(192,-15,o),
(420,-15,cs)
);
},
{
closed = 1;
nodes = (
(81,541,o),
(221,678,o),
(420,678,cs),
(620,678,o),
(758,542,o),
(758,349,cs),
(758,158,o),
(620,22,o),
(420,22,cs),
(220,22,o),
(81,160,o),
(81,349,cs)
);
},
{
closed = 1;
nodes = (
(580,381,l),
(613,448,l),
(573,503,o),
(509,544,o),
(422,544,cs),
(297,544,o),
(206,464,o),
(206,354,cs),
(206,233,o),
(308,157,o),
(424,157,cs),
(509,157,o),
(578,201,o),
(617,259,c),
(598,273,l),
(559,227,o),
(506,197,o),
(442,197,cs),
(343,197,o),
(279,263,o),
(279,364,cs),
(279,453,o),
(323,511,o),
(420,511,cs),
(510,511,o),
(553,458,o),
(577,381,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 72 values pushed */
55 54 39 38 4 6 5 1 76 0 0 0 3 4 0 3 105 0 4 0 5 6 4 5 105 0 6 0 7 2 6 7 105 0 2 1 1 2 89 0 2 2 1 97 8 1 1 2 1 81 0 0 59 57 51 49 44 42 36 34 28 26 20 18 0 15 0 14 38 9 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 792;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(837,-14,o),
(1036,134,o),
(1036,353,cs),
(1036,572,o),
(837,717,o),
(563,717,cs),
(289,717,o),
(90,572,o),
(90,353,cs),
(90,134,o),
(289,-14,o),
(563,-14,cs)
);
},
{
closed = 1;
nodes = (
(222,518,o),
(355,613,o),
(563,613,cs),
(771,613,o),
(904,518,o),
(904,353,cs),
(904,190,o),
(771,92,o),
(563,92,cs),
(355,92,o),
(222,190,o),
(222,353,cs)
);
},
{
pos = (299,185);
ref = c;
scale = (0.6922,0.6922);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 78 values pushed */
37 1 5 4 50 38 2 6 5 51 1 7 6 3 76 0 0 0 3 4 0 3 105 0 4 0 5 6 4 5 105 0 6 0 7 2 6 7 105 0 2 1 1 2 89 0 2 2 1 97 8 1 1 2 1 81 0 0 55 53 48 46 42 40 35 33 28 26 20 18 0 15 0 14 38 9 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 1126;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(405,274,o),
(500,365,o),
(500,495,cs),
(500,623,o),
(407,715,o),
(268,715,cs),
(133,715,o),
(37,625,o),
(37,495,cs),
(37,367,o),
(131,274,o),
(268,274,cs)
);
},
{
closed = 1;
nodes = (
(68,608,o),
(151,689,o),
(268,689,cs),
(387,689,o),
(469,609,o),
(469,495,cs),
(469,381,o),
(387,300,o),
(268,300,cs),
(150,300,o),
(68,382,o),
(68,495,cs)
);
},
{
closed = 1;
nodes = (
(269,496,l),
(303,496,l),
(362,412,l),
(411,391,l),
(411,390,l),
(311,390,l),
(311,391,l),
(329,410,l)
);
},
{
closed = 1;
nodes = (
(184,412,l),
(184,587,l),
(142,608,l),
(142,609,l),
(273,609,ls),
(333,609,o),
(377,590,o),
(377,546,cs),
(377,508,o),
(333,488,o),
(273,488,cs),
(217,488,l),
(217,412,l),
(260,391,l),
(260,390,l),
(142,390,l)
);
},
{
closed = 1;
nodes = (
(270,504,ls),
(305,504,o),
(341,515,o),
(341,547,cs),
(341,582,o),
(308,593,o),
(270,593,cs),
(217,593,l),
(217,504,l)
);
}
);
width = 537;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(466,294,o),
(583,389,o),
(583,529,cs),
(583,670,o),
(466,765,o),
(304,765,cs),
(142,765,o),
(25,670,o),
(25,529,cs),
(25,389,o),
(142,294,o),
(304,294,cs)
);
},
{
closed = 1;
nodes = (
(103,637,o),
(181,700,o),
(304,700,cs),
(426,700,o),
(505,637,o),
(505,529,cs),
(505,421,o),
(426,358,o),
(304,358,cs),
(181,358,o),
(103,421,o),
(103,529,cs)
);
},
{
closed = 1;
nodes = (
(248,502,l),
(248,430,l),
(192,430,l),
(192,645,l),
(321,646,ls),
(397,647,o),
(433,621,o),
(433,575,cs),
(433,515,o),
(375,502,o),
(321,502,cs)
);
},
{
closed = 1;
nodes = (
(326,545,ls),
(361,545,o),
(374,553,o),
(374,575,cs),
(374,597,o),
(361,603,o),
(326,603,cs),
(249,603,l),
(249,545,l)
);
},
{
closed = 1;
nodes = (
(280,538,l),
(347,538,l),
(430,432,l),
(430,430,l),
(365,430,l)
);
}
);
width = 600;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,680,l),
(223,680,l),
(223,340,l),
(142,297,l),
(142,296,l),
(359,296,l),
(359,297,l),
(278,340,l),
(278,680,l),
(393,680,l),
(491,525,l),
(492,526,l),
(450,713,l),
(448,713,l),
(407,700,l),
(94,700,l),
(53,713,l),
(52,713,l),
(11,525,l),
(10,525,l)
);
},
{
closed = 1;
nodes = (
(851,338,l),
(1031,662,l),
(1031,341,l),
(970,299,l),
(970,296,l),
(1146,296,l),
(1146,299,l),
(1084,341,l),
(1084,663,l),
(1162,699,l),
(1162,700,l),
(1023,700,l),
(834,360,l)
);
},
{
closed = 1;
nodes = (
(664,700,l),
(513,700,l),
(513,698,l),
(590,663,l),
(590,344,l),
(513,296,l),
(513,297,l),
(693,296,l),
(693,299,l),
(616,344,l),
(616,662,l),
(822,296,l),
(890,296,l)
);
}
);
width = 1187;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(272,655,l),
(272,298,l),
(390,298,l),
(390,655,l),
(593,655,l),
(593,750,l),
(70,750,l),
(70,655,l)
);
},
{
closed = 1;
nodes = (
(786,298,l),
(786,599,l),
(948,298,l),
(1031,298,l),
(1196,599,l),
(1196,298,l),
(1308,298,l),
(1308,750,l),
(1170,750,l),
(990,416,l),
(814,750,l),
(674,750,l),
(674,298,l)
);
}
);
width = 1378;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,479,o),
(284,526,o),
(284,597,cs),
(284,666,o),
(235,715,o),
(167,715,cs),
(100,715,o),
(50,668,o),
(50,597,cs),
(50,528,o),
(99,479,o),
(167,479,cs)
);
},
{
closed = 1;
nodes = (
(80,650,o),
(117,686,o),
(167,686,cs),
(216,686,o),
(254,651,o),
(254,597,cs),
(254,544,o),
(217,508,o),
(167,508,cs),
(118,508,o),
(80,543,o),
(80,597,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 0 0 21 19 15 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 334;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(333,460,o),
(406,524,o),
(406,613,cs),
(406,702,o),
(333,765,o),
(233,765,cs),
(133,765,o),
(60,702,o),
(60,613,cs),
(60,524,o),
(133,460,o),
(233,460,cs)
);
},
{
closed = 1;
nodes = (
(140,664,o),
(183,699,o),
(233,699,cs),
(283,699,o),
(326,664,o),
(326,613,cs),
(326,561,o),
(283,526,o),
(233,526,cs),
(183,526,o),
(140,561,o),
(140,613,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 0 0 25 23 19 17 0 15 0 14 38 5 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 466;
}
);
note = degree;
unicode = 176;
},
{
glyphname = bar;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,-150,l),
(86,751,l),
(51,751,l),
(51,-150,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 1 0 133 0 1 1 22 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 7 24 
CALL[ ]	/* CallFunction */";
};
width = 126;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(65,-170,l),
(210,-170,l),
(210,750,l),
(65,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 275;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (-6,466);
ref = bar;
scale = (1,0.3776);
},
{
pos = (-6,-94);
ref = bar;
scale = (1,0.3776);
}
);
width = 120;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-96);
ref = bar;
scale = (1,0.4375);
},
{
pos = (0,421);
ref = bar;
scale = (1,0.4375);
}
);
width = 255;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,515,l),
(194,515,l),
(84,647,l),
(85,647,l),
(119,498,l),
(85,339,l),
(84,339,l),
(194,481,l),
(286,481,l)
);
},
{
closed = 1;
nodes = (
(258,648,l),
(268,52,l),
(167,2,l),
(167,0,l),
(429,0,l),
(429,2,l),
(328,52,l),
(338,648,l),
(449,698,l),
(449,700,l),
(147,700,l),
(147,699,l)
);
},
{
closed = 1;
nodes = (
(402,481,l),
(512,339,l),
(511,339,l),
(477,498,l),
(511,647,l),
(512,647,l),
(402,515,l),
(310,515,l),
(310,481,l)
);
}
);
width = 600;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(253,0,l),
(388,0,l),
(388,750,l),
(253,750,l)
);
},
{
closed = 1;
nodes = (
(446,589,l),
(321,569,l),
(195,588,l),
(60,593,l),
(60,458,l),
(195,463,l),
(321,483,l),
(446,464,l),
(581,459,l),
(581,594,l)
);
}
);
width = 641;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,522,l),
(194,522,l),
(84,624,l),
(85,624,l),
(119,505,l),
(85,376,l),
(84,376,l),
(194,488,l),
(286,488,l)
);
},
{
closed = 1;
nodes = (
(258,648,l),
(268,52,l),
(167,2,l),
(167,0,l),
(429,0,l),
(429,2,l),
(328,52,l),
(338,648,l),
(449,698,l),
(449,700,l),
(147,700,l),
(147,699,l)
);
},
{
closed = 1;
nodes = (
(402,488,l),
(512,376,l),
(511,376,l),
(477,505,l),
(511,624,l),
(512,624,l),
(402,522,l),
(310,522,l),
(310,488,l)
);
},
{
closed = 1;
nodes = (
(286,232,l),
(194,232,l),
(84,334,l),
(85,334,l),
(119,215,l),
(85,86,l),
(84,86,l),
(194,198,l),
(286,198,l)
);
},
{
closed = 1;
nodes = (
(402,198,l),
(512,86,l),
(511,86,l),
(477,215,l),
(511,334,l),
(512,334,l),
(402,232,l),
(310,232,l),
(310,198,l)
);
}
);
width = 600;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(253,0,l),
(388,0,l),
(388,750,l),
(253,750,l)
);
},
{
closed = 1;
nodes = (
(446,589,l),
(321,569,l),
(195,588,l),
(60,593,l),
(60,458,l),
(195,463,l),
(321,483,l),
(446,464,l),
(581,459,l),
(581,594,l)
);
},
{
closed = 1;
nodes = (
(446,282,l),
(321,262,l),
(195,281,l),
(60,286,l),
(60,151,l),
(195,156,l),
(321,176,l),
(446,157,l),
(581,152,l),
(581,287,l)
);
}
);
width = 600;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = cent;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
closed = 1;
nodes = (
(369,-103,l),
(369,602,l),
(336,602,l),
(336,-103,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
32 1 3 2 41 40 36 35 10 9 3 2 8 0 3 19 16 2 1 0 3 76 31 30 2 2 74 18 17 2 1 73 0 3 3 2 97 0 2 2 26 77 0 0 0 1 97 0 1 1 27 1 78 46 43 39 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 676;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = c;
},
{
closed = 1;
nodes = (
(446,-118,l),
(446,617,l),
(338,617,l),
(338,-118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
10 8 2 5 0 35 20 14 11 4 2 5 30 26 21 3 3 2 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 0 1 133 0 4 3 4 134 0 5 5 0 97 0 0 0 26 77 0 2 2 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 1 133 0 4 3 4 134 0 0 0 5 2 0 5 105 0 2 2 3 97 0 3 3 27 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 1 133 0 4 3 4 134 0 0 0 5 2 0 5 105 0 2 2 3 97 0 3 3 24 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 1 133 0 4 3 4 134 0 0 0 5 2 0 5 105 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
40 18 37 41 18 34 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 703;
},
{
associatedMasterId = m01;
layerId = "C95FDA95-7F50-487E-A3F5-EB4452A254AC";
name = "14 feb 22, 12:08";
shapes = (
{
closed = 1;
nodes = (
(614,295,l),
(685,384,l),
(650,440,o),
(573,492,o),
(466,508,c),
(508,632,l),
(487,640,l),
(444,511,l),
(422,514,o),
(398,515,o),
(373,514,cs),
(250,511,o),
(147,460,o),
(92,381,cs),
(64,341,o),
(50,297,o),
(50,250,cs),
(44,133,o),
(134,33,o),
(272,-1,c),
(232,-120,l),
(252,-128,l),
(293,-6,l),
(321,-11,o),
(348,-14,o),
(373,-14,cs),
(489,-14,o),
(579,24,o),
(632,72,cs),
(659,95,o),
(678,118,o),
(689,141,c),
(674,158,l),
(662,123,o),
(615,78,o),
(539,49,cs),
(500,34,o),
(456,27,o),
(407,27,cs),
(372,27,o),
(339,32,o),
(309,43,c),
(459,487,l),
(543,458,o),
(590,386,o),
(610,295,c)
);
},
{
closed = 1;
nodes = (
(140,413,o),
(225,500,o),
(373,500,cs),
(398,500,o),
(419,498,o),
(438,493,c),
(289,50,l),
(201,87,o),
(140,163,o),
(140,250,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
32 1 3 2 41 40 36 35 10 9 3 2 8 0 3 19 16 2 1 0 3 76 31 30 2 2 74 18 17 2 1 73 0 3 3 2 97 0 2 2 26 77 0 0 0 1 97 0 1 1 27 1 78 46 43 39 36 4 7 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(458,73,o),
(559,175,o),
(559,300,cs),
(559,424,o),
(458,526,o),
(302,526,cs),
(146,526,o),
(45,424,o),
(45,300,cs),
(45,175,o),
(146,73,o),
(302,73,cs)
);
},
{
closed = 1;
nodes = (
(209,186,o),
(163,236,o),
(163,300,cs),
(163,363,o),
(209,413,o),
(302,413,cs),
(395,413,o),
(441,363,o),
(441,300,cs),
(441,236,o),
(395,186,o),
(302,186,cs)
);
},
{
closed = 1;
nodes = (
(224,461,l),
(105,580,l),
(22,496,l),
(133,385,l)
);
},
{
closed = 1;
nodes = (
(483,397,l),
(583,497,l),
(499,580,l),
(379,460,l)
);
},
{
closed = 1;
nodes = (
(380,138,l),
(499,19,l),
(582,103,l),
(467,218,l)
);
},
{
closed = 1;
nodes = (
(124,205,l),
(22,103,l),
(106,20,l),
(223,137,l)
);
}
);
width = 600;
},
{
layerId = m01;
name = Regular;
shapes = (
{
closed = 1;
nodes = (
(355,104,o),
(438,187,o),
(438,290,cs),
(438,392,o),
(355,475,o),
(252,475,cs),
(149,475,o),
(66,392,o),
(66,290,cs),
(66,187,o),
(149,104,o),
(252,104,cs)
);
},
{
closed = 1;
nodes = (
(165,134,o),
(102,203,o),
(102,290,cs),
(102,376,o),
(165,445,o),
(252,445,cs),
(338,445,o),
(402,376,o),
(402,290,cs),
(402,203,o),
(338,134,o),
(252,134,cs)
);
},
{
closed = 1;
nodes = (
(138,427,l),
(50,515,l),
(27,491,l),
(114,404,l)
);
},
{
closed = 1;
nodes = (
(379,393,l),
(478,492,l),
(454,515,l),
(355,416,l)
);
},
{
closed = 1;
nodes = (
(354,164,l),
(454,64,l),
(478,87,l),
(379,186,l)
);
},
{
closed = 1;
nodes = (
(122,183,l),
(27,88,l),
(50,64,l),
(145,159,l)
);
}
);
width = 502;
},
{
associatedMasterId = m01;
layerId = "2E5D864B-1BF5-45E2-B59E-42529E1CA00C";
name = "23 feb 22, 11:47";
shapes = (
{
closed = 1;
nodes = (
(371,84,o),
(454,167,o),
(454,270,cs),
(454,372,o),
(371,455,o),
(268,455,cs),
(165,455,o),
(82,372,o),
(82,270,cs),
(82,167,o),
(165,84,o),
(268,84,cs)
);
},
{
closed = 1;
nodes = (
(181,114,o),
(118,183,o),
(118,270,cs),
(118,356,o),
(181,425,o),
(268,425,cs),
(354,425,o),
(418,356,o),
(418,270,cs),
(418,183,o),
(354,114,o),
(268,114,cs)
);
},
{
closed = 1;
nodes = (
(494,67,l),
(66,495,l),
(43,471,l),
(470,44,l)
);
},
{
closed = 1;
nodes = (
(66,44,l),
(494,472,l),
(470,495,l),
(43,68,l)
);
}
);
width = 502;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (386,0);
},
{
name = top;
pos = (386,650);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,-93,l),
(323,750,l),
(291,750,l),
(291,-93,l)
);
},
{
closed = 1;
nodes = (
(425,-93,l),
(425,750,l),
(393,750,l),
(393,-93,l)
);
},
{
closed = 1;
nodes = (
(185,51,l),
(262,9,o),
(336,-15,o),
(431,-15,cs),
(552,-15,o),
(667,65,o),
(667,175,cs),
(667,280,o),
(559,339,o),
(463,365,cs),
(309,406,ls),
(229,427,o),
(148,476,o),
(148,560,cs),
(148,616,o),
(196,669,o),
(306,669,cs),
(422,669,o),
(535,613,o),
(659,455,c),
(666,455,l),
(548,682,l),
(508,629,l),
(435,676,o),
(372,700,o),
(277,700,cs),
(149,700,o),
(59,631,o),
(59,542,cs),
(59,435,o),
(158,361,o),
(278,329,cs),
(425,290,ls),
(534,261,o),
(577,215,o),
(577,154,cs),
(577,68,o),
(500,17,o),
(421,17,cs),
(261,17,o),
(129,99,o),
(38,267,c),
(30,268,l),
(125,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
29 24 21 3 4 3 77 67 61 60 55 53 43 42 41 28 27 22 20 16 15 15 5 4 54 44 5 2 4 1 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 1 0 134 0 3 0 4 5 3 4 105 0 2 2 19 77 0 5 5 1 97 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 134 0 3 0 4 5 3 4 105 0 5 0 1 0 5 1 105 0 2 2 19 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
76 74 59 57 33 31 26 25 34 19 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 717;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(56,104,l),
(187,39,o),
(322,2,o),
(497,2,cs),
(737,2,o),
(880,82,o),
(880,216,cs),
(880,353,o),
(769,412,o),
(593,422,cs),
(404,433,ls),
(303,439,o),
(266,459,o),
(266,501,cs),
(266,548,o),
(353,563,o),
(447,563,cs),
(593,563,o),
(691,543,o),
(792,484,c),
(846,615,l),
(735,671,o),
(604,702,o),
(461,702,cs),
(299,702,o),
(83,649,o),
(83,490,cs),
(83,359,o),
(206,297,o),
(368,285,cs),
(548,272,ls),
(651,265,o),
(702,263,o),
(702,214,cs),
(702,169,o),
(637,152,o),
(497,152,cs),
(334,152,o),
(225,181,o),
(109,246,c)
);
},
{
closed = 1;
nodes = (
(550,622,l),
(550,795,l),
(412,795,l),
(412,622,l)
);
},
{
closed = 1;
nodes = (
(550,-103,l),
(550,70,l),
(412,70,l),
(412,-103,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
14 1 9 1 18 15 2 4 9 33 2 2 11 0 32 1 5 11 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
14 1 9 1 18 15 2 8 9 33 2 2 11 0 32 1 5 11 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
14 1 9 3 18 15 2 8 9 33 2 2 11 10 32 1 5 11 4 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
8 1 4 10 1 0 11 4 0 106 0 2 0 6 2 6 99 0 9 9 1 97 3 1 1 1 19 77 12 1 11 11 5 97 7 1 5 5 27 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 9 4 1 9 105 8 1 4 10 1 0 11 4 0 106 0 2 0 6 2 6 99 12 1 11 11 5 97 7 1 5 5 27 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 0 9 8 1 9 105 0 8 4 0 8 89 0 4 10 1 0 11 4 0 106 0 2 0 6 2 6 99 12 1 11 11 5 97 7 1 5 5 27 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
3 1 1 0 9 8 1 9 105 0 8 4 0 8 89 0 4 10 1 0 11 4 0 106 0 2 0 6 2 6 99 12 1 11 11 5 97 7 1 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 1 0 9 8 1 9 105 0 8 0 0 10 8 0 105 0 4 0 10 11 4 10 106 0 2 0 6 2 6 99 0 3 3 19 77 12 1 11 11 5 97 7 1 5 5 24 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 0 9 8 1 9 105 0 8 0 0 10 8 0 105 0 4 0 10 11 4 10 106 12 1 11 7 1 5 6 11 5 105 0 2 0 6 2 6 99 0 3 3 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 3 1 9 1 3 9 128 0 2 1 6 2 87 0 1 0 9 8 1 9 105 0 8 0 0 10 8 0 105 0 4 0 10 11 4 10 106 12 1 11 7 1 5 6 11 5 105 0 2 2 6 95 0 6 2 6 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
41 41 41 47 41 47 46 45 38 37 21 17 17 21 22 17 17 20 19 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 953;
},
{
associatedMasterId = m01;
layerId = "62347931-3D74-48AF-A9BC-3C09E6FC29CB";
name = "14 feb 22, 12:08";
shapes = (
{
closed = 1;
nodes = (
(127,27,l),
(50,259,l),
(54,267,l),
(115.333,144.333,o),
(208.667,66,o),
(318,42,cs),
(322.667,40.667,o),
(329.667,39.333,o),
(339,38,c),
(339,19,l),
(334.333,19.667,o),
(327.333,21.333,o),
(318,24,c),
(318,369,l),
(339,362,l),
(339,276,l),
(318,282,ls),
(308,284.667,o),
(296.667,288.333,o),
(284,293,cs),
(152,341,o),
(76,392.667,o),
(76,482,cs),
(76,559.333,o),
(143,617,o),
(243,617,cs),
(264.333,617,o),
(289.333,613,o),
(318,605,cs),
(339,598,l),
(339,577,l),
(318,584,l),
(318,700,l),
(339,700,l),
(339,598,l),
(373.667,584.667,o),
(414.333,564.667,o),
(461,538,c),
(510,602,l),
(604,372,l),
(601,366,l),
(531.667,478,o),
(433.667,546.333,o),
(339,577,c),
(339,362,l),
(375,352,ls),
(472.333,325.333,o),
(528.833,307.167,o),
(573.5,258.5,cs),
(595.833,234.167,o),
(607,202.667,o),
(607,164,cs),
(607,45.333,o),
(528,12,o),
(408,12,cs),
(383.333,12,o),
(360.333,14.333,o),
(339,19,c),
(339,-71,l),
(318,-71,l),
(318,24,l),
(264.667,37.333,o),
(212,61.667,o),
(176,91,c)
);
},
{
closed = 1;
nodes = (
(135,443.516,o),
(191.019,411.909,o),
(315,370,cs),
(318,369,l),
(318,584,l),
(291.333,591.333,o),
(263.667,595,o),
(235,595,cs),
(176.333,595,o),
(135,560.667,o),
(135,502,cs)
);
},
{
closed = 1;
nodes = (
(360.333,34.667,o),
(379.667,33,o),
(397,33,cs),
(490.333,33,o),
(548,70,o),
(548,142,cs),
(548,191.333,o),
(514.833,219.833,o),
(471.5,236.5,cs),
(449.833,244.833,o),
(419,254.333,o),
(379,265,cs),
(339,276,l),
(339,38,l),
(339,38,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
29 24 21 3 4 3 77 67 61 60 55 53 43 42 41 28 27 22 20 16 15 15 5 4 54 44 5 2 4 1 5 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 0 1 0 134 0 3 0 4 5 3 4 105 0 2 2 19 77 0 5 5 1 97 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 134 0 3 0 4 5 3 4 105 0 5 0 1 0 5 1 105 0 2 2 19 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
76 74 59 57 33 31 26 25 34 19 6 7 24 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,23,o),
(206,134,o),
(206,355,cs),
(206,572,o),
(312,683,o),
(460,683,cs),
(578,683,o),
(673,620,o),
(766,466,c),
(770,467,l),
(715,697,l),
(713,697,l),
(668,634,l),
(607,686,o),
(544,715,o),
(443,715,cs),
(265,715,o),
(106,592,o),
(106,355,cs),
(106,123,o),
(275,-15,o),
(465,-15,cs),
(610,-15,o),
(719,70,o),
(775,207,c),
(748,218,l),
(694,94,o),
(598,23,o),
(492,23,cs)
);
},
{
closed = 1;
nodes = (
(0,369,l),
(525,369,l),
(525,402,l),
(0,402,l)
);
},
{
closed = 1;
nodes = (
(0,278,l),
(525,278,l),
(525,312,l),
(0,312,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
19 18 2 3 5 46 45 2 10 0 2 76 6 1 3 7 1 2 1 3 2 103 8 1 1 9 1 0 10 1 0 103 0 5 5 4 97 0 4 4 19 77 0 10 10 11 97 12 1 11 11 27 11 78 0 0 0 50 0 49 43 41 34 33 17 17 20 37 35 17 18 17 19 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 851;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (110,0);
ref = C;
},
{
closed = 1;
nodes = (
(50,382,l),
(606,382,l),
(626,482,l),
(70,482,l)
);
},
{
closed = 1;
nodes = (
(50,215,l),
(606,215,l),
(626,315,l),
(70,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
15 1 4 3 16 1 2 4 29 1 7 1 30 1 0 7 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 6 1 1 7 2 1 103 0 4 4 3 97 0 3 3 19 77 0 7 7 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 7 2 1 103 0 7 0 0 7 89 0 7 7 0 97 0 0 7 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 17 18 36 34 17 19 33 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 992;
},
{
associatedMasterId = m01;
layerId = "0FEB9866-C485-4D64-9789-6BB6CB4C6865";
name = "14 feb 22, 12:07";
shapes = (
{
closed = 1;
nodes = (
(496.824,-10,o),
(582.678,42.857,o),
(605,122,c),
(574,153,l),
(556.667,58.333,o),
(499.667,14,o),
(413,14,cs),
(377.667,14,o),
(348.667,20.333,o),
(326,33,cs),
(302,45,o),
(283.667,63.333,o),
(271,88,cs),
(258.333,112,o),
(249.333,138,o),
(244,166,cs),
(238,194,o),
(234.333,228.667,o),
(233,270,c),
(490,270,l),
(490,285,l),
(233,285,l),
(233,395,l),
(490,395,l),
(490,410,l),
(233,410,l),
(234.333,450.667,o),
(238,485.667,o),
(244,515,cs),
(262.667,617.667,o),
(315.667,667,o),
(413,667,cs),
(497,667,o),
(556.667,619,o),
(574,527,c),
(605,558,l),
(583.667,640.667,o),
(503.667,691,o),
(413,691,cs),
(318.333,691,o),
(243.167,637.167,o),
(198.5,552.5,cs),
(176.167,510.167,o),
(161.333,462.667,o),
(154,410,c),
(50,410,l),
(50,395,l),
(151,395,l),
(149,340,l),
(151,285,l),
(50,285,l),
(50,270,l),
(154,270,l),
(165.333,186,o),
(193.667,118.333,o),
(239,67,cs),
(284.333,15.667,o),
(342.333,-10,o),
(413,-10,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
19 18 2 3 5 46 45 2 10 0 2 76 6 1 3 7 1 2 1 3 2 103 8 1 1 9 1 0 10 1 0 103 0 5 5 4 97 0 4 4 19 77 0 10 10 11 97 12 1 11 11 27 11 78 0 0 0 50 0 49 43 41 34 33 17 17 20 37 35 17 18 17 19 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 655;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "CD607A15-2741-4EE2-9D86-2785CC9DF228";
name = "22 feb 22, 15:33";
shapes = (
{
closed = 1;
nodes = (
(1187,249,l),
(1049.667,175,o),
(914.333,138,o),
(781,138,cs),
(563.667,138,o),
(434,202,o),
(406,314,c),
(907,314,l),
(980,438,l),
(414,438,l),
(454,536.667,o),
(581,592,o),
(781,592,cs),
(916.333,592,o),
(1051.667,555,o),
(1187,481,c),
(1193,644,l),
(1062.333,710.667,o),
(927,742,o),
(763,742,cs),
(455,742,o),
(255.667,631.333,o),
(217,438,c),
(129,438,l),
(52,314,l),
(213,314,l),
(231.667,176.667,o),
(327.667,77.833,o),
(489,26.5,cs),
(569.667,0.833,o),
(664.667,-12,o),
(774,-12,cs),
(928.667,-12,o),
(1054.667,15.333,o),
(1192,86,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
15 1 4 3 16 1 2 4 29 1 7 1 30 1 0 7 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 6 1 1 7 2 1 103 0 4 4 3 97 0 3 3 19 77 0 7 7 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 3 0 4 2 3 4 105 5 1 2 6 1 1 7 2 1 103 0 7 0 0 7 89 0 7 7 0 97 0 0 7 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
34 17 18 36 34 17 19 33 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 1243;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = sterling;
lastChange = "2022-05-04 21:44:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,346,l),
(113,314,l),
(580,314,l),
(580,346,l)
);
},
{
closed = 1;
nodes = (
(239,420,o),
(239,556,cs),
(239,631,o),
(307,689,o),
(400,689,cs),
(557,689,o),
(563,552,o),
(571,468,c),
(647,534,l),
(634,617,o),
(545,715,o),
(402,715,cs),
(255,715,o),
(151,629,o),
(151,518,cs),
(151,392,o),
(281,309,o),
(281,162,cs),
(281,86,o),
(219,14,o),
(149,14,cs),
(117,14,o),
(90,30,o),
(90,68,cs),
(90,96,o),
(109,121,o),
(147,121,cs),
(244,121,o),
(414,-14,o),
(556,-14,cs),
(637,-14,o),
(677,45,o),
(677,127,cs),
(677,166,o),
(654,207,o),
(632,235,c),
(620,227,l),
(638,200,o),
(648,177,o),
(648,138,cs),
(648,89,o),
(610,57,o),
(564,57,cs),
(435,57,o),
(257,148,o),
(156,148,cs),
(94,148,o),
(50,118,o),
(50,65,cs),
(50,13,o),
(93,-16,o),
(149,-16,cs),
(262,-16,o),
(353,111,o),
(353,211,cs),
(353,367,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
37 36 2 3 5 72 71 2 1 2 86 62 17 4 4 8 11 3 76 6 1 3 7 1 2 1 3 2 103 0 1 0 11 8 1 11 105 0 5 5 4 97 0 4 4 19 77 0 8 8 0 97 12 9 2 0 0 27 77 0 10 10 0 97 12 9 2 0 0 27 0 78 0 0 90 88 84 82 0 79 0 78 40 17 30 39 38 17 21 38 38 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 727;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(36,0,l),
(713,0,l),
(713,125,l),
(278,125,l),
(300,144,o),
(322,173,o),
(322,228,cs),
(322,301,o),
(249,409,o),
(249,482,cs),
(249,561,o),
(319,601,o),
(410,601,cs),
(482,601,o),
(547,578,o),
(651,500,c),
(722,591,l),
(652,655,o),
(545,715,o),
(405,715,cs),
(225,715,o),
(92,642,o),
(85,498,cs),
(78,366,o),
(166,302,o),
(166,212,cs),
(166,132,o),
(124,125,o),
(83,125,cs),
(36,125,l)
);
},
{
closed = 1;
nodes = (
(40,379,l),
(40,251,l),
(616,251,l),
(616,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
29 1 5 4 30 1 3 5 58 1 8 2 46 11 2 9 8 59 10 2 0 1 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 8 2 9 2 8 9 128 0 1 9 0 9 1 0 128 6 1 3 7 1 2 8 3 2 103 0 5 5 4 97 0 4 4 19 77 0 9 9 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 2 9 2 8 9 128 0 1 9 0 9 1 0 128 0 4 0 5 3 4 5 105 6 1 3 7 1 2 8 3 2 103 0 9 1 0 9 89 0 9 9 0 97 0 0 9 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
56 54 38 17 21 37 37 17 25 36 32 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 770;
},
{
associatedMasterId = m01;
layerId = "8398AC92-7789-451D-BCF4-74505D379F16";
name = "14 feb 22, 12:12";
shapes = (
{
closed = 1;
nodes = (
(94,323,l),
(94,308,l),
(466,308,l),
(466,323,l)
);
},
{
closed = 1;
nodes = (
(220,418,o),
(220,552,cs),
(220,641,o),
(292,677,o),
(347,677,cs),
(445.667,677,o),
(481,593,o),
(489,513,c),
(530,558,l),
(518,637,o),
(432,691,o),
(347,691,cs),
(250,691,o),
(161,619,o),
(161,522,cs),
(161,391,o),
(269,293,o),
(269,150,cs),
(269,78,o),
(226,8,o),
(138,8,cs),
(100,8,o),
(65,27,o),
(65,65,cs),
(65,102,o),
(97,120,o),
(134,120,cs),
(230,120,o),
(347,-8,o),
(443,-8,cs),
(521,-8,o),
(559,49,o),
(559,127,cs),
(559,164.333,o),
(541.333,215,o),
(520,243,c),
(505,231,l),
(522.333,205.667,o),
(531,174.667,o),
(531,138,cs),
(531,80.667,o),
(505.667,52,o),
(455,52,cs),
(368,52,o),
(242,143,o),
(155,143,cs),
(100,143,o),
(50,118,o),
(50,65,cs),
(50,17,o),
(93,-10,o),
(141,-10,cs),
(247,-10,o),
(307,111,o),
(307,209,cs),
(307,347,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
37 36 2 3 5 72 71 2 1 2 86 62 17 4 4 8 11 3 76 6 1 3 7 1 2 1 3 2 103 0 1 0 11 8 1 11 105 0 5 5 4 97 0 4 4 19 77 0 8 8 0 97 12 9 2 0 0 27 77 0 10 10 0 97 12 9 2 0 0 27 0 78 0 0 90 88 84 82 0 79 0 78 40 17 30 39 38 17 21 38 38 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 609;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "BFACFDBC-D05A-47F3-B64A-D6CBA6751269";
name = "23 feb 22, 12:39";
shapes = (
{
closed = 1;
nodes = (
(956,201,l),
(866.667,147.667,o),
(814.667,131,o),
(740,131,cs),
(692,131,o),
(656.333,140,o),
(595,160,cs),
(527,180,o),
(488,191,o),
(432,191,cs),
(382.667,191,o),
(347.333,185.333,o),
(286,168,c),
(340,200.667,o),
(367,241.667,o),
(367,291,cs),
(367,295,o),
(366.333,301,o),
(365,309,c),
(765,309,l),
(765,438,l),
(313,438,l),
(306.333,454.667,o),
(303,468.667,o),
(303,480,cs),
(303,539.592,o),
(400.466,590,o),
(532,590,cs),
(674.667,590,o),
(778.667,556.333,o),
(896,471,c),
(901,637,l),
(790.333,710.333,o),
(687.333,742,o),
(522,742,cs),
(371.333,742,o),
(243.667,696,o),
(173,620,cs),
(137.667,582,o),
(120,539.667,o),
(120,493,cs),
(120,473.667,o),
(122,455.333,o),
(126,438,c),
(51,438,l),
(51,309,l),
(186,309,l),
(199.333,282.333,o),
(206,266.333,o),
(206,249,cs),
(206,229,o),
(194.833,210.667,o),
(172.5,194,cs),
(150.167,177.333,o),
(109.333,157.333,o),
(50,134,c),
(109,0,l),
(209,44,o),
(280.333,62,o),
(347,62,cs),
(409.667,62,o),
(460.667,49.333,o),
(542,24,cs),
(627.333,-1.333,o),
(674.333,-14,o),
(737,-14,cs),
(809,-14,o),
(883.333,7.667,o),
(960,51,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
29 1 5 4 30 1 3 5 58 1 8 2 46 11 2 9 8 59 10 2 0 1 5 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 8 2 9 2 8 9 128 0 1 9 0 9 1 0 128 6 1 3 7 1 2 8 3 2 103 0 5 5 4 97 0 4 4 19 77 0 9 9 0 97 0 0 0 24 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 2 9 2 8 9 128 0 1 9 0 9 1 0 128 0 4 0 5 3 4 5 105 6 1 3 7 1 2 8 3 2 103 0 9 1 0 9 89 0 9 9 0 97 0 0 9 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
56 54 38 17 21 37 37 17 25 36 32 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 1010;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(111,631,l),
(336,299,l),
(336,69,l),
(214,2,l),
(214,0,l),
(546,0,l),
(546,2,l),
(421,69,l),
(421,300,l),
(624,635,l),
(746,698,l),
(746,700,l),
(474,700,l),
(474,698,l),
(586,636,l),
(400,332,l),
(201,637,l),
(307,698,l),
(307,700,l),
(-17,700,l),
(-17,698,l)
);
},
{
closed = 1;
nodes = (
(150,299,l),
(596,299,l),
(596,332,l),
(150,332,l)
);
},
{
closed = 1;
nodes = (
(150,208,l),
(596,208,l),
(596,242,l),
(150,242,l)
);
}
);
width = 726;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(701,700,l),
(473,403,l),
(243,700,l),
(40,700,l),
(387,253,l),
(387,0,l),
(558,0,l),
(558,253,l),
(902,700,l)
);
},
{
closed = 1;
nodes = (
(160,391,l),
(160,293,l),
(439,293,l),
(439,391,l)
);
},
{
closed = 1;
nodes = (
(160,201,l),
(160,103,l),
(786,103,l),
(786,201,l)
);
},
{
closed = 1;
nodes = (
(507,391,l),
(507,293,l),
(786,293,l),
(786,391,l)
);
}
);
width = 942;
}
);
note = yen;
unicode = 165;
},
{
glyphname = plus;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,116,l),
(258,116,l),
(258,531,l),
(222,531,l)
);
},
{
closed = 1;
nodes = (
(35,339,l),
(35,306,l),
(445,306,l),
(445,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 2 3 133 0 0 1 0 134 4 1 2 1 1 2 87 4 1 2 2 1 95 5 1 1 2 1 79 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(680,271,l),
(680,399,l),
(60,399,l),
(60,271,l)
);
},
{
closed = 1;
nodes = (
(444,620,l),
(296,620,l),
(296,50,l),
(444,50,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
0 3 2 0 3 87 4 1 2 5 1 1 0 2 1 103 0 3 3 0 95 0 0 3 0 79 17 17 17 17 17 16 6 7 28 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,305,l),
(445,305,l),
(445,338,l),
(35,338,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(680,271,l),
(680,399,l),
(60,399,l),
(60,271,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,134,l),
(393,160,l),
(61,492,l),
(35,466,l)
);
},
{
closed = 1;
nodes = (
(35,160,l),
(61,134,l),
(393,466,l),
(367,492,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 428;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(505,51,l),
(603,149,l),
(425,328,l),
(603,506,l),
(505,604,l),
(327,426,l),
(148,604,l),
(50,506,l),
(229,328,l),
(50,149,l),
(148,51,l),
(327,230,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 653;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = minus;
},
{
closed = 1;
nodes = (
(270,422,o),
(290,443,o),
(290,469,cs),
(290,494,o),
(269,515,o),
(244,515,cs),
(218,515,o),
(198,494,o),
(198,469,cs),
(198,443,o),
(219,422,o),
(244,422,cs)
);
},
{
closed = 1;
nodes = (
(269,123,o),
(290,144,o),
(290,169,cs),
(290,195,o),
(269,216,o),
(244,216,cs),
(219,216,o),
(198,195,o),
(198,169,cs),
(198,144,o),
(219,123,o),
(244,123,cs)
);
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = minus;
}
);
width = 740;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-80);
ref = minus;
},
{
pos = (0,80);
ref = minus;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 0 2 1 0 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,89);
ref = minus;
},
{
pos = (0,-121);
ref = minus;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 0 2 1 0 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = equal;
},
{
closed = 1;
nodes = (
(95,153,l),
(120,133,l),
(365,479,l),
(340,499,l)
);
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = equal;
},
{
closed = 1;
nodes = (
(147,91,l),
(235,26,l),
(603,546,l),
(515,611,l)
);
}
);
width = 740;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,154,l),
(435,310,l),
(435,336,l),
(65,492,l),
(50,459,l),
(381,323,l),
(50,187,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(100,11,l),
(747,247,l),
(747,375,l),
(100,611,l),
(100,465,l),
(509,311,l),
(100,158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (481,0);
ref = greater;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 486;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (847,0);
ref = greater;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
5 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 847;
}
);
note = less;
unicode = 60;
},
{
glyphname = greaterequal;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,224,l),
(445,340,l),
(445,366,l),
(42,482,l),
(32,449,l),
(364,353,l),
(32,257,l)
);
},
{
pos = (0,-150);
ref = minus;
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(20,211,l),
(640,337,l),
(640,485,l),
(20,611,l),
(20,475,l),
(414,411,l),
(413,418,l),
(20,348,l)
);
},
{
closed = 1;
nodes = (
(640,21,l),
(640,149,l),
(20,149,l),
(20,21,l)
);
}
);
width = 650;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lessequal;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (477,0);
ref = greaterequal;
scale = (-1,1);
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (660,0);
ref = greaterequal;
scale = (-1,1);
}
);
width = 650;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = plusminus;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(222,222,l),
(258,222,l),
(258,501,l),
(222,501,l)
);
},
{
closed = 1;
nodes = (
(35,369,l),
(35,336,l),
(445,336,l),
(445,369,l)
);
},
{
pos = (0,-150);
ref = minus;
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(680,340,l),
(680,468,l),
(60,468,l),
(60,340,l)
);
},
{
closed = 1;
nodes = (
(444,611,l),
(296,611,l),
(296,201,l),
(444,201,l)
);
},
{
pos = (0,-245);
ref = minus;
}
);
width = 740;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = approxequal;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-15,-100);
ref = asciitilde;
},
{
alignment = -1;
pos = (-15,47);
ref = asciitilde;
}
);
width = 419;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,97);
ref = asciitilde;
},
{
pos = (0,-135);
ref = asciitilde;
}
);
width = 600;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = asciitilde;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,281,o),
(347,313,o),
(384,379,c),
(366,388,l),
(343,351,o),
(323,335,o),
(303,335,cs),
(269,335,o),
(181,374,o),
(136,374,cs),
(100,374,o),
(76,342,o),
(35,276,c),
(58,265,l),
(81,302,o),
(99,320,o),
(120,320,cs),
(156,320,o),
(242,281,o),
(285,281,cs)
);
}
);
width = 419;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(510,197,o),
(570,265,o),
(567,375,c),
(446,375,l),
(446,329,o),
(436,308,o),
(405,308,cs),
(354,308,o),
(248,375,o),
(165,375,cs),
(75,375,o),
(10,304,o),
(15,197,c),
(136,197,l),
(138,241,o),
(160,262,o),
(196,262,cs),
(234,262,o),
(352,197,o),
(422,197,cs)
);
}
);
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,117,l),
(445,117,l),
(445,333,l),
(409,333,l)
);
},
{
closed = 1;
nodes = (
(35,340,l),
(35,307,l),
(445,307,l),
(445,340,l)
);
}
);
width = 480;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(680,271,l),
(680,399,l),
(60,399,l),
(60,271,l)
);
},
{
closed = 1;
nodes = (
(534,25,l),
(682,25,l),
(682,399,l),
(534,399,l)
);
}
);
width = 740;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,321,l),
(252,705,l),
(226,705,l),
(50,321,l),
(73,311,l),
(238,676,l),
(405,311,l),
(405,311,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 13 values pushed */
5 2 2 0 73 0 0 0 118 19 1 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 478;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(551,310,l),
(710,310,l),
(464,767,l),
(336,767,l),
(90,310,l),
(251,310,l),
(400,590,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
6 1 0 1 1 76 0 1 0 1 133 2 1 0 0 118 17 17 16 3 7 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 800;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = percent;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,1,l),
(735,681,l),
(692,681,l),
(162,1,l)
);
},
{
closed = 1;
nodes = (
(320,364,o),
(399,435,o),
(399,534,cs),
(399,628,o),
(323,705,o),
(223,705,cs),
(127,705,o),
(50,632,o),
(50,534,cs),
(50,438,o),
(123,364,o),
(223,364,cs)
);
},
{
closed = 1;
nodes = (
(337,626,o),
(337,534,cs),
(337,445,o),
(313,392,o),
(224,392,cs),
(134,392,o),
(111,449,o),
(111,534,cs),
(111,626,o),
(143,678,o),
(224,678,cs),
(313,678,o)
);
},
{
closed = 1;
nodes = (
(800,-5,o),
(879,66,o),
(879,165,cs),
(879,259,o),
(803,336,o),
(703,336,cs),
(607,336,o),
(530,263,o),
(530,165,cs),
(530,69,o),
(603,-5,o),
(703,-5,cs)
);
},
{
closed = 1;
nodes = (
(817,257,o),
(817,165,cs),
(817,76,o),
(793,23,o),
(704,23,cs),
(614,23,o),
(591,80,o),
(591,165,cs),
(591,257,o),
(623,309,o),
(704,309,cs),
(793,309,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
29 1 3 5 3 1 0 3 28 1 7 8 3 76 25 1 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 0 0 4 3 0 105 0 4 0 1 6 4 1 105 0 6 0 9 8 6 9 105 0 5 5 2 97 0 2 2 19 77 0 8 8 7 97 0 7 7 27 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 2 0 5 3 2 5 105 0 3 0 0 4 3 0 105 0 4 0 1 6 4 1 105 0 6 0 9 8 6 9 105 0 8 8 7 97 0 7 7 27 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
76 74 38 38 40 38 42 34 38 38 32 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 929;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(471,1,l),
(1036,700,l),
(873,700,l),
(308,1,l)
);
},
{
pos = (20,17);
ref = zerosuperior;
},
{
pos = (740,-333);
ref = zerosuperior;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 10 1 1 8 2 1 105 0 3 3 0 97 4 1 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 8 8 5 97 7 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 8 8 5 97 7 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 5 5 18 77 0 8 8 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 5 5 18 77 0 8 8 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 8 7 8 5 7 128 0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 8 0 7 8 7 101 0 4 4 19 77 0 3 3 0 97 0 0 0 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 8 7 8 5 7 128 0 0 0 3 6 0 3 105 0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 8 0 7 8 7 101 0 4 4 19 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 59 57 53 51 46 44 38 36 32 31 29 28 25 23 19 17 0 15 0 14 38 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1345;
},
{
associatedMasterId = m01;
layerId = "E6249C28-C9D8-4A57-A1D6-BA0E67BCF7F4";
name = "17 feb 22, 12:18";
shapes = (
{
closed = 1;
nodes = (
(146,-4,l),
(167,-16,l),
(559,683,l),
(539,695,l),
(519,667.667,o),
(494.333,647,o),
(465,633,cs),
(434.333,617,o),
(406.667,609,o),
(382,609,cs),
(341.333,609,o),
(305.333,624.333,o),
(274,655,cs),
(251.333,677,o),
(223.667,688,o),
(191,688,cs),
(147.667,688,o),
(113.667,671.667,o),
(89,639,cs),
(63,606.333,o),
(50,565.667,o),
(50,517,cs),
(50,467.667,o),
(63,427,o),
(89,395,cs),
(113.667,362.333,o),
(147.667,346,o),
(191,346,cs),
(233.667,346,o),
(266.333,362.333,o),
(289,395,cs),
(311.667,427.667,o),
(323,468.333,o),
(323,517,cs),
(323,549,o),
(317.667,577.667,o),
(307,603,c),
(329.667,591.667,o),
(354.667,586,o),
(382,586,cs),
(426,586,o),
(466.333,600.333,o),
(503,629,c)
);
},
{
closed = 1;
nodes = (
(111,548.333,o),
(113,574,o),
(117,594,cs),
(120.333,613.333,o),
(128.333,630,o),
(141,644,cs),
(153,658,o),
(170,665,o),
(192,665,cs),
(226,665,o),
(252.333,651,o),
(271,623,cs),
(289,594.333,o),
(298,559,o),
(298,517,cs),
(298,474.333,o),
(289,439,o),
(271,411,cs),
(252.333,383,o),
(226,369,o),
(192,369,cs),
(160.667,369,o),
(139.333,381.667,o),
(128,407,cs),
(116.667,433,o),
(111,469.667,o),
(111,517,cs)
);
},
{
closed = 1;
nodes = (
(376,113.667,o),
(389,73,o),
(415,41,cs),
(441,8.333,o),
(475.333,-8,o),
(518,-8,cs),
(560,-8,o),
(592.333,8.333,o),
(615,41,cs),
(637.667,73.667,o),
(649,114.333,o),
(649,163,cs),
(649,211.667,o),
(637.667,252.333,o),
(615,285,cs),
(592.333,317.667,o),
(560,334,o),
(518,334,cs),
(475.333,334,o),
(441,317.667,o),
(415,285,cs),
(389,252.333,o),
(376,211.667,o),
(376,163,cs)
);
},
{
closed = 1;
nodes = (
(437,194.333,o),
(439,220,o),
(443,240,cs),
(446.333,259.333,o),
(454.333,276,o),
(467,290,cs),
(479,304,o),
(496,311,o),
(518,311,cs),
(552,311,o),
(578.333,297,o),
(597,269,cs),
(615,240.333,o),
(624,205,o),
(624,163,cs),
(624,120.333,o),
(615,85,o),
(597,57,cs),
(578.333,29,o),
(552,15,o),
(518,15,cs),
(486.667,15,o),
(465.333,27.667,o),
(454,53,cs),
(442.667,79,o),
(437,115.667,o),
(437,163,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
29 1 3 5 3 1 0 3 28 1 7 8 3 76 25 1 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 0 0 4 3 0 105 0 4 0 1 6 4 1 105 0 6 0 9 8 6 9 105 0 5 5 2 97 0 2 2 19 77 0 8 8 7 97 0 7 7 27 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 2 0 5 3 2 5 105 0 3 0 0 4 3 0 105 0 4 0 1 6 4 1 105 0 6 0 9 8 6 9 105 0 8 8 7 97 0 7 7 27 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
76 74 38 38 40 38 42 34 38 38 32 10 7 31 
CALL[ ]	/* CallFunction */";
};
width = 699;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "8AE57529-3B30-4FC7-A105-53B39FADF5D9";
name = "23 feb 22, 12:52";
shapes = (
{
closed = 1;
nodes = (
(581.961,248,o),
(706,344.58,o),
(706,494,cs),
(706,645.51,o),
(582.082,740,o),
(378,740,cs),
(173.123,740,o),
(50,646.711,o),
(50,494,cs),
(50,391.333,o),
(105.333,316.833,o),
(204,277.5,cs),
(253.333,257.833,o),
(311.333,248,o),
(378,248,cs)
);
},
{
closed = 1;
nodes = (
(179,583.333,o),
(255.333,632,o),
(378,632,cs),
(500.667,632,o),
(576,584.667,o),
(576,494,cs),
(576,404.667,o),
(500.667,356,o),
(378,356,cs),
(255.333,356,o),
(179,404.667,o),
(179,494,cs)
);
},
{
closed = 1;
nodes = (
(618,0,l),
(1182,718,l),
(1179,722,l),
(1030,722,l),
(466,4,l)
);
},
{
closed = 1;
nodes = (
(951,131.333,o),
(1006.333,56.833,o),
(1105,17.5,cs),
(1154.333,-2.167,o),
(1212.333,-12,o),
(1279,-12,cs),
(1482.961,-12,o),
(1607,84.58,o),
(1607,234,cs),
(1607,385.51,o),
(1483.082,480,o),
(1279,480,cs),
(1074.123,480,o),
(951,386.711,o),
(951,234,cs)
);
},
{
closed = 1;
nodes = (
(1080,323.333,o),
(1156.333,372,o),
(1279,372,cs),
(1401.667,372,o),
(1477,324.667,o),
(1477,234,cs),
(1477,144.667,o),
(1401.667,96,o),
(1279,96,cs),
(1156.333,96,o),
(1080,144.667,o),
(1080,234,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 10 1 1 8 2 1 105 0 3 3 0 97 4 1 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 8 8 5 97 7 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 8 8 5 97 7 1 5 5 18 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 9 9 6 97 0 6 6 20 77 0 5 5 18 77 0 8 8 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 4 4 19 77 0 3 3 0 97 0 0 0 19 77 0 5 5 18 77 0 8 8 7 97 0 7 7 24 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
49 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 8 7 8 5 7 128 0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 8 0 7 8 7 101 0 4 4 19 77 0 3 3 0 97 0 0 0 19 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 8 7 8 5 7 128 0 0 0 3 6 0 3 105 0 6 0 9 2 6 9 105 0 2 10 1 1 8 2 1 105 0 8 0 7 8 7 101 0 4 4 19 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 59 57 53 51 46 44 38 36 32 31 29 28 25 23 19 17 0 15 0 14 38 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 1657;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,1,l),
(735,681,l),
(692,681,l),
(162,1,l)
);
},
{
closed = 1;
nodes = (
(381,380,o),
(453,444,o),
(453,534,cs),
(453,620,o),
(384,690,o),
(293,690,cs),
(206,690,o),
(136,623,o),
(136,534,cs),
(136,447,o),
(202,380,o),
(293,380,cs)
);
},
{
closed = 1;
nodes = (
(397,618,o),
(397,534,cs),
(397,453,o),
(375,405,o),
(294,405,cs),
(212,405,o),
(191,457,o),
(191,534,cs),
(191,618,o),
(220,665,o),
(294,665,cs),
(375,665,o)
);
},
{
closed = 1;
nodes = (
(681,-9,o),
(753,55,o),
(753,145,cs),
(753,231,o),
(684,301,o),
(593,301,cs),
(506,301,o),
(436,234,o),
(436,145,cs),
(436,58,o),
(502,-9,o),
(593,-9,cs)
);
},
{
closed = 1;
nodes = (
(697,229,o),
(697,145,cs),
(697,64,o),
(675,16,o),
(594,16,cs),
(512,16,o),
(491,68,o),
(491,145,cs),
(491,229,o),
(520,276,o),
(594,276,cs),
(675,276,o)
);
},
{
closed = 1;
nodes = (
(1041,-9,o),
(1113,55,o),
(1113,145,cs),
(1113,231,o),
(1044,301,o),
(953,301,cs),
(866,301,o),
(796,234,o),
(796,145,cs),
(796,58,o),
(862,-9,o),
(953,-9,cs)
);
},
{
closed = 1;
nodes = (
(1057,229,o),
(1057,145,cs),
(1057,64,o),
(1035,16,o),
(954,16,cs),
(872,16,o),
(851,68,o),
(851,145,cs),
(851,229,o),
(880,276,o),
(954,276,cs),
(1035,276,o)
);
}
);
width = 929;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(337,1,l),
(902,700,l),
(739,700,l),
(174,1,l)
);
},
{
pos = (47,135);
ref = zerosuperior;
scale = (0.8264,0.8264);
},
{
pos = (557,-265);
ref = zerosuperior;
scale = (0.8264,0.8264);
},
{
pos = (1034,-265);
ref = zerosuperior;
scale = (0.8264,0.8264);
}
);
width = 1554;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = gravecomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (163,500);
},
{
name = top;
pos = (163,876);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(121,721,ls),
(104,734,o),
(93,741,o),
(79,741,cs),
(57,741,o),
(48,725,o),
(48,711,cs),
(48,690,o),
(64,679,o),
(83,671,cs),
(257,596,l),
(266,608,l)
);
}
);
width = 325;
},
{
anchors = (
{
name = _top;
pos = (270,500);
},
{
name = top;
pos = (206,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(243,740,l),
(42,740,l),
(40,737,l),
(202,571,l),
(360,571,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 4 33 3 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 412;
}
);
note = grave;
unicode = 768;
},
{
glyphname = acutecomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (123,500);
},
{
name = top;
pos = (163,876);
}
);
layerId = m01;
shapes = (
{
pos = (325,0);
ref = gravecomb;
scale = (-1,1);
}
);
width = 325;
},
{
anchors = (
{
name = _top;
pos = (135,500);
},
{
name = top;
pos = (206,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (412,0);
ref = gravecomb;
scale = (-1,1);
}
);
width = 412;
}
);
note = acute;
unicode = 769;
},
{
glyphname = tildecomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (191,500);
},
{
name = top;
pos = (191,687);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,608,o),
(302,630,o),
(342,696,c),
(324,707,l),
(299,670,o),
(284,658,o),
(264,658,cs),
(227,658,o),
(179,696,o),
(139,696,cs),
(105,696,o),
(81,675,o),
(41,610,c),
(59,599,l),
(82,635,o),
(96,647,o),
(113,647,cs),
(151,647,o),
(200,608,o),
(240,608,cs)
);
}
);
width = 392;
},
{
anchors = (
{
name = _top;
pos = (366,500);
},
{
name = top;
pos = (366,728);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(550,571,o),
(610,637,o),
(607,739,c),
(486,739,l),
(486,701,o),
(476,680,o),
(447,680,cs),
(394,680,o),
(358,745,o),
(275,745,cs),
(185,745,o),
(120,677,o),
(125,576,c),
(246,576,l),
(248,614,o),
(270,636,o),
(293,636,cs),
(344,636,o),
(392,571,o),
(462,571,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 0 1 3 89 4 1 2 0 0 1 2 0 105 0 3 3 1 98 6 5 2 1 3 1 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 2 3 2 4 3 128 0 3 0 1 3 89 0 2 0 0 1 2 0 105 0 3 3 1 98 6 5 2 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 4 2 3 2 4 3 128 0 1 0 5 0 1 5 128 0 3 0 5 3 89 0 2 0 0 1 2 0 105 0 3 3 5 98 6 1 5 3 5 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 28 0 27 34 36 35 34 36 7 7 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 732;
}
);
note = tilde;
unicode = 771;
},
{
glyphname = dieresis;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = dieresiscomb;
}
);
width = 363;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = dieresiscomb;
}
);
width = 526;
}
);
unicode = 168;
},
{
glyphname = dotaccent;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = dotaccentcomb;
}
);
width = 200;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = dotaccentcomb;
}
);
width = 278;
}
);
unicode = 729;
},
{
glyphname = grave;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = gravecomb;
}
);
width = 325;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = gravecomb;
}
);
width = 600;
}
);
unicode = 96;
},
{
glyphname = acute;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = acutecomb;
}
);
width = 325;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = acutecomb;
}
);
width = 429;
}
);
unicode = 180;
},
{
glyphname = hungarumlaut;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = hungarumlautcomb;
}
);
width = 501;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = hungarumlautcomb;
}
);
width = 716;
}
);
unicode = 733;
},
{
glyphname = circumflex;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = circumflexcomb;
}
);
width = 336;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = circumflexcomb;
}
);
width = 776;
}
);
unicode = 710;
},
{
glyphname = caron;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = caroncomb;
}
);
width = 336;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = caroncomb;
}
);
width = 787;
}
);
unicode = 711;
},
{
glyphname = breve;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = brevecomb;
}
);
width = 368;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = brevecomb;
}
);
width = 692;
}
);
unicode = 728;
},
{
glyphname = ring;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = ringcomb;
}
);
width = 268;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = ringcomb;
}
);
width = 518;
}
);
unicode = 730;
},
{
glyphname = tilde;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = tildecomb;
}
);
width = 392;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = tildecomb;
}
);
width = 732;
}
);
unicode = 732;
},
{
glyphname = macron;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = macroncomb;
}
);
width = 345;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = macroncomb;
}
);
width = 662;
}
);
unicode = 175;
},
{
glyphname = cedilla;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = cedillacomb;
}
);
width = 290;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = cedillacomb;
}
);
width = 389;
}
);
unicode = 184;
},
{
glyphname = ogonek;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = ogonekcomb;
}
);
width = 299;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = ogonekcomb;
}
);
width = 430;
}
);
unicode = 731;
},
{
glyphname = Cdotaccent;
kernLeft = C;
kernRight = C;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = C;
},
{
pos = (330,200);
ref = dotaccentcomb;
}
);
width = 819;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = C;
},
{
pos = (300,200);
ref = dotaccentcomb;
}
);
width = 882;
}
);
unicode = 266;
},
{
glyphname = Schwa;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (416,200);
},
{
name = ogonek;
pos = (276,690);
},
{
name = top;
pos = (416,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(679,146,o),
(578,17,o),
(426,17,cs),
(260,17,o),
(162,136,o),
(162,326,c),
(690,326,l),
(689,355,l),
(54,355,l),
(54,128,o),
(194,-14,o),
(426,-14,cs),
(642,-14,o),
(784,126,o),
(784,350,cs),
(784,574,o),
(605,714,o),
(411,714,cs),
(291,714,o),
(161,654,o),
(107,575,c),
(131,557,l),
(177,620,o),
(284,673,o),
(378,673,cs),
(537,673,o),
(679,566,o),
(679,352,cs)
);
}
);
width = 838;
},
{
anchors = (
{
name = bottom;
pos = (256,200);
},
{
name = ogonek;
pos = (43,690);
},
{
name = top;
pos = (256,700);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(861,364,cs),
(861,168,o),
(736,123,o),
(586,123,cs),
(431,123,o),
(272,145,o),
(272,302,c),
(882,302,l),
(882,419,l),
(90,419,l),
(90,359,ls),
(90,190,o),
(223,-16,o),
(572,-16,cs),
(895,-16,o),
(1045,170,o),
(1045,348,cs),
(1045,551,o),
(850,715,o),
(557,715,cs),
(417,715,o),
(275,660,o),
(212,604,c),
(300,472,l),
(350,543,o),
(458,574,o),
(557,574,cs),
(801,574,o),
(861,464,o)
);
}
);
width = 1095;
}
);
metricLeft = "=O";
metricRight = "=O";
unicode = 399;
},
{
glyphname = Gcommaaccent;
kernLeft = G;
kernRight = G;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (329,0);
ref = commaaccentcomb;
}
);
width = 873;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = G;
},
{
pos = (381,-20);
ref = commaaccentcomb;
}
);
width = 951;
}
);
unicode = 290;
},
{
glyphname = Gdotaccent;
kernLeft = G;
kernRight = G;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = G;
},
{
pos = (331,150);
ref = dotaccentcomb;
}
);
width = 873;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = G;
},
{
pos = (337,200);
ref = dotaccentcomb;
}
);
width = 951;
}
);
unicode = 288;
},
{
glyphname = Hbar;
kernLeft = H;
kernRight = H;
lastChange = "2022-04-09 17:04:11 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(708,72,l),
(598,4,l),
(598,0,l),
(899,0,l),
(899,4,l),
(791,72,l),
(791,628,l),
(899,699,l),
(899,700,l),
(598,700,l),
(598,699,l),
(708,628,l)
);
},
{
closed = 1;
nodes = (
(233,628,l),
(341,696,l),
(341,700,l),
(40,700,l),
(40,696,l),
(150,628,l),
(150,72,l),
(40,4,l),
(40,0,l),
(341,0,l),
(341,4,l),
(233,72,l)
);
},
{
closed = 1;
nodes = (
(715,381,l),
(226,381,l),
(226,349,l),
(715,349,l)
);
},
{
closed = 1;
nodes = (
(880,521,l),
(61,521,l),
(61,489,l),
(880,489,l)
);
}
);
width = 939;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (74,0);
ref = H;
},
{
closed = 1;
nodes = (
(100,519,l),
(1090,519,l),
(1090,619,l),
(100,619,l)
);
}
);
width = 1190;
}
);
metricLeft = "=H";
metricRight = "=H";
unicode = 294;
},
{
glyphname = Kcommaaccent;
kernLeft = K;
kernRight = K;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = K;
},
{
pos = (322,0);
ref = commaaccentcomb;
}
);
width = 810;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = K;
},
{
pos = (352,-20);
ref = commaaccentcomb;
}
);
width = 944;
}
);
unicode = 310;
},
{
glyphname = Lcommaaccent;
kernLeft = L;
kernRight = L;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = L;
},
{
pos = (289,0);
ref = commaaccentcomb;
}
);
width = 758;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = L;
},
{
pos = (308,-20);
ref = commaaccentcomb;
}
);
width = 806;
}
);
unicode = 315;
},
{
glyphname = Ncommaaccent;
kernLeft = N;
kernRight = N;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = N;
},
{
pos = (356,0);
ref = commaaccentcomb;
}
);
width = 915;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = N;
},
{
pos = (383,-20);
ref = commaaccentcomb;
}
);
width = 1025;
}
);
unicode = 325;
},
{
glyphname = Rcommaaccent;
kernLeft = R;
kernRight = R;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = R;
},
{
pos = (329,0);
ref = commaaccentcomb;
}
);
width = 863;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = R;
},
{
pos = (362,-20);
ref = commaaccentcomb;
}
);
width = 973;
}
);
unicode = 342;
},
{
glyphname = Scommaaccent;
kernLeft = S;
kernRight = S;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = S;
},
{
pos = (336,-5);
ref = commaaccentcomb;
}
);
width = 768;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = S;
},
{
pos = (322,-20);
ref = commaaccentcomb;
}
);
width = 913;
}
);
unicode = 536;
},
{
glyphname = Germandbls;
kernLeft = H;
kernRight = B;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,700,l),
(138,636,l),
(138,65,l),
(24,2,l),
(24,0,l),
(323,0,l),
(323,2,l),
(220,65,l),
(220,671,l),
(577,671,l),
(316,355,l),
(341,340,l),
(368,378,o),
(426,403,o),
(491,403,cs),
(569,403,o),
(643,349,o),
(643,216,cs),
(643,91,o),
(581,19,o),
(491,19,cs),
(432,19,o),
(383,41,o),
(352,95,c),
(331,81,l),
(367,16,o),
(431,-13,o),
(502,-13,cs),
(629,-13,o),
(740,72,o),
(740,221,cs),
(740,362,o),
(642,437,o),
(517,437,cs),
(460,437,o),
(416,420,o),
(366,391,c),
(385,391,l),
(603,642,l),
(722,699,l),
(722,700,l)
);
}
);
width = 760;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(593,378,l),
(846,573,l),
(846,700,l),
(344,700,ls),
(150,700,o),
(60,570,o),
(60,408,cs),
(60,0,l),
(225,0,l),
(222,398,ls),
(221,534,o),
(294,573,o),
(428,573,cs),
(665,573,l),
(404,380,l)
);
},
{
closed = 1;
nodes = (
(500,286,o),
(534,302,o),
(597,302,cs),
(687,302,o),
(741,273,o),
(741,201,cs),
(741,137,o),
(687,101,o),
(597,101,cs),
(528,101,o),
(498,117,o),
(466,138,c),
(413,41,l),
(454,9,o),
(510,-15,o),
(605,-15,cs),
(776,-15,o),
(888,77,o),
(888,201,cs),
(888,323,o),
(777,415,o),
(606,415,cs),
(512,415,o),
(446,411,o),
(404,381,c),
(466,264,l)
);
}
);
width = 948;
}
);
unicode = 7838;
},
{
glyphname = Tcedilla;
kernLeft = T;
kernRight = T;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (289,0);
ref = cedillacomb;
}
);
width = 812;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = T;
},
{
alignment = -1;
pos = (271,-4);
ref = cedillacomb;
}
);
width = 930;
}
);
unicode = 354;
},
{
glyphname = Tcommaaccent;
kernLeft = T;
kernRight = T;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = T;
},
{
pos = (304,0);
ref = commaaccentcomb;
}
);
width = 812;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = T;
},
{
pos = (330,-20);
ref = commaaccentcomb;
}
);
width = 930;
}
);
unicode = 538;
},
{
glyphname = cdotaccent;
kernLeft = c;
kernRight = c;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = c;
},
{
pos = (229,0);
ref = dotaccentcomb;
}
);
width = 656;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = c;
},
{
pos = (243,0);
ref = dotaccentcomb;
}
);
width = 703;
}
);
unicode = 267;
},
{
glyphname = schwa;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
angle = 180;
pos = (682,500);
ref = e;
}
);
width = 682;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (798,500);
ref = e;
}
);
width = 798;
}
);
unicode = 601;
},
{
glyphname = gcommaaccent;
kernLeft = g;
kernRight = g;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (252,0);
ref = commaturnedabovecomb;
}
);
width = 707;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = g;
},
{
alignment = -1;
pos = (259,0);
ref = commaturnedabovecomb;
}
);
width = 800;
}
);
unicode = 291;
},
{
glyphname = gdotaccent;
kernLeft = g;
kernRight = g;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = g;
},
{
pos = (254,0);
ref = dotaccentcomb;
}
);
width = 707;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = g;
},
{
pos = (231,0);
ref = dotaccentcomb;
}
);
width = 800;
}
);
unicode = 289;
},
{
glyphname = hbar;
kernLeft = h;
kernRight = h;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = h;
},
{
closed = 1;
nodes = (
(418,623,l),
(39,623,l),
(39,591,l),
(418,591,l)
);
}
);
width = 820;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (59,0);
ref = h;
},
{
closed = 1;
nodes = (
(55,569,l),
(525,569,l),
(525,669,l),
(55,669,l)
);
}
);
width = 887;
}
);
metricLeft = "=h";
metricRight = "=h";
unicode = 295;
},
{
glyphname = idotless;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (192,0);
},
{
name = ogonek;
pos = (259,0);
},
{
name = top;
pos = (181,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,434,l),
(155,65,l),
(40,2,l),
(40,0,l),
(343,0,l),
(343,2,l),
(230,65,l),
(230,500,l),
(40,500,l),
(40,499,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
7 6 1 3 0 1 1 76 2 1 1 1 20 77 0 0 0 21 0 78 0 0 0 9 0 8 34 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 383;
},
{
anchors = (
{
name = bottom;
pos = (169,0);
},
{
name = ogonek;
pos = (258,0);
},
{
name = top;
pos = (169,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(80,0,l),
(258,0,l),
(258,500,l),
(80,500,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 20 77 0 0 0 18 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 18 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 338;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = idotaccent;
kernLeft = i;
kernRight = i;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = idotless;
},
{
pos = (81,0);
ref = dotaccentcomb;
}
);
width = 383;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = idotless;
},
{
pos = (30,0);
ref = dotaccentcomb;
}
);
width = 338;
}
);
},
{
glyphname = jdotless;
kernLeft = j;
kernRight = j;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (221,-200);
},
{
name = top;
pos = (286,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,-58,l),
(19,-58,l),
(33,-166,o),
(84,-226,o),
(147,-226,cs),
(217,-226,o),
(247,-143,o),
(247,-34,cs),
(247,437,l),
(84,498,l),
(84,500,l),
(327,500,l),
(327,-24,ls),
(327,-155,o),
(271,-250,o),
(142,-250,cs),
(86,-250,o),
(17,-225,o),
(-42,-131,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
18 16 9 3 2 1 1 76 0 1 1 20 77 0 2 2 0 97 0 0 0 22 0 78 37 19 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 441;
},
{
anchors = (
{
name = bottom;
pos = (300,-270);
},
{
name = top;
pos = (290,500);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(378,500,l),
(200,500,l),
(200,26,ls),
(200,-59,o),
(160,-106,o),
(51,-100,c),
(53,-250,l),
(273,-250,o),
(378,-184,o),
(378,34,cs)
);
}
);
width = 428;
},
{
anchors = (
{
name = bottom;
pos = (221,-200);
},
{
name = top;
pos = (342,500);
}
);
associatedMasterId = m01;
layerId = "C70B60B7-3843-4C5E-B71A-690B5F390B41";
name = "11 feb 22, 17:27";
shapes = (
{
closed = 1;
nodes = (
(45,-14,l),
(47,-14,l),
(71,-106,o),
(122,-172,o),
(191,-172,cs),
(271,-172,o),
(307,-93.333,o),
(307,36,cs),
(307,435,l),
(144,498,l),
(144,500,l),
(387,500,l),
(387,46,ls),
(387,-104.667,o),
(315,-200,o),
(191,-200,cs),
(110,-200,o),
(65,-175,o),
(0,-95,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
18 16 9 3 2 1 1 76 0 1 1 20 77 0 2 2 0 97 0 0 0 22 0 78 37 19 33 3 7 25 
CALL[ ]	/* CallFunction */";
};
width = 441;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = kcommaaccent;
kernLeft = k;
kernRight = k;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = k;
},
{
pos = (284,0);
ref = commaaccentcomb;
}
);
width = 767;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = k;
},
{
pos = (223,-20);
ref = commaaccentcomb;
}
);
width = 731;
}
);
unicode = 311;
},
{
glyphname = lcommaaccent;
kernLeft = l;
kernRight = l;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = l;
},
{
pos = (89,0);
ref = commaaccentcomb;
}
);
width = 374;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = l;
},
{
pos = (25,-20);
ref = commaaccentcomb;
}
);
width = 303;
}
);
unicode = 316;
},
{
glyphname = ncommaaccent;
kernLeft = n;
kernRight = n;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = n;
},
{
pos = (319,0);
ref = commaaccentcomb;
}
);
width = 825;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = n;
},
{
pos = (307,-20);
ref = commaaccentcomb;
}
);
width = 833;
}
);
unicode = 326;
},
{
glyphname = rcommaaccent;
kernLeft = r;
kernRight = r;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = r;
},
{
pos = (85,0);
ref = commaaccentcomb;
}
);
width = 627;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = r;
},
{
pos = (12,-20);
ref = commaaccentcomb;
}
);
width = 584;
}
);
unicode = 343;
},
{
glyphname = scommaaccent;
kernLeft = s;
kernRight = s;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = s;
},
{
pos = (230,0);
ref = commaaccentcomb;
}
);
width = 664;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = s;
},
{
pos = (229,-20);
ref = commaaccentcomb;
}
);
width = 767;
}
);
unicode = 537;
},
{
glyphname = tcedilla;
kernLeft = t;
kernRight = t;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (155,0);
ref = cedillacomb;
}
);
width = 543;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = t;
},
{
pos = (98,0);
ref = cedillacomb;
}
);
width = 597;
}
);
unicode = 355;
},
{
glyphname = tcommaaccent;
kernLeft = t;
kernRight = t;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = t;
},
{
pos = (170,0);
ref = commaaccentcomb;
}
);
width = 543;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = t;
},
{
pos = (198,-20);
ref = commaaccentcomb;
}
);
width = 597;
}
);
unicode = 539;
},
{
glyphname = f_f;
kernLeft = f;
kernRight = f;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(922,473,l),
(922,500,l),
(31,501,l),
(31,474,l)
);
},
{
closed = 1;
nodes = (
(663,676,o),
(721,737,o),
(810,737,cs),
(897,737,o),
(954,667,o),
(974,585,c),
(976,585,l),
(1024,684,l),
(954,735,o),
(884,765,o),
(815,765,cs),
(662,765,o),
(583,661,o),
(583,500,cs),
(583,65,l),
(469,4,l),
(469,0,l),
(822,0,l),
(822,4,l),
(663,65,l),
(663,502,ls)
);
},
{
closed = 1;
nodes = (
(224,666,o),
(300,725,o),
(417,725,cs),
(518,725,o),
(575,677,o),
(595,585,c),
(597,585,l),
(645,684,l),
(575,725,o),
(515,755,o),
(416,755,cs),
(243,755,o),
(144,651,o),
(144,500,cs),
(144,65,l),
(30,4,l),
(30,0,l),
(383,0,l),
(383,4,l),
(224,65,l),
(224,494,ls)
);
}
);
width = 984;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(278,380,l),
(276,0,l),
(111,0,l),
(111,380,l),
(20,380,l),
(20,500,l),
(111,500,l),
(112,662,o),
(188,764,o),
(385,764,cs),
(460,764,o),
(530,745,o),
(574,712,c),
(533,591,l),
(502,620,o),
(456,637,o),
(407,637,cs),
(340,637,o),
(280,609,o),
(278,500,c),
(628,500,l),
(629,662,o),
(705,764,o),
(902,764,cs),
(977,764,o),
(1047,745,o),
(1091,712,c),
(1050,591,l),
(1019,620,o),
(973,637,o),
(924,637,cs),
(857,637,o),
(797,609,o),
(795,500,c),
(1028,500,l),
(1028,380,l),
(795,380,l),
(793,0,l),
(628,0,l),
(628,380,l)
);
}
);
width = 1054;
}
);
metricLeft = f;
metricRight = f;
},
{
glyphname = f_h;
kernLeft = f;
kernRight = h;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = f;
},
{
pos = (545,0);
ref = h;
}
);
width = 1365;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
alignment = -1;
ref = f;
},
{
pos = (547,0);
ref = h;
}
);
width = 1375;
},
{
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "AB3CFE1F-8049-4946-B3B0-1203318EC82E";
name = "23 feb 22, 14:36";
shapes = (
{
closed = 1;
nodes = (
(592,0,l),
(770,0,l),
(770,304,l),
(819,352,o),
(884,385,o),
(965,385,cs),
(1072,385,o),
(1137,324,o),
(1137,206,cs),
(1137,0,l),
(1315,0,l),
(1315,226,ls),
(1315,418,o),
(1209,515,o),
(1036,515,cs),
(926,515,o),
(835,474,o),
(770,413,c),
(770,750,l),
(592,750,l)
);
},
{
closed = 1;
nodes = (
(478,618,l),
(436,631,o),
(423,633,o),
(397,633,cs),
(340,633,o),
(280,609,o),
(278,500,c),
(481,500,l),
(481,380,l),
(278,380,l),
(276,0,l),
(111,0,l),
(111,380,l),
(20,380,l),
(20,500,l),
(111,500,l),
(112,652,o),
(188,764,o),
(385,764,cs),
(422,764,o),
(459,759,o),
(511,741,c)
);
}
);
width = 1365;
}
);
metricLeft = f;
metricRight = h;
},
{
glyphname = fi;
kernLeft = f;
kernRight = i;
lastChange = "2022-04-09 17:04:19 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (737,0);
},
{
name = ogonek;
pos = (803.962,0);
},
{
name = top;
pos = (726,500);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(473,500,l),
(33,500,l),
(33,473,l),
(473,473,l)
);
},
{
closed = 1;
nodes = (
(630,473,l),
(630,65,l),
(515,2,l),
(515,0,l),
(818,0,l),
(818,2,l),
(705,65,l),
(705,500,l),
(345,500,l),
(345,473,l)
);
},
{
closed = 1;
nodes = (
(224,676,o),
(300,737,o),
(427,737,cs),
(538,737,o),
(605,687,o),
(625,595,c),
(627,595,l),
(675,694,l),
(605,735,o),
(535,765,o),
(426,765,cs),
(243,765,o),
(144,661,o),
(144,500,cs),
(144,65,l),
(30,4,l),
(30,0,l),
(383,0,l),
(383,4,l),
(224,65,l),
(224,494,ls)
);
}
);
width = 850;
},
{
anchors = (
{
name = _top;
pos = (706,500);
},
{
name = ogonek;
pos = (795,0);
},
{
name = top;
pos = (706,745);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(530,745,o),
(460,764,o),
(385,764,cs),
(188,764,o),
(112,662,o),
(111,500,c),
(20,500,l),
(20,380,l),
(111,380,l),
(111,0,l),
(276,0,l),
(278,380,l),
(772,380,l),
(772,500,l),
(278,500,l),
(280,609,o),
(340,637,o),
(407,637,cs),
(456,637,o),
(502,620,o),
(533,591,c),
(574,712,l)
);
},
{
closed = 1;
nodes = (
(597,0,l),
(775,0,l),
(775,500,l),
(597,500,l)
);
}
);
width = 842;
}
);
metricLeft = f;
metricRight = i;
unicode = 64257;
},
{
glyphname = fl;
kernLeft = f;
kernRight = l;
lastChange = "2022-04-09 17:04:22 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(699,750,l),
(699,65,l),
(812,2,l),
(812,0,l),
(509,0,l),
(509,2,l),
(624,65,l),
(624,718,l)
);
},
{
closed = 1;
nodes = (
(33,473,l),
(33,500,l),
(473,500,l),
(473,473,l)
);
},
{
closed = 1;
nodes = (
(224,65,l),
(383,4,l),
(383,0,l),
(30,0,l),
(30,4,l),
(144,65,l),
(144,500,ls),
(144,661,o),
(243,765,o),
(426,765,cs),
(535,765,o),
(605,735,o),
(675,694,c),
(627,595,l),
(625,595,l),
(605,687,o),
(538,737,o),
(427,737,cs),
(300,737,o),
(224,676,o),
(224,494,cs)
);
}
);
width = 844;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
alignment = -1;
ref = f;
},
{
alignment = -1;
pos = (547,0);
ref = l;
}
);
width = 850;
}
);
metricLeft = f;
metricRight = l;
unicode = 64258;
},
{
export = 0;
glyphname = zero.dnom;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
guides = (
{
pos = (238,280);
}
);
layerId = m01;
shapes = (
{
pos = (0,-391);
ref = zerosuperior;
}
);
width = 439;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-321);
ref = zerosuperior;
}
);
width = 585;
}
);
metricLeft = zero;
metricRight = zero;
},
{
export = 0;
glyphname = one.dnom;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
guides = (
{
pos = (190,286);
}
);
layerId = m01;
shapes = (
{
pos = (0,-386);
ref = onesuperior;
}
);
width = 279;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-321);
ref = onesuperior;
}
);
width = 334;
}
);
metricLeft = one;
metricRight = one;
},
{
export = 0;
glyphname = two.dnom;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-382);
ref = twosuperior;
}
);
width = 433;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-320);
ref = twosuperior;
}
);
width = 528;
}
);
metricLeft = two;
metricRight = two;
},
{
export = 0;
glyphname = three.dnom;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-393);
ref = threesuperior;
}
);
width = 377;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-321);
ref = threesuperior;
}
);
width = 534;
}
);
metricLeft = three;
metricRight = three;
},
{
export = 0;
glyphname = four.dnom;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
pos = (0,-342);
ref = foursuperior;
}
);
width = 412;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,-313);
ref = foursuperior;
}
);
width = 543;
}
);
},
{
export = 0;
glyphname = zero.numr;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
guides = (
{
pos = (238,280);
}
);
layerId = m01;
shapes = (
{
ref = zerosuperior;
}
);
width = 439;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = zerosuperior;
}
);
width = 585;
}
);
metricLeft = zero;
metricRight = zero;
},
{
export = 0;
glyphname = one.numr;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = onesuperior;
}
);
width = 279;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = onesuperior;
}
);
width = 334;
}
);
metricLeft = one;
metricRight = one;
},
{
export = 0;
glyphname = two.numr;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = twosuperior;
}
);
width = 433;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = twosuperior;
}
);
width = 528;
}
);
metricLeft = two;
metricRight = two;
},
{
export = 0;
glyphname = three.numr;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = threesuperior;
}
);
width = 377;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = threesuperior;
}
);
width = 534;
}
);
metricLeft = three;
metricRight = three;
},
{
export = 0;
glyphname = four.numr;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = foursuperior;
}
);
width = 412;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = foursuperior;
}
);
width = 543;
}
);
},
{
glyphname = zerosuperior;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
guides = (
{
pos = (218,280);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,375,o),
(419,456,o),
(419,569,cs),
(419,677,o),
(332,765,o),
(218,765,cs),
(108,765,o),
(20,681,o),
(20,569,cs),
(20,460,o),
(104,375,o),
(218,375,cs)
);
},
{
closed = 1;
nodes = (
(348,679,o),
(348,569,cs),
(348,463,o),
(321,402,o),
(219,402,cs),
(116,402,o),
(90,468,o),
(90,569,cs),
(90,679,o),
(126,739,o),
(219,739,cs),
(321,739,o)
);
}
);
width = 439;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(455,311,o),
(545,381,o),
(545,507,cs),
(545,632,o),
(455,700,o),
(290,700,cs),
(129,700,o),
(40,632,o),
(40,507,cs),
(40,381,o),
(129,311,o),
(290,311,cs)
);
},
{
closed = 1;
nodes = (
(159,573,o),
(206,610,o),
(290,610,cs),
(378,610,o),
(426,574,o),
(426,508,cs),
(426,439,o),
(378,401,o),
(290,401,cs),
(206,401,o),
(159,438,o),
(159,506,cs)
);
}
);
width = 585;
}
);
unicode = 8304;
},
{
glyphname = onesuperior;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,386,l),
(279,389,l),
(179,427,l),
(177,765,l),
(162,765,l),
(10,669,l),
(13,663,l),
(123,701,l),
(123,427,l),
(23,389,l),
(23,386,l)
);
}
);
width = 279;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(128,321,l),
(234,321,l),
(234,700,l),
(153,700,l),
(104,657,o),
(47,628,o),
(-20,619,c),
(-20,527,l),
(47,538,o),
(98,563,o),
(128,594,c)
);
}
);
width = 334;
}
);
unicode = 185;
},
{
glyphname = twosuperior;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
guides = (
{
pos = (315,284);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,765,o),
(372,726,o),
(372,662,cs),
(372,573,o),
(286,550,o),
(212,525,cs),
(129,497,o),
(101,471,o),
(99,435,c),
(307,437,l),
(391,511,l),
(394,511,l),
(340,365,l),
(326,384,l),
(58,384,l),
(58,484,o),
(121,514,o),
(205,544,cs),
(283,573,o),
(309,606,o),
(309,662,cs),
(309,710,o),
(276,746,o),
(216,746,cs),
(136,746,o),
(99,682,o),
(98,613,c),
(97,613,l),
(44,656,l),
(76,728,o),
(133,765,o),
(221,765,cs)
);
}
);
width = 433;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(57,320,c),
(451,320,l),
(451,403,l),
(190,403,l),
(190,427,o),
(220,440,o),
(292,458,cs),
(352,473,o),
(447,484,o),
(447,582,cs),
(447,659,o),
(374,700,o),
(261,700,cs),
(188,700,o),
(126,682,o),
(68,653,c),
(71,575,l),
(121,603,o),
(180,623,o),
(248,623,cs),
(305,623,o),
(334,612,o),
(334,580,cs),
(334,552,o),
(325,543,o),
(240,517,cs),
(156,491,o),
(57,471,o)
);
}
);
width = 528;
}
);
unicode = 178;
},
{
glyphname = threesuperior;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(288,380,o),
(352,428,o),
(352,496,cs),
(352,560,o),
(291,593,o),
(225,592,c),
(289,607,o),
(323,633,o),
(323,682,cs),
(323,737,o),
(264,765,o),
(192,765,cs),
(103,765,o),
(55,715,o),
(36,671,c),
(84,630,l),
(85,630,l),
(89,701,o),
(127,749,o),
(192,749,cs),
(239,749,o),
(269,726,o),
(269,685,cs),
(269,631,o),
(223,601,o),
(114,578,c),
(118,560,l),
(161,571,o),
(187,575,o),
(209,575,cs),
(261,575,o),
(295,543,o),
(295,494,cs),
(295,436,o),
(258,398,o),
(193,398,cs),
(116,398,o),
(80,455,o),
(77,518,c),
(76,518,l),
(30,471,l),
(55,412,o),
(126,380,o),
(193,380,cs)
);
}
);
width = 377;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(377,315,o),
(462,362,o),
(462,427,cs),
(462,476,o),
(439,505,o),
(370,514,c),
(436,536,o),
(448,563,o),
(448,592,cs),
(448,665,o),
(369,700,o),
(251,700,cs),
(175,700,o),
(107,679,o),
(66,661,c),
(78,589,l),
(125,606,o),
(182,621,o),
(261,621,cs),
(336,621,o),
(349,608,o),
(349,586,cs),
(349,556,o),
(327,547,o),
(250,547,cs),
(173,547,l),
(173,472,l),
(250,472,ls),
(327,472,o),
(355,472,o),
(355,438,cs),
(355,411,o),
(322,396,o),
(253,396,cs),
(171,396,o),
(124,408,o),
(83,428,c),
(66,351,l),
(118,327,o),
(171,315,o),
(242,315,cs)
);
}
);
width = 534;
}
);
unicode = 179;
},
{
export = 0;
glyphname = foursuperior;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(385,451,l),
(385,474,l),
(26,474,l),
(41,465,l),
(113,494,o),
(208,597,o),
(277,708,c),
(198,765,l),
(203,631,o),
(126,527,o),
(9,469,c),
(9,451,l)
);
},
{
closed = 1;
nodes = (
(234,384,l),
(158,345,l),
(158,343,l),
(362,343,l),
(362,345,l),
(286,384,l),
(286,592,l),
(234,562,l)
);
}
);
width = 412;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(306,600,l),
(306,470,l),
(151,470,l)
);
},
{
closed = 1;
nodes = (
(306,398,l),
(306,313,l),
(404,313,l),
(404,398,l),
(498,398,l),
(498,470,l),
(404,470,l),
(404,700,l),
(310,700,l),
(20,467,l),
(20,398,l)
);
}
);
width = 543;
}
);
unicode = 8308;
},
{
glyphname = nbspace;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
width = 423;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
width = 318;
}
);
metricWidth = space;
unicode = 160;
},
{
glyphname = micro;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
ref = u;
},
{
closed = 1;
nodes = (
(123,238,l),
(123,-200,l),
(203,-200,l),
(203,238,l)
);
}
);
width = 803;
},
{
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
ref = u;
},
{
closed = 1;
nodes = (
(70,268,l),
(70,-230,l),
(247,-230,l),
(247,268,l)
);
}
);
width = 883;
}
);
metricLeft = u;
metricRight = u;
unicode = 181;
},
{
glyphname = dieresiscomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (182,500);
},
{
name = top;
pos = (182,702);
}
);
layerId = m01;
shapes = (
{
pos = (-7,-23);
ref = dotaccentcomb;
},
{
alignment = -1;
pos = (170,-23);
ref = dotaccentcomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 1 0 0 1 89 2 1 1 1 0 97 3 1 0 1 0 81 38 38 38 34 4 7 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 363;
},
{
anchors = (
{
name = _top;
pos = (254,500);
},
{
name = top;
pos = (254,745);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (249,0);
ref = dotaccentcomb;
},
{
alignment = -1;
pos = (-20,-1);
ref = dotaccentcomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 34 values pushed */
3 1 0 1 1 0 89 3 1 0 0 1 97 2 4 2 1 0 1 81 0 0 21 19 15 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 507;
}
);
note = dieresis;
unicode = 776;
},
{
glyphname = dotaccentcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (100,500);
},
{
name = top;
pos = (100,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,659,o),
(153,681,o),
(153,712,cs),
(153,743,o),
(131,765,o),
(100,765,cs),
(69,765,o),
(47,743,o),
(47,712,cs),
(47,681,o),
(69,659,o),
(100,659,cs)
);
}
);
width = 200;
},
{
anchors = (
{
name = _top;
pos = (139,500);
},
{
name = top;
pos = (139,745);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(76,577,o),
(37,610,o),
(37,671,cs),
(37,732,o),
(76,765,o),
(139,765,cs),
(202,765,o),
(241,732,o),
(241,671,cs),
(241,610,o),
(202,577,o),
(139,577,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 278;
}
);
note = dotaccent;
unicode = 775;
},
{
glyphname = hungarumlautcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (201,500);
},
{
name = top;
pos = (251,708);
}
);
layerId = m01;
shapes = (
{
pos = (3,-4);
ref = acutecomb;
},
{
alignment = -1;
pos = (174,-3);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 15 values pushed */
20 8 2 0 73 1 1 0 0 118 42 32 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 501;
},
{
anchors = (
{
name = _top;
pos = (300,500);
},
{
name = top;
pos = (366,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (20,0);
ref = acutecomb;
},
{
alignment = -1;
pos = (299,0);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 16 4 7 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 731;
}
);
note = hungarumlaut;
unicode = 779;
},
{
glyphname = caroncomb.alt;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _topright;
pos = (20,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(54,548,l),
(114,705,ls),
(117,713,o),
(119,722,o),
(119,733,cs),
(119,748,o),
(109,765,o),
(88,765,cs),
(61,765,o),
(53,738,o),
(51,711,cs),
(38,551,l)
);
}
);
width = 159;
},
{
anchors = (
{
name = _topright;
pos = (30,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(67,745,l),
(50,543,l),
(167,543,l),
(222,745,l)
);
}
);
width = 242;
}
);
},
{
glyphname = circumflexcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (168,500);
},
{
name = top;
pos = (168,717);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,578,l),
(204,710,ls),
(192,725,o),
(184,737,o),
(168,737,cs),
(154,737,o),
(144,725,o),
(132,710,cs),
(20,578,l),
(30,568,l),
(168,678,l),
(306,568,l)
);
}
);
width = 336;
},
{
anchors = (
{
name = _top;
pos = (388,500);
},
{
name = top;
pos = (388,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(464,571,l),
(637,571,l),
(479,730,l),
(297,730,l),
(139,571,l),
(314,571,l),
(389,652,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
8 1 0 1 1 76 0 1 0 1 133 2 1 0 0 118 33 18 16 3 7 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 776;
},
{
anchors = (
{
name = _top;
pos = (168,500);
},
{
name = top;
pos = (168,724);
}
);
associatedMasterId = m01;
layerId = "BE6E26BD-EA15-4266-8664-60E7DFFA9A9C";
name = "11 feb 22, 18:46";
shapes = (
{
closed = 1;
nodes = (
(286,548,l),
(204,690,ls),
(194,707,o),
(189,724,o),
(168,724,cs),
(150,724,o),
(141,706,o),
(132,690,cs),
(50,548,l),
(64,538,l),
(168,658,l),
(272,538,l)
);
}
);
width = 336;
}
);
note = circumflex;
unicode = 770;
},
{
glyphname = caroncomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (168,500);
},
{
name = top;
pos = (168,737);
}
);
layerId = m01;
shapes = (
{
pos = (0,1305);
ref = circumflexcomb;
scale = (1,-1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
11 10 8 6 5 5 0 74 1 1 0 0 118 0 0 0 17 0 16 2 7 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 336;
},
{
anchors = (
{
name = _top;
pos = (388,500);
},
{
name = top;
pos = (388,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
pos = (0,1301);
ref = circumflexcomb;
scale = (1,-1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 0 2 2 118 18 18 32 3 7 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 776;
}
);
note = caron;
unicode = 780;
},
{
glyphname = brevecomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (184,500);
},
{
name = top;
pos = (184,710);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,586,o),
(297,648,o),
(311,705,c),
(294,710,l),
(280,663,o),
(235,637,o),
(184,637,cs),
(132,637,o),
(87,663,o),
(73,710,c),
(56,705,l),
(70,647,o),
(104,586,o),
(184,586,cs)
);
}
);
width = 368;
},
{
anchors = (
{
name = _top;
pos = (346,500);
},
{
name = top;
pos = (346,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(297,666,o),
(272,687,o),
(264,730,c),
(114,730,l),
(114,671,o),
(177,559,o),
(331,559,cs),
(486,559,o),
(548,671,o),
(558,730,c),
(406,730,l),
(399,687,o),
(374,666,o),
(335,666,cs)
);
}
);
width = 692;
},
{
anchors = (
{
name = _top;
pos = (184,500);
},
{
name = top;
pos = (184,690);
}
);
associatedMasterId = m01;
layerId = "B569C7AF-8703-4FDC-A832-5F9DC5FA8CBC";
name = "11 feb 22, 18:47";
shapes = (
{
closed = 1;
nodes = (
(253,569,o),
(295,628,o),
(318,683,c),
(303,690,l),
(280.333,643.333,o),
(240.667,620,o),
(184,620,cs),
(127.333,620,o),
(87.667,643.333,o),
(65,690,c),
(50,683,l),
(73,627,o),
(117,569,o),
(184,569,cs)
);
}
);
width = 368;
}
);
note = breve;
unicode = 774;
},
{
glyphname = ringcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (134,500);
},
{
name = top;
pos = (134,724);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,707,o),
(182,744,o),
(134,744,cs),
(85,744,o),
(47,708,o),
(47,659,cs),
(47,612,o),
(84,573,o),
(134,573,cs),
(182,573,o),
(220,611,o),
(220,659,cs)
);
},
{
closed = 1;
nodes = (
(87,686,o),
(102,712,o),
(134,712,cs),
(169,712,o),
(182,683,o),
(182,659,cs),
(182,635,o),
(167,606,o),
(134,606,cs),
(101,606,o),
(87,635,o),
(87,659,cs)
);
}
);
width = 268;
},
{
anchors = (
{
name = _top;
pos = (259,500);
},
{
name = top;
pos = (259,745);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(373,552,o),
(427,596,o),
(427,661,cs),
(427,726,o),
(373,768,o),
(259,768,cs),
(145,768,o),
(91,726,o),
(91,661,cs),
(91,596,o),
(145,552,o),
(259,552,cs)
);
},
{
closed = 1;
nodes = (
(197,684,o),
(216,701,o),
(259,701,cs),
(302,701,o),
(321,684,o),
(321,661,cs),
(321,638,o),
(302,619,o),
(259,619,cs),
(216,619,o),
(197,638,o),
(197,661,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 4 1 1 2 1 81 0 0 21 19 15 13 0 11 0 10 36 5 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 518;
}
);
note = ring;
unicode = 778;
},
{
glyphname = macroncomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (179,500);
},
{
name = top;
pos = (166,647);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,632,l),
(305,667,l),
(45,667,l),
(45,632,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 345;
},
{
anchors = (
{
name = _top;
pos = (326,500);
},
{
name = top;
pos = (326,730);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(110,617,l),
(542,617,l),
(542,730,l),
(110,730,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 662;
}
);
note = macron;
unicode = 772;
},
{
glyphname = commaturnedabovecomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (102,500);
},
{
name = top;
pos = (102,741);
}
);
layerId = m01;
shapes = (
{
pos = (0,652);
ref = comma;
scale = (1,-1);
}
);
width = 193;
},
{
anchors = (
{
name = _top;
pos = (131,500);
},
{
name = top;
pos = (131,883);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
angle = 180;
pos = (261,508);
ref = commaaccentcomb;
}
);
width = 300;
}
);
unicode = 786;
},
{
glyphname = commaaccentcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (102,0);
},
{
name = bottom;
pos = (102,-296);
}
);
layerId = m01;
shapes = (
{
pos = (0,-157);
ref = comma;
}
);
width = 193;
},
{
anchors = (
{
name = _bottom;
pos = (135,20);
},
{
name = bottom;
pos = (135,-284);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(169,-284,l),
(189,-234,ls),
(205,-195,o),
(217,-158,o),
(217,-120,cs),
(217,-72,o),
(186,-42,o),
(137,-42,cs),
(85,-42,o),
(52,-72,o),
(52,-120,cs),
(52,-165,o),
(81,-194,o),
(128,-194,c),
(96,-284,l)
);
}
);
width = 300;
}
);
unicode = 806;
},
{
glyphname = cedillacomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (117,0);
},
{
name = bottom;
pos = (145,-250);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,-77,o),
(213,-54,o),
(176,-54,cs),
(152,-54,o),
(138,-61,o),
(130,-65,c),
(184,0,l),
(148,0,l),
(67,-100,l),
(86,-113,l),
(103,-102,o),
(126,-91,o),
(146,-91,cs),
(176,-91,o),
(190,-105,o),
(190,-138,cs),
(190,-176,o),
(158,-202,o),
(70,-201,c),
(71,-224,l),
(178,-226,o),
(251,-184,o),
(251,-127,cs)
);
}
);
width = 290;
},
{
anchors = (
{
name = _bottom;
pos = (145,0);
},
{
name = bottom;
pos = (145,-250);
}
);
associatedMasterId = m01;
layerId = "D4BD8020-FBB5-4E21-A6E7-2400E8AF5C92";
name = "11 feb 22, 18:51";
shapes = (
{
closed = 1;
nodes = (
(240,-90,o),
(219,-73,qs),
(196,-56,o),
(163,-56,qs),
(151,-56,o),
(147,-57,q),
(182,0,l),
(168,0,l),
(83,-96,l),
(94,-107,l),
(120,-93,o),
(149,-93,qs),
(194,-93,o),
(194,-131,qs),
(194,-165,o),
(153,-195,qs),
(113,-225,o),
(50,-234,q),
(52,-250,l),
(121,-243,o),
(181,-205,qs),
(240,-167,o),
(240,-117,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
13 12 3 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 2 2 1 112 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
49 19 41 3 7 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 290;
},
{
anchors = (
{
name = _bottom;
pos = (195,0);
},
{
name = bottom;
pos = (195,-186);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "F63E43BF-460F-4183-B12B-D87A45812D51";
name = "21 feb 22, 11:03";
shapes = (
{
closed = 1;
nodes = (
(52,-186,l),
(236,-186,l),
(339,0,l),
(174,0,l),
(50,-182,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 389;
},
{
anchors = (
{
name = _bottom;
pos = (235,0);
},
{
name = bottom;
pos = (195,-186);
}
);
associatedMasterId = "03DC8633-12B9-4C09-834B-15CC0827035A";
layerId = "BC16DDFF-F590-4C5B-B340-45FB9DC5A545";
name = "22 feb 22, 11:48";
shapes = (
{
closed = 1;
nodes = (
(169,10,l),
(186,-16,o),
(200,-56,o),
(200,-81,cs),
(200,-146,o),
(134,-141,o),
(43,-118,c),
(23,-214,l),
(62,-224,o),
(97,-236,o),
(158,-236,cs),
(260,-235,o),
(326,-190,o),
(326,-101,cs),
(326,-66,o),
(317,-38,o),
(288,10,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 389;
},
{
anchors = (
{
name = _bottom;
pos = (235,0);
},
{
name = bottom;
pos = (195,-186);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(396,-89,o),
(356,-54,o),
(298,-54,cs),
(267,-54,o),
(252,-63,o),
(244,-72,c),
(236,-72,l),
(281,4,l),
(170,4,l),
(93,-150,l),
(193,-150,l),
(211,-119,o),
(225,-112,o),
(240,-112,cs),
(256,-112,o),
(270,-121,o),
(270,-141,cs),
(270,-176,o),
(223,-185,o),
(132,-184,c),
(133,-270,l),
(351,-272,o),
(396,-206,o),
(396,-141,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 389;
}
);
note = cedilla;
unicode = 807;
},
{
glyphname = ogonekcomb;
lastChange = "2022-04-09 17:02:39 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
pos = (205,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(91.333,-38,o),
(50,-72,o),
(50,-118,cs),
(50,-161,o),
(91,-188,o),
(134,-188,cs),
(182,-188,o),
(224,-159,o),
(249,-128,c),
(238,-118,l),
(214,-143,o),
(189,-156,o),
(163,-156,cs),
(128,-156,o),
(108,-131,o),
(108,-99,cs),
(108,-62,o),
(146,-28,o),
(205,0,c)
);
}
);
width = 299;
},
{
anchors = (
{
name = _ogonek;
pos = (380,-15);
}
);
layerId = "03DC8633-12B9-4C09-834B-15CC0827035A";
shapes = (
{
closed = 1;
nodes = (
(313,-270,o),
(352,-261,o),
(380,-252,c),
(380,-140,l),
(346,-150,o),
(314,-155,o),
(297,-155,cs),
(256,-155,o),
(232,-137,o),
(232,-110,cs),
(232,-62,o),
(326,-33,o),
(380,-15,c),
(201,-15,l),
(109,-49,o),
(70,-85,o),
(70,-146,cs),
(70,-217,o),
(139,-270,o),
(244,-270,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
14 1 1 0 16 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 1 0 112 0 1 2 2 1 89 0 1 1 2 98 3 1 2 1 2 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 98 3 1 2 1 2 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 18 0 17 37 21 4 7 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 430;
},
{
anchors = (
{
name = _ogonek;
pos = (249,0);
}
);
associatedMasterId = m01;
layerId = "E6530CE9-C0D4-446B-A2E1-07A4A5C011C4";
name = "11 feb 22, 18:53";
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(91.333,-38,o),
(50,-85,o),
(50,-121,cs),
(50,-164,o),
(90,-188,o),
(135,-188,cs),
(181,-188,o),
(224,-159,o),
(249,-128,c),
(238,-118,l),
(214,-143,o),
(189,-156,o),
(163,-156,cs),
(126,-156,o),
(108,-140,o),
(108,-108,cs),
(108,-71,o),
(140.333,-28,o),
(205,0,c)
);
}
);
width = 299;
}
);
note = ogonek;
unicode = 808;
}
);
instances = (
{
axesValues = (
0
);
instanceInterpolations = {
m01 = 1;
};
linkStyle = Regular;
name = Regular;
},
{
axesValues = (
1
);
instanceInterpolations = {
"03DC8633-12B9-4C09-834B-15CC0827035A" = 1;
};
isBold = 1;
name = Bold;
weightClass = 700;
}
);
kerningLTR = {
m01 = {
"@MMK_L_A" = {
"@MMK_R_A" = 110;
"@MMK_R_C" = -50;
"@MMK_R_D" = 20;
"@MMK_R_E" = 20;
"@MMK_R_O" = -50;
"@MMK_R_T" = -60;
"@MMK_R_X" = 10;
"@MMK_R_Z" = 20;
B = 20;
C = -50;
E = 20;
H = 30;
I = 20;
K = 10;
U = -80;
c = -20;
comma = 50;
d = -20;
e = -20;
exclam = 40;
o = -20;
oslash = 0;
period = 40;
question = -20;
quotedblright = -100;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
s = -20;
slash = 30;
t = -10;
u = -40;
v = -50;
w = -50;
};
"@MMK_L_B" = {
"@MMK_R_A" = -30;
"@MMK_R_B" = -40;
"@MMK_R_C" = -10;
"@MMK_R_D" = -30;
"@MMK_R_E" = -40;
"@MMK_R_F" = -20;
"@MMK_R_I" = -20;
"@MMK_R_J" = -20;
"@MMK_R_K" = -20;
"@MMK_R_L" = -30;
"@MMK_R_N" = -30;
"@MMK_R_P" = -20;
"@MMK_R_R" = -20;
"@MMK_R_S" = 20;
"@MMK_R_U" = -30;
"@MMK_R_V" = -40;
"@MMK_R_X" = -70;
"@MMK_R_Z" = 30;
"@MMK_R_y" = 50;
H = -40;
M = -40;
a = 10;
at = 30;
comma = 0;
emdash = 40;
endash = 50;
germandbls = -30;
j = -40;
k = -20;
l = -20;
period = -20;
quoteright = 20;
};
"@MMK_L_C" = {
"@MMK_R_A" = -20;
"@MMK_R_B" = -30;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_F" = -20;
"@MMK_R_I" = -10;
"@MMK_R_J" = -30;
"@MMK_R_L" = -10;
"@MMK_R_M" = -10;
"@MMK_R_N" = -20;
"@MMK_R_P" = -20;
"@MMK_R_R" = -20;
"@MMK_R_S" = 10;
"@MMK_R_U" = -30;
"@MMK_R_V" = -20;
"@MMK_R_X" = -40;
AE = -50;
H = -20;
emdash = 40;
endash = 50;
g = -10;
germandbls = -20;
hyphen = 20;
j = -40;
question = 40;
quotedblright = 0;
quoteright = 0;
quotesingle = 30;
u = -20;
underscore = -40;
v = 20;
w = -10;
y = 40;
};
"@MMK_L_D" = {
"@MMK_R_A" = -70;
"@MMK_R_B" = -60;
"@MMK_R_C" = -10;
"@MMK_R_D" = -30;
"@MMK_R_E" = -30;
"@MMK_R_F" = -30;
"@MMK_R_H" = -10;
"@MMK_R_I" = -30;
"@MMK_R_J" = -30;
"@MMK_R_K" = -40;
"@MMK_R_L" = -30;
"@MMK_R_M" = -40;
"@MMK_R_N" = -30;
"@MMK_R_P" = -20;
"@MMK_R_R" = -30;
"@MMK_R_S" = 10;
"@MMK_R_T" = 20;
"@MMK_R_U" = -40;
"@MMK_R_V" = -60;
"@MMK_R_X" = -80;
"@MMK_R_Z" = 10;
"@MMK_R_y" = 50;
AE = -80;
H = -40;
a = 10;
asterisk = 30;
comma = -50;
emdash = 40;
endash = 50;
germandbls = -30;
j = -20;
period = -30;
question = 50;
quoteright = 20;
slash = -30;
underscore = -40;
y = 90;
};
"@MMK_L_E" = {
"@MMK_R_A" = 20;
"@MMK_R_B" = -10;
"@MMK_R_C" = 10;
"@MMK_R_D" = 20;
"@MMK_R_K" = -20;
"@MMK_R_L" = 0;
"@MMK_R_N" = -30;
"@MMK_R_O" = 20;
"@MMK_R_R" = 0;
"@MMK_R_S" = 20;
"@MMK_R_T" = 20;
"@MMK_R_U" = -20;
"@MMK_R_X" = -20;
"@MMK_R_Z" = 30;
"@MMK_R_y" = 40;
H = -20;
asterisk = 30;
comma = 10;
emdash = 50;
endash = 50;
exclam = 50;
hyphen = 40;
p = 20;
question = 50;
quotedblright = 20;
quoteright = 40;
quotesingle = 30;
u = 20;
v = 20;
w = 20;
x = 20;
};
"@MMK_L_F" = {
"@MMK_R_B" = -40;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_F" = -20;
"@MMK_R_H" = -20;
"@MMK_R_I" = -30;
"@MMK_R_J" = -120;
"@MMK_R_K" = -20;
"@MMK_R_L" = -40;
"@MMK_R_M" = -30;
"@MMK_R_N" = -30;
"@MMK_R_O" = -10;
"@MMK_R_P" = -30;
"@MMK_R_R" = -20;
"@MMK_R_U" = -40;
"@MMK_R_V" = -10;
"@MMK_R_X" = -30;
"@MMK_R_a" = -60;
"@MMK_R_e" = -70;
"@MMK_R_i" = -30;
"@MMK_R_o" = -80;
"@MMK_R_u" = -20;
"@MMK_R_z" = -40;
AE = -160;
H = -40;
a = -60;
asterisk = 30;
c = -90;
comma = -70;
d = -90;
e = -70;
eth = -30;
g = -60;
germandbls = -70;
h = -30;
hyphen = -30;
i = -10;
j = -70;
k = -20;
l = -30;
m = -40;
n = -20;
oslash = -80;
period = -50;
q = -70;
question = 50;
quotedblright = 30;
quoteright = 40;
quotesingle = 30;
r = -10;
s = -80;
slash = -50;
v = -30;
w = -40;
x = -30;
z = -60;
};
"@MMK_L_H" = {
"@MMK_R_E" = -30;
"@MMK_R_F" = -40;
"@MMK_R_J" = -30;
"@MMK_R_O" = -30;
"@MMK_R_S" = -10;
"@MMK_R_U" = -20;
"@MMK_R_V" = 10;
"@MMK_R_X" = -10;
"@MMK_R_Z" = 0;
Q = -40;
q = -20;
quotesingle = 30;
s = -30;
u = -20;
};
"@MMK_L_I" = {
"@MMK_R_A" = 30;
"@MMK_R_C" = -30;
"@MMK_R_J" = -30;
"@MMK_R_O" = -20;
"@MMK_R_u" = -20;
H = -40;
c = -20;
d = -20;
e = -20;
g = -20;
j = -20;
o = -20;
oslash = -20;
q = -30;
quotesingle = 20;
s = -20;
};
"@MMK_L_J" = {
"@MMK_R_A" = -80;
"@MMK_R_B" = -20;
"@MMK_R_C" = -40;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_H" = -30;
"@MMK_R_J" = -50;
"@MMK_R_K" = -20;
"@MMK_R_L" = -20;
"@MMK_R_O" = -20;
"@MMK_R_P" = -30;
"@MMK_R_R" = -30;
"@MMK_R_U" = -40;
"@MMK_R_V" = -10;
"@MMK_R_X" = -100;
"@MMK_R_t" = 20;
"@MMK_R_u" = -10;
"@MMK_R_y" = 60;
AE = -90;
a = -20;
c = -40;
comma = -80;
d = -40;
e = -20;
f = -20;
g = -30;
germandbls = -40;
j = -40;
k = -10;
l = -20;
m = -20;
o = -20;
oslash = -30;
p = 0;
period = -60;
q = -10;
quoteright = 10;
quotesingle = 20;
s = 0;
underscore = -90;
};
"@MMK_L_K" = {
"@MMK_R_C" = -50;
"@MMK_R_F" = 10;
"@MMK_R_J" = -10;
"@MMK_R_K" = -10;
"@MMK_R_O" = -80;
"@MMK_R_T" = -10;
"@MMK_R_U" = -20;
"@MMK_R_o" = -50;
c = -50;
d = -50;
e = -40;
emdash = -40;
endash = -40;
eth = -30;
oslash = -40;
p = -10;
q = -30;
quoteright = 0;
quotesingle = 30;
s = -20;
v = -80;
w = -80;
y = -40;
};
"@MMK_L_L" = {
"@MMK_R_A" = -20;
"@MMK_R_B" = -30;
"@MMK_R_D" = -40;
"@MMK_R_E" = -30;
"@MMK_R_F" = -20;
"@MMK_R_H" = -50;
"@MMK_R_I" = -10;
"@MMK_R_K" = -40;
"@MMK_R_L" = -30;
"@MMK_R_M" = -30;
"@MMK_R_N" = -30;
"@MMK_R_P" = -50;
"@MMK_R_R" = -30;
"@MMK_R_T" = -150;
"@MMK_R_U" = -60;
"@MMK_R_V" = -140;
"@MMK_R_X" = -70;
"@MMK_R_Z" = -30;
AE = -30;
asterisk = -30;
bracketright = -20;
emdash = 50;
germandbls = -20;
hyphen = 20;
j = -30;
l = -20;
quotedblright = -60;
quoteright = -70;
quotesingle = -60;
v = -30;
w = -20;
};
"@MMK_L_M" = {
"@MMK_R_B" = -10;
"@MMK_R_C" = -10;
"@MMK_R_F" = -20;
"@MMK_R_J" = -40;
"@MMK_R_O" = -40;
"@MMK_R_P" = -40;
"@MMK_R_T" = -20;
"@MMK_R_U" = -20;
"@MMK_R_u" = -30;
c = -20;
d = -20;
e = -20;
o = -20;
p = -20;
q = -30;
s = -30;
};
"@MMK_L_N" = {
"@MMK_R_A" = -30;
"@MMK_R_B" = -20;
"@MMK_R_C" = -20;
"@MMK_R_F" = -10;
"@MMK_R_J" = -20;
"@MMK_R_O" = -30;
"@MMK_R_T" = -20;
AE = -30;
c = -30;
d = -20;
e = -30;
g = -20;
germandbls = -20;
j = -40;
o = -20;
q = -20;
s = -20;
u = -40;
};
"@MMK_L_O" = {
"@MMK_R_A" = -50;
"@MMK_R_B" = -40;
"@MMK_R_D" = -40;
"@MMK_R_E" = -30;
"@MMK_R_F" = -40;
"@MMK_R_H" = -30;
"@MMK_R_I" = -20;
"@MMK_R_J" = -20;
"@MMK_R_K" = -40;
"@MMK_R_L" = -20;
"@MMK_R_M" = -30;
"@MMK_R_N" = -40;
"@MMK_R_P" = -50;
"@MMK_R_R" = -40;
"@MMK_R_S" = 10;
"@MMK_R_U" = -30;
"@MMK_R_V" = -70;
"@MMK_R_X" = -60;
"@MMK_R_y" = 50;
AE = -80;
a = 20;
e = 10;
emdash = 40;
endash = 50;
j = -30;
question = 40;
quotedblright = -40;
quoteright = 0;
underscore = -50;
y = 20;
};
"@MMK_L_P" = {
"@MMK_R_A" = -100;
"@MMK_R_B" = -30;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_F" = -20;
"@MMK_R_H" = -30;
"@MMK_R_I" = -20;
"@MMK_R_J" = -90;
"@MMK_R_K" = -30;
"@MMK_R_L" = -30;
"@MMK_R_M" = -40;
"@MMK_R_N" = -30;
"@MMK_R_O" = 20;
"@MMK_R_P" = -20;
"@MMK_R_R" = -20;
"@MMK_R_S" = 20;
"@MMK_R_T" = 20;
"@MMK_R_U" = -30;
"@MMK_R_V" = -30;
"@MMK_R_X" = -50;
"@MMK_R_y" = 30;
AE = -200;
comma = -60;
d = -20;
e = -20;
endash = -20;
g = -30;
germandbls = -40;
j = -30;
k = -20;
o = -20;
oslash = -20;
period = -60;
q = -20;
question = 60;
quotedblright = 20;
quoteright = 40;
quotesingle = 20;
t = 20;
x = 20;
y = 20;
};
"@MMK_L_R" = {
"@MMK_R_B" = -30;
"@MMK_R_C" = -40;
"@MMK_R_D" = -20;
"@MMK_R_E" = -30;
"@MMK_R_F" = -30;
"@MMK_R_H" = -30;
"@MMK_R_J" = -70;
"@MMK_R_K" = -20;
"@MMK_R_L" = -20;
"@MMK_R_O" = -40;
"@MMK_R_P" = -20;
"@MMK_R_T" = -30;
"@MMK_R_U" = -90;
"@MMK_R_V" = -90;
"@MMK_R_X" = -90;
"@MMK_R_u" = -60;
AE = 0;
a = -30;
b = -40;
c = -50;
d = -60;
e = -50;
eth = -40;
g = -20;
germandbls = -30;
h = -30;
hyphen = -50;
j = -50;
k = -20;
l = -30;
o = -50;
oslash = -40;
p = -10;
q = -60;
quoteright = -40;
r = -10;
s = -50;
v = -20;
w = -20;
z = -30;
};
"@MMK_L_S" = {
"@MMK_R_A" = -30;
"@MMK_R_B" = -40;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_F" = -30;
"@MMK_R_H" = -30;
"@MMK_R_J" = -20;
"@MMK_R_K" = -30;
"@MMK_R_L" = -20;
"@MMK_R_P" = -20;
"@MMK_R_U" = -30;
"@MMK_R_V" = -60;
"@MMK_R_X" = -60;
AE = -60;
a = 10;
emdash = 60;
endash = 60;
g = -20;
germandbls = -20;
hyphen = 30;
j = -50;
question = 30;
y = 10;
};
"@MMK_L_T" = {
"@MMK_R_A" = -90;
"@MMK_R_H" = 10;
"@MMK_R_J" = -80;
"@MMK_R_M" = -20;
"@MMK_R_N" = -20;
"@MMK_R_P" = -20;
"@MMK_R_R" = -20;
"@MMK_R_U" = -10;
"@MMK_R_o" = -100;
AE = -130;
O = 10;
S = 10;
a = -30;
backslash = 30;
c = -70;
comma = -40;
d = -100;
e = -100;
g = -100;
germandbls = -50;
hyphen = 0;
j = -70;
oslash = -60;
period = -60;
q = -60;
question = 60;
quoteleft = 40;
quoteright = 30;
quotesingle = 40;
s = -50;
u = -20;
z = -30;
};
"@MMK_L_U" = {
"@MMK_R_A" = -80;
"@MMK_R_B" = -30;
"@MMK_R_C" = -20;
"@MMK_R_D" = -20;
"@MMK_R_E" = -20;
"@MMK_R_F" = -10;
"@MMK_R_J" = -50;
"@MMK_R_K" = -20;
"@MMK_R_M" = -30;
"@MMK_R_O" = -20;
"@MMK_R_U" = -20;
AE = -70;
period = -50;
quotesingle = 30;
underscore = -80;
};
"@MMK_L_V" = {
"@MMK_R_C" = -40;
"@MMK_R_H" = 20;
"@MMK_R_J" = -100;
"@MMK_R_O" = -70;
"@MMK_R_a" = -80;
"@MMK_R_c" = -90;
"@MMK_R_d" = -90;
"@MMK_R_e" = -80;
"@MMK_R_g" = -90;
"@MMK_R_j" = -100;
"@MMK_R_m" = -30;
"@MMK_R_n" = -50;
"@MMK_R_o" = -90;
"@MMK_R_p" = -30;
"@MMK_R_q" = -70;
"@MMK_R_r" = -30;
"@MMK_R_s" = -70;
"@MMK_R_u" = -40;
"@MMK_R_z" = -60;
A = -170;
AE = -200;
asterisk = 20;
at = -50;
backslash = 60;
braceright = 30;
comma = -70;
endash = -50;
exclam = 30;
germandbls = -50;
guilsinglleft = -50;
hyphen = -50;
period = -70;
question = 20;
quotedblright = 40;
quoteright = 30;
quotesingle = 80;
underscore = -90;
};
"@MMK_L_X" = {
"@MMK_R_A" = 20;
"@MMK_R_C" = -60;
"@MMK_R_H" = -20;
"@MMK_R_J" = -30;
"@MMK_R_O" = -70;
at = 30;
backslash = 50;
endash = -40;
exclam = 40;
hyphen = -20;
quotesingle = 20;
};
"@MMK_L_Z" = {
"@MMK_R_A" = -20;
"@MMK_R_B" = -10;
"@MMK_R_D" = -10;
"@MMK_R_E" = -10;
"@MMK_R_H" = -30;
"@MMK_R_J" = -30;
"@MMK_R_K" = -30;
"@MMK_R_P" = -20;
"@MMK_R_R" = -30;
"@MMK_R_Z" = -20;
emdash = 50;
endash = 50;
hyphen = 30;
quotesingle = 20;
};
"@MMK_L_a" = {
"@MMK_R_V" = -130;
emdash = 0;
eth = -10;
o = -20;
oslash = -20;
q = -20;
question = -40;
quotedblright = -40;
quoteleft = -60;
quoteright = -60;
quotesingle = -50;
s = -20;
u = -40;
v = -60;
w = -60;
y = -20;
};
"@MMK_L_b" = {
"@MMK_R_V" = -90;
"@MMK_R_s" = 20;
"@MMK_R_y" = 20;
emdash = 40;
endash = 40;
eth = 20;
o = 20;
oslash = 20;
quotedblright = -40;
quoteright = -20;
quotesingle = -30;
t = 30;
underscore = -30;
v = -20;
w = -20;
};
"@MMK_L_c" = {
"@MMK_R_V" = -90;
"@MMK_R_d" = 30;
"@MMK_R_t" = 40;
"@MMK_R_y" = 40;
"@MMK_R_z" = 20;
emdash = 50;
endash = 30;
oslash = 20;
quoteleft = -20;
s = 20;
};
"@MMK_L_d" = {
"@MMK_R_V" = -30;
"@MMK_R_t" = 30;
"@MMK_R_y" = 20;
g = 0;
q = -20;
s = -20;
u = -20;
v = -20;
};
"@MMK_L_e" = {
"@MMK_R_V" = -90;
"@MMK_R_o" = 20;
"@MMK_R_t" = 30;
"@MMK_R_z" = 20;
emdash = 60;
endash = 30;
eth = 40;
hyphen = 30;
oslash = 20;
quoteleft = -20;
quoteright = -30;
v = 20;
y = 30;
};
"@MMK_L_f" = {
"@MMK_R_e" = -50;
"@MMK_R_f" = -20;
"@MMK_R_o" = -60;
"@MMK_R_t" = 20;
backslash = 30;
braceright = 30;
bracketright = 30;
comma = -40;
emdash = -40;
exclam = 40;
foursuperior = 20;
g = -50;
guilsinglleft = -40;
hyphen = -50;
j = -80;
onesuperior = 90;
oslash = -60;
parenright = 80;
period = -60;
q = -60;
question = 60;
quotedblright = 80;
quoteleft = 30;
quoteright = 80;
quotesingle = 70;
s = -60;
threesuperior = 90;
twosuperior = 70;
u = -50;
z = -40;
zerosuperior = 100;
};
"@MMK_L_g" = {
"@MMK_R_V" = -80;
"@MMK_R_t" = 30;
"@MMK_R_y" = 60;
"@MMK_R_z" = -10;
germandbls = -30;
guilsinglleft = -20;
l = -20;
p = 20;
q = -20;
question = 40;
quotedblright = 20;
quoteright = 30;
s = -10;
};
"@MMK_L_h" = {
"@MMK_R_V" = -100;
"@MMK_R_j" = -20;
"@MMK_R_u" = -30;
quotedblright = -80;
quoteleft = -70;
quoteright = -60;
};
"@MMK_L_i" = {
"@MMK_R_V" = -60;
j = -30;
quoteright = -20;
slash = 20;
};
"@MMK_L_k" = {
"@MMK_R_V" = -120;
"@MMK_R_j" = -60;
eth = -40;
guilsinglright = -30;
o = -60;
oslash = -50;
parenright = -40;
q = -80;
quotedblright = -50;
quoteright = -40;
s = -60;
u = -50;
z = -30;
};
"@MMK_L_l" = {
slash = 50;
};
"@MMK_L_m" = {
"@MMK_R_V" = -100;
"@MMK_R_j" = -40;
"@MMK_R_v" = -30;
"@MMK_R_w" = -50;
quotedblright = -50;
quoteleft = -60;
quoteright = -40;
x = 20;
};
"@MMK_L_n" = {
"@MMK_R_V" = -110;
"@MMK_R_j" = -20;
"@MMK_R_n" = 0;
germandbls = 0;
quotedblright = -50;
quoteleft = -40;
quoteright = -30;
u = -20;
w = -60;
};
"@MMK_L_o" = {
"@MMK_R_V" = -90;
"@MMK_R_e" = 20;
"@MMK_R_j" = -40;
"@MMK_R_o" = 20;
"@MMK_R_y" = 20;
emdash = 70;
eth = 30;
quoteleft = -30;
};
"@MMK_L_p" = {
"@MMK_R_V" = -100;
"@MMK_R_t" = 30;
"@MMK_R_v" = -10;
"@MMK_R_w" = -10;
emdash = 40;
eth = 20;
germandbls = -20;
l = -10;
quotedblright = -40;
};
"@MMK_L_q" = {
"@MMK_R_V" = -100;
"@MMK_R_j" = 20;
"@MMK_R_q" = -30;
"@MMK_R_t" = 40;
germandbls = -30;
quotedblright = -30;
slash = 30;
y = 40;
};
"@MMK_L_r" = {
"@MMK_R_V" = -90;
"@MMK_R_t" = 50;
"@MMK_R_u" = -10;
comma = -60;
emdash = 50;
eth = 20;
germandbls = -40;
period = -70;
question = 20;
underscore = -50;
x = 20;
y = 30;
};
"@MMK_L_s" = {
"@MMK_R_V" = -100;
"@MMK_R_t" = 30;
"@MMK_R_u" = -20;
"@MMK_R_v" = -10;
"@MMK_R_y" = 20;
emdash = 60;
eth = 20;
germandbls = -30;
question = -20;
quoteright = -10;
};
"@MMK_L_t" = {
"@MMK_R_u" = -20;
emdash = -30;
l = -20;
quotedblright = -30;
quoteright = -30;
y = 20;
};
"@MMK_L_u" = {
"@MMK_R_j" = -30;
"@MMK_R_y" = 30;
quotedblright = -50;
quoteright = -30;
};
"@MMK_L_v" = {
"@MMK_R_e" = -30;
"@MMK_R_m" = 20;
"@MMK_R_n" = 10;
"@MMK_R_q" = -20;
"@MMK_R_t" = 30;
comma = -60;
emdash = -20;
germandbls = -30;
period = -50;
question = 70;
quoteleft = 30;
quoteright = 30;
quotesingle = 40;
};
"@MMK_L_w" = {
"@MMK_R_j" = -20;
"@MMK_R_s" = -10;
colon = 40;
comma = -60;
exclam = 30;
germandbls = -20;
period = -20;
question = 60;
quoteleft = 40;
quoteright = 30;
quotesingle = 40;
slash = -40;
y = 20;
z = -20;
};
"@MMK_L_x" = {
comma = 30;
period = 40;
question = 30;
quoteleft = 30;
quoteright = 40;
quotesingle = 40;
};
"@MMK_L_y" = {
"@MMK_R_a" = -40;
"@MMK_R_b" = -30;
"@MMK_R_h" = -60;
"@MMK_R_m" = -20;
"@MMK_R_n" = -20;
"@MMK_R_o" = -60;
"@MMK_R_s" = -30;
"@MMK_R_y" = 40;
comma = -110;
emdash = -40;
endash = -40;
eth = -40;
exclam = -10;
germandbls = -70;
hyphen = -50;
l = -40;
oslash = -50;
period = -90;
question = 20;
quotedblright = 20;
quotesingle = 0;
slash = -60;
z = -60;
};
"@MMK_L_z" = {
"@MMK_R_d" = -20;
"@MMK_R_q" = -20;
"@MMK_R_r" = -20;
"@MMK_R_u" = -20;
l = -30;
};
A = {
"@MMK_R_V" = -170;
};
C = {
"@MMK_R_P" = -50;
"@MMK_R_T" = 10;
};
D = {
"@MMK_R_P" = -40;
};
Euro = {
two = -40;
zero = 20;
};
F = {
"@MMK_R_A" = -120;
};
Germandbls = {
"@MMK_R_C" = 10;
"@MMK_R_D" = -10;
"@MMK_R_E" = -20;
"@MMK_R_J" = 10;
H = 0;
};
H = {
"@MMK_R_A" = 30;
"@MMK_R_C" = -20;
"@MMK_R_D" = -30;
"@MMK_R_F" = -40;
};
K = {
"@MMK_R_A" = 30;
};
O = {
"@MMK_R_T" = 0;
};
S = {
"@MMK_R_P" = -50;
"@MMK_R_T" = -10;
};
Thorn = {
"@MMK_R_V" = -90;
"@MMK_R_X" = -130;
};
U = {
"@MMK_R_H" = -20;
"@MMK_R_P" = -50;
};
Y = {
A = -100;
};
a = {
b = -10;
c = -10;
j = -60;
n = 0;
};
asterisk = {
"@MMK_R_J" = -40;
"@MMK_R_T" = 30;
AE = -90;
space = 30;
};
at = {
"@MMK_R_V" = -50;
space = 0;
zero = 20;
};
b = {
a = 30;
c = 20;
e = 20;
j = -60;
k = -20;
};
backslash = {
"@MMK_R_j" = 30;
};
braceleft = {
"@MMK_R_U" = -30;
"@MMK_R_V" = 30;
"@MMK_R_j" = 40;
"@MMK_R_y" = 30;
};
bracketleft = {
"@MMK_R_y" = 40;
};
c = {
a = 30;
c = 30;
j = -50;
};
comma = {
"@MMK_R_A" = 50;
"@MMK_R_V" = -130;
};
d = {
j = -60;
};
e = {
a = 30;
b = -10;
c = 30;
g = 20;
j = -30;
};
eight = {
Euro = 20;
endash = 30;
hyphen = 20;
one = -40;
space = 0;
two = -20;
zero = 10;
};
emdash = {
"@MMK_R_C" = 50;
"@MMK_R_O" = 50;
"@MMK_R_S" = 60;
"@MMK_R_Z" = 50;
"@MMK_R_a" = 50;
"@MMK_R_c" = 60;
"@MMK_R_o" = 70;
"@MMK_R_s" = 60;
"@MMK_R_t" = 40;
"@MMK_R_z" = 30;
};
endash = {
"@MMK_R_C" = 50;
"@MMK_R_J" = 0;
"@MMK_R_O" = 50;
"@MMK_R_S" = 60;
"@MMK_R_V" = -50;
"@MMK_R_X" = -40;
"@MMK_R_Z" = 30;
"@MMK_R_c" = 40;
"@MMK_R_o" = 40;
eight = 40;
five = 40;
four = 50;
nine = 20;
six = 50;
three = 30;
zero = 40;
};
eth = {
"@MMK_R_a" = 20;
"@MMK_R_d" = 40;
"@MMK_R_o" = 20;
"@MMK_R_s" = 20;
"@MMK_R_y" = 30;
at = 40;
colon = 40;
hyphen = 50;
question = 50;
quoteleft = 20;
quoteright = 40;
quotesingle = 30;
};
exclamdown = {
"@MMK_R_A" = 40;
"@MMK_R_V" = -50;
"@MMK_R_j" = 30;
"@MMK_R_v" = 31;
"@MMK_R_y" = 60;
AE = 40;
};
f = {
"@MMK_R_c" = -50;
"@MMK_R_d" = -50;
a = -20;
};
five = {
asterisk = 20;
endash = 30;
four = 10;
hyphen = 30;
one = -30;
two = -40;
zero = 20;
};
four = {
Euro = 20;
asterisk = -30;
endash = 30;
five = -20;
nine = -40;
one = -30;
percent = -20;
seven = -60;
six = -10;
two = -60;
};
g = {
"@MMK_R_e" = -10;
b = -30;
g = -20;
n = 10;
};
germandbls = {
"@MMK_R_o" = 20;
quoteleft = -30;
quoteright = -20;
};
guilsinglleft = {
space = -30;
};
guilsinglright = {
"@MMK_R_V" = -50;
"@MMK_R_X" = -30;
AE = -40;
};
hyphen = {
"@MMK_R_C" = 30;
"@MMK_R_O" = 30;
"@MMK_R_S" = 40;
"@MMK_R_T" = -30;
"@MMK_R_V" = -70;
"@MMK_R_X" = -40;
"@MMK_R_Z" = 10;
"@MMK_R_c" = 30;
"@MMK_R_j" = -50;
eight = 20;
eth = 20;
four = 30;
nine = 20;
seven = -30;
six = 30;
space = 20;
zero = 30;
};
j = {
b = -20;
};
k = {
"@MMK_R_a" = -40;
"@MMK_R_e" = -50;
"@MMK_R_i" = -20;
b = -40;
c = -50;
d = -40;
g = -50;
h = -40;
};
l = {
"@MMK_R_t" = 20;
};
n = {
"@MMK_R_v" = -40;
f = 0;
t = 0;
};
nine = {
Euro = 40;
endash = 30;
hyphen = 30;
one = -20;
percent = 20;
two = -20;
zero = 0;
};
o = {
"@MMK_R_a" = 30;
"@MMK_R_c" = 30;
"@MMK_R_d" = 30;
"@MMK_R_k" = -20;
};
one = {
eight = 20;
four = -20;
seven = -20;
six = -20;
space = 0;
three = 20;
two = -40;
};
onesuperior = {
space = 0;
};
oslash = {
"@MMK_R_a" = 20;
"@MMK_R_b" = -20;
"@MMK_R_c" = 20;
"@MMK_R_d" = 20;
"@MMK_R_e" = 20;
"@MMK_R_j" = -40;
"@MMK_R_k" = -20;
};
p = {
"@MMK_R_b" = -20;
"@MMK_R_k" = -20;
};
parenleft = {
"@MMK_R_j" = 30;
};
parenright = {
exclam = 40;
question = 30;
};
percent = {
four = 20;
seven = -30;
six = 20;
two = 20;
};
period = {
"@MMK_R_A" = 40;
"@MMK_R_T" = -60;
"@MMK_R_U" = -50;
"@MMK_R_V" = -70;
"@MMK_R_w" = -50;
"@MMK_R_x" = 40;
AE = 30;
};
questiondown = {
"@MMK_R_A" = 60;
"@MMK_R_C" = -30;
"@MMK_R_D" = 40;
"@MMK_R_T" = -30;
"@MMK_R_U" = -40;
"@MMK_R_V" = -100;
"@MMK_R_X" = 40;
"@MMK_R_Z" = 60;
"@MMK_R_f" = 30;
"@MMK_R_g" = 30;
"@MMK_R_j" = 70;
"@MMK_R_k" = 20;
"@MMK_R_m" = 20;
"@MMK_R_n" = 20;
"@MMK_R_x" = 40;
"@MMK_R_y" = 50;
"@MMK_R_z" = 30;
AE = 50;
l = 20;
};
quotedblleft = {
"@MMK_R_A" = -100;
"@MMK_R_C" = -30;
"@MMK_R_J" = -110;
"@MMK_R_O" = -40;
"@MMK_R_V" = 40;
"@MMK_R_a" = -40;
"@MMK_R_f" = -50;
"@MMK_R_g" = -70;
"@MMK_R_j" = -50;
"@MMK_R_o" = -40;
"@MMK_R_y" = 30;
};
quoteleft = {
"@MMK_R_A" = -30;
"@MMK_R_J" = -90;
"@MMK_R_O" = 10;
"@MMK_R_S" = 20;
"@MMK_R_T" = 30;
"@MMK_R_V" = 30;
"@MMK_R_b" = 20;
"@MMK_R_c" = -40;
"@MMK_R_d" = -20;
"@MMK_R_g" = -30;
"@MMK_R_m" = 30;
"@MMK_R_n" = 30;
"@MMK_R_o" = -30;
"@MMK_R_t" = 40;
"@MMK_R_v" = 40;
"@MMK_R_w" = 30;
"@MMK_R_x" = 40;
"@MMK_R_y" = 60;
"@MMK_R_z" = -20;
question = 30;
};
quoteright = {
"@MMK_R_A" = -60;
AE = -90;
question = 30;
};
quotesinglbase = {
"@MMK_R_A" = 30;
"@MMK_R_T" = -30;
"@MMK_R_V" = -80;
"@MMK_R_a" = 20;
"@MMK_R_y" = 30;
};
quotesingle = {
"@MMK_R_A" = -40;
"@MMK_R_V" = 30;
"@MMK_R_X" = 20;
"@MMK_R_g" = -70;
};
r = {
"@MMK_R_a" = 20;
"@MMK_R_j" = -50;
};
s = {
"@MMK_R_a" = 20;
"@MMK_R_j" = -30;
};
seven = {
Euro = -30;
eight = -40;
endash = -80;
five = -60;
four = -110;
hyphen = -100;
nine = -20;
one = -70;
seven = -20;
six = -50;
three = -40;
two = -50;
zero = -50;
};
six = {
Euro = 30;
endash = 40;
four = 20;
hyphen = 30;
one = -30;
zero = 20;
};
slash = {
"@MMK_R_A" = -60;
"@MMK_R_T" = 30;
"@MMK_R_o" = -30;
"@MMK_R_y" = 40;
};
space = {
"@MMK_R_L" = 0;
};
t = {
"@MMK_R_a" = -10;
"@MMK_R_b" = -40;
"@MMK_R_c" = -20;
"@MMK_R_d" = -10;
"@MMK_R_g" = -20;
"@MMK_R_j" = -30;
"@MMK_R_k" = -20;
"@MMK_R_o" = -20;
"@MMK_R_s" = -10;
};
three = {
Euro = 60;
endash = 40;
hyphen = 20;
one = -20;
space = 0;
two = -40;
};
two = {
Euro = 0;
eight = -20;
endash = 30;
five = -60;
four = -50;
nine = -30;
one = -70;
seven = -50;
six = -40;
three = -40;
zero = -10;
};
u = {
"@MMK_R_t" = 30;
};
underscore = {
"@MMK_R_C" = -50;
"@MMK_R_O" = -30;
"@MMK_R_U" = -70;
"@MMK_R_V" = -110;
"@MMK_R_j" = 40;
"@MMK_R_q" = -20;
"@MMK_R_u" = -30;
AE = 50;
};
v = {
"@MMK_R_c" = 0;
"@MMK_R_d" = -10;
"@MMK_R_g" = -30;
"@MMK_R_j" = -30;
"@MMK_R_k" = 0;
};
w = {
"@MMK_R_k" = -10;
"@MMK_R_q" = -20;
"@MMK_R_t" = 20;
};
x = {
"@MMK_R_i" = 20;
"@MMK_R_k" = 20;
"@MMK_R_n" = 20;
"@MMK_R_r" = 30;
"@MMK_R_t" = 30;
};
y = {
"@MMK_R_c" = -40;
"@MMK_R_d" = -60;
"@MMK_R_e" = -50;
"@MMK_R_g" = -70;
"@MMK_R_j" = -40;
"@MMK_R_k" = -60;
"@MMK_R_q" = -60;
"@MMK_R_r" = -20;
"@MMK_R_t" = 30;
};
z = {
"@MMK_R_b" = -30;
"@MMK_R_g" = -20;
"@MMK_R_j" = -20;
"@MMK_R_t" = 40;
};
zero = {
Euro = 60;
asterisk = 20;
at = 20;
eight = 20;
endash = 40;
five = 20;
four = 20;
hyphen = 30;
nine = 20;
one = -20;
seven = 20;
six = 0;
three = -1;
two = -20;
zero = 0;
};
zerosuperior = {
space = 0;
};
};
"03DC8633-12B9-4C09-834B-15CC0827035A" = {
"@MMK_L_A" = {
"@MMK_R_B" = -20;
"@MMK_R_C" = -50;
"@MMK_R_J" = 40;
"@MMK_R_K" = -20;
"@MMK_R_O" = -30;
"@MMK_R_T" = -130;
"@MMK_R_U" = -60;
"@MMK_R_V" = -110;
Eth = -70;
question = -50;
quotedblright = -120;
quoteleft = -30;
quoteright = -100;
quotesingle = -90;
zerosuperior = -40;
};
"@MMK_L_B" = {
"@MMK_R_A" = -50;
"@MMK_R_C" = -20;
"@MMK_R_D" = -20;
"@MMK_R_H" = -40;
"@MMK_R_K" = 0;
"@MMK_R_L" = -30;
"@MMK_R_O" = -30;
"@MMK_R_V" = -30;
"@MMK_R_X" = -70;
"@MMK_R_a" = -30;
"@MMK_R_c" = -20;
"@MMK_R_d" = -30;
"@MMK_R_g" = -20;
"@MMK_R_j" = -120;
"@MMK_R_o" = -50;
"@MMK_R_q" = -20;
"@MMK_R_u" = -40;
"@MMK_R_v" = -20;
"@MMK_R_x" = -40;
"@MMK_R_y" = -60;
AE = -70;
Eth = -70;
Y = -60;
emdash = 40;
endash = 40;
parenright = -40;
period = -70;
quotedblright = -30;
quoteright = -30;
slash = -30;
};
"@MMK_L_C" = {
"@MMK_R_B" = 30;
"@MMK_R_C" = 20;
"@MMK_R_E" = 30;
"@MMK_R_J" = 40;
"@MMK_R_K" = 30;
"@MMK_R_O" = 0;
"@MMK_R_a" = 0;
"@MMK_R_g" = -20;
"@MMK_R_i" = 0;
"@MMK_R_j" = -60;
"@MMK_R_o" = 30;
"@MMK_R_u" = 0;
"@MMK_R_v" = -20;
"@MMK_R_y" = -10;
AE = -30;
Eth = -70;
O = 30;
Q = 40;
S = 50;
braceright = 30;
bracketright = 40;
emdash = 60;
endash = 80;
hyphen = 0;
idieresis = 70;
parenright = 30;
question = 30;
quotedblright = 50;
quoteleft = 30;
quoteright = 40;
quotesingle = 30;
slash = 20;
space = 0;
w = 0;
};
"@MMK_L_D" = {
"@MMK_R_A" = -50;
"@MMK_R_T" = -50;
"@MMK_R_V" = -40;
"@MMK_R_X" = -70;
"@MMK_R_Z" = -40;
"@MMK_R_j" = -80;
"@MMK_R_y" = -30;
AE = -100;
Eth = -30;
braceright = -30;
emdash = 40;
endash = 60;
quoteright = -20;
slash = -20;
};
"@MMK_L_E" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = -30;
"@MMK_R_O" = -40;
"@MMK_R_T" = -30;
"@MMK_R_V" = -30;
"@MMK_R_X" = -60;
"@MMK_R_a" = -40;
"@MMK_R_c" = -50;
"@MMK_R_i" = 40;
"@MMK_R_j" = -90;
"@MMK_R_o" = -60;
"@MMK_R_q" = -40;
"@MMK_R_s" = -40;
"@MMK_R_y" = -60;
AE = -70;
Eth = -90;
idieresis = 40;
quotedblright = 20;
quoteright = -20;
quotesingle = 30;
space = 0;
};
"@MMK_L_F" = {
"@MMK_R_A" = -170;
"@MMK_R_C" = -70;
"@MMK_R_D" = -40;
"@MMK_R_E" = -30;
"@MMK_R_F" = -30;
"@MMK_R_H" = -40;
"@MMK_R_I" = -50;
"@MMK_R_J" = -170;
"@MMK_R_K" = -50;
"@MMK_R_L" = -30;
"@MMK_R_M" = -20;
"@MMK_R_N" = -30;
"@MMK_R_O" = -80;
"@MMK_R_P" = -30;
"@MMK_R_R" = -30;
"@MMK_R_S" = -20;
"@MMK_R_T" = -40;
"@MMK_R_U" = -30;
"@MMK_R_V" = -30;
"@MMK_R_X" = -60;
"@MMK_R_Z" = -50;
"@MMK_R_a" = -110;
"@MMK_R_c" = -130;
"@MMK_R_d" = -140;
"@MMK_R_f" = -50;
"@MMK_R_g" = -110;
"@MMK_R_i" = -40;
"@MMK_R_j" = -170;
"@MMK_R_l" = -30;
"@MMK_R_m" = -80;
"@MMK_R_n" = -90;
"@MMK_R_o" = -120;
"@MMK_R_p" = -90;
"@MMK_R_q" = -110;
"@MMK_R_r" = -60;
"@MMK_R_s" = -110;
"@MMK_R_t" = -70;
"@MMK_R_u" = -100;
"@MMK_R_v" = -110;
"@MMK_R_x" = -100;
"@MMK_R_y" = -90;
"@MMK_R_z" = -110;
AE = -230;
Eth = -110;
at = -60;
bracketright = -20;
comma = -110;
emdash = -70;
endash = -50;
eth = -120;
germandbls = -40;
guilsinglright = -90;
hyphen = -100;
idieresis = 20;
parenright = -30;
period = -170;
quotedblright = 20;
quoteright = 0;
quotesingle = 30;
slash = -80;
};
"@MMK_L_H" = {
"@MMK_R_H" = 0;
"@MMK_R_c" = -30;
"@MMK_R_j" = -90;
"@MMK_R_o" = -30;
"@MMK_R_y" = -40;
idieresis = 40;
};
"@MMK_L_I" = {
"@MMK_R_a" = -20;
"@MMK_R_c" = -30;
"@MMK_R_d" = -30;
"@MMK_R_g" = -20;
"@MMK_R_j" = -110;
"@MMK_R_o" = -30;
"@MMK_R_s" = -30;
"@MMK_R_u" = -30;
"@MMK_R_v" = -20;
"@MMK_R_y" = -30;
};
"@MMK_L_J" = {
"@MMK_R_A" = -50;
"@MMK_R_B" = -30;
"@MMK_R_K" = -20;
"@MMK_R_L" = -20;
"@MMK_R_X" = -30;
"@MMK_R_a" = -30;
"@MMK_R_b" = 30;
"@MMK_R_c" = 0;
"@MMK_R_d" = -30;
"@MMK_R_g" = 10;
"@MMK_R_h" = 30;
"@MMK_R_i" = 40;
"@MMK_R_j" = -110;
"@MMK_R_l" = 20;
"@MMK_R_o" = 0;
"@MMK_R_s" = 10;
"@MMK_R_u" = -40;
"@MMK_R_y" = 10;
"@MMK_R_z" = 30;
AE = -110;
Eth = -40;
at = -50;
braceright = 40;
bracketright = 20;
comma = -30;
emdash = 40;
endash = 0;
eth = 20;
exclam = 30;
hyphen = 30;
idieresis = 80;
parenright = 60;
period = -50;
quotedblright = 50;
quoteright = 40;
slash = 20;
};
"@MMK_L_K" = {
"@MMK_R_B" = 0;
"@MMK_R_C" = -70;
"@MMK_R_D" = -20;
"@MMK_R_E" = -40;
"@MMK_R_H" = -40;
"@MMK_R_I" = -50;
"@MMK_R_J" = 0;
"@MMK_R_K" = -20;
"@MMK_R_O" = -100;
"@MMK_R_R" = -40;
"@MMK_R_S" = -50;
"@MMK_R_T" = -100;
"@MMK_R_U" = -50;
"@MMK_R_V" = -70;
"@MMK_R_Z" = -60;
"@MMK_R_a" = -70;
"@MMK_R_c" = -80;
"@MMK_R_d" = -90;
"@MMK_R_f" = -50;
"@MMK_R_g" = -50;
"@MMK_R_i" = -40;
"@MMK_R_j" = -80;
"@MMK_R_o" = -90;
"@MMK_R_s" = -60;
"@MMK_R_t" = -70;
"@MMK_R_u" = -60;
"@MMK_R_v" = -90;
"@MMK_R_x" = -20;
"@MMK_R_y" = -80;
"@MMK_R_z" = -40;
AE = -40;
Eth = -100;
Thorn = -50;
emdash = -40;
eth = -80;
hyphen = -30;
parenright = -20;
question = -50;
quoteleft = -40;
quoteright = -30;
quotesingle = -60;
};
"@MMK_L_L" = {
"@MMK_R_C" = -20;
"@MMK_R_T" = -150;
"@MMK_R_V" = -120;
"@MMK_R_j" = -60;
"@MMK_R_y" = -60;
Eth = -50;
Y = -160;
foursuperior = -40;
onesuperior = -30;
parenright = -20;
question = -70;
quotedblright = -90;
quoteleft = -50;
quoteright = -70;
quotesingle = -90;
threesuperior = -30;
twosuperior = -30;
zerosuperior = -60;
};
"@MMK_L_M" = {
"@MMK_R_c" = -30;
"@MMK_R_e" = -30;
"@MMK_R_j" = -70;
"@MMK_R_y" = -30;
Y = -40;
endash = 40;
};
"@MMK_L_N" = {
"@MMK_R_j" = -80;
"@MMK_R_y" = -20;
AE = -40;
endash = 40;
idieresis = 30;
};
"@MMK_L_O" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = 0;
"@MMK_R_T" = -60;
"@MMK_R_V" = -50;
"@MMK_R_X" = -90;
"@MMK_R_f" = 20;
"@MMK_R_j" = -80;
"@MMK_R_t" = 30;
"@MMK_R_y" = -30;
AE = -90;
W = -40;
bracketright = -30;
emdash = 50;
endash = 70;
question = 20;
quotedblright = -20;
slash = 20;
};
"@MMK_L_P" = {
"@MMK_R_A" = -90;
"@MMK_R_T" = -80;
"@MMK_R_V" = -40;
"@MMK_R_X" = -90;
"@MMK_R_Z" = -50;
"@MMK_R_a" = -40;
"@MMK_R_c" = -40;
"@MMK_R_d" = -50;
"@MMK_R_e" = -30;
"@MMK_R_g" = -70;
"@MMK_R_j" = -120;
"@MMK_R_l" = -30;
"@MMK_R_m" = -30;
"@MMK_R_n" = -30;
"@MMK_R_o" = -40;
"@MMK_R_s" = -40;
"@MMK_R_x" = -20;
"@MMK_R_z" = -30;
AE = -170;
J = -30;
K = -30;
Y = -70;
bracketright = -30;
comma = -70;
eth = -50;
hyphen = -30;
parenright = -40;
period = -70;
quoteright = 0;
slash = -40;
};
"@MMK_L_R" = {
"@MMK_R_T" = -30;
"@MMK_R_V" = -50;
"@MMK_R_X" = -50;
"@MMK_R_a" = -30;
"@MMK_R_c" = -20;
"@MMK_R_d" = -30;
"@MMK_R_j" = -60;
"@MMK_R_o" = -30;
bracketright = -20;
eth = -20;
slash = 30;
};
"@MMK_L_S" = {
"@MMK_R_F" = 30;
"@MMK_R_J" = 40;
"@MMK_R_a" = 20;
"@MMK_R_b" = 20;
"@MMK_R_c" = 20;
"@MMK_R_d" = 20;
"@MMK_R_g" = 20;
"@MMK_R_h" = 20;
"@MMK_R_j" = -50;
"@MMK_R_k" = 20;
G = 40;
emdash = 60;
endash = 80;
hyphen = 40;
idieresis = 50;
quotedblright = 20;
slash = 40;
};
"@MMK_L_T" = {
"@MMK_R_A" = -150;
"@MMK_R_C" = -50;
"@MMK_R_H" = 0;
"@MMK_R_J" = -130;
"@MMK_R_O" = -50;
"@MMK_R_a" = -120;
"@MMK_R_c" = -140;
"@MMK_R_e" = -120;
"@MMK_R_f" = -60;
"@MMK_R_g" = -150;
"@MMK_R_h" = -20;
"@MMK_R_i" = -30;
"@MMK_R_j" = -130;
"@MMK_R_l" = -20;
"@MMK_R_m" = -70;
"@MMK_R_n" = -70;
"@MMK_R_o" = -150;
"@MMK_R_p" = -80;
"@MMK_R_r" = -80;
"@MMK_R_s" = -120;
"@MMK_R_t" = -60;
"@MMK_R_u" = -120;
"@MMK_R_v" = -120;
"@MMK_R_x" = -130;
"@MMK_R_y" = -130;
"@MMK_R_z" = -90;
AE = -160;
at = -50;
comma = -120;
emdash = -30;
endash = -80;
eth = -100;
guilsinglright = -60;
hyphen = -80;
idieresis = 40;
parenright = 30;
quotedblright = 20;
quoteright = 20;
quotesingle = 30;
slash = -70;
};
"@MMK_L_U" = {
"@MMK_R_A" = -50;
"@MMK_R_H" = 0;
"@MMK_R_j" = -80;
AE = -70;
endash = 40;
idieresis = 40;
parenright = 40;
quoteright = 20;
slash = -30;
};
"@MMK_L_V" = {
"@MMK_R_A" = -110;
"@MMK_R_C" = -50;
"@MMK_R_H" = 0;
"@MMK_R_J" = -60;
"@MMK_R_K" = -20;
"@MMK_R_O" = 0;
"@MMK_R_a" = -100;
"@MMK_R_c" = -100;
"@MMK_R_e" = -50;
"@MMK_R_f" = -20;
"@MMK_R_g" = -80;
"@MMK_R_j" = -110;
"@MMK_R_n" = -40;
"@MMK_R_o" = -100;
"@MMK_R_p" = -50;
"@MMK_R_r" = -50;
"@MMK_R_s" = -60;
"@MMK_R_u" = -20;
"@MMK_R_x" = -60;
"@MMK_R_y" = -40;
"@MMK_R_z" = -60;
A = -120;
AE = -200;
Eth = -60;
J = -70;
O = -30;
at = -50;
comma = -40;
endash = -50;
eth = -90;
guilsinglright = -30;
hyphen = -40;
idieresis = 90;
parenright = 50;
period = -90;
quotedblright = 40;
quoteright = 30;
quotesingle = 30;
slash = -80;
};
"@MMK_L_X" = {
"@MMK_R_C" = -40;
"@MMK_R_O" = -60;
"@MMK_R_T" = -30;
"@MMK_R_X" = -40;
"@MMK_R_y" = -70;
Eth = -70;
at = -60;
endash = -50;
eth = -50;
hyphen = -70;
};
"@MMK_L_Z" = {
"@MMK_R_C" = -30;
"@MMK_R_J" = 20;
"@MMK_R_X" = -50;
"@MMK_R_a" = -30;
"@MMK_R_c" = -30;
"@MMK_R_o" = -30;
"@MMK_R_u" = -30;
"@MMK_R_v" = -40;
"@MMK_R_y" = -30;
AE = -40;
Eth = -80;
};
"@MMK_L_a" = {
"@MMK_R_j" = -80;
"@MMK_R_u" = -30;
"@MMK_R_v" = -70;
"@MMK_R_x" = -30;
"@MMK_R_y" = -60;
braceright = -40;
bracketright = -30;
emdash = 30;
endash = 50;
guilsinglleft = -30;
question = -50;
quotedblright = -90;
quoteleft = -40;
quoteright = -60;
quotesingle = -80;
};
"@MMK_L_b" = {
"@MMK_R_n" = 0;
"@MMK_R_x" = -20;
"@MMK_R_y" = -50;
braceright = -30;
bracketright = -30;
emdash = 60;
endash = 70;
hyphen = 30;
question = -70;
quotedblright = -70;
quoteleft = -40;
quoteright = -40;
quotesingle = -50;
};
"@MMK_L_c" = {
"@MMK_R_j" = -50;
"@MMK_R_s" = 0;
"@MMK_R_v" = -10;
braceright = 0;
emdash = 50;
endash = 20;
guilsinglleft = -30;
hyphen = 10;
question = -30;
quotedblright = 20;
quoteright = 20;
slash = 30;
};
"@MMK_L_d" = {
"@MMK_R_j" = -40;
braceright = 30;
emdash = 50;
endash = 80;
hyphen = 50;
idieresis = 50;
parenright = 30;
quotedblright = 20;
quoteright = 20;
slash = 30;
};
"@MMK_L_e" = {
"@MMK_R_j" = -70;
"@MMK_R_v" = -40;
"@MMK_R_y" = -40;
emdash = 60;
endash = 70;
germandbls = 30;
hyphen = 40;
question = -40;
quoteright = -30;
slash = 40;
};
"@MMK_L_f" = {
"@MMK_R_h" = 50;
"@MMK_R_j" = -70;
"@MMK_R_k" = 40;
"@MMK_R_l" = 30;
braceright = 60;
bracketright = 80;
comma = -70;
emdash = 30;
endash = 50;
exclam = 80;
foursuperior = 40;
guilsinglleft = -20;
idieresis = 90;
onesuperior = 80;
parenright = 90;
period = -100;
question = 60;
quotedblright = 70;
quoteleft = 20;
quoteright = 80;
quotesingle = 90;
slash = 20;
threesuperior = 30;
twosuperior = 30;
zerosuperior = 40;
};
"@MMK_L_g" = {
"@MMK_R_j" = -60;
emdash = 50;
endash = 50;
hyphen = 20;
question = -40;
quotedblright = -20;
quoteleft = -20;
quoteright = -30;
slash = 30;
};
"@MMK_L_h" = {
"@MMK_R_j" = -30;
"@MMK_R_v" = -20;
bracketright = -30;
emdash = 50;
endash = 40;
hyphen = 40;
question = -50;
quotedblright = -60;
quoteright = -50;
space = 0;
};
"@MMK_L_i" = {
"@MMK_R_j" = -30;
"@MMK_R_s" = -20;
"@MMK_R_y" = -10;
braceright = 40;
emdash = 30;
hyphen = 20;
idieresis = 50;
parenright = 40;
quotedblright = 20;
};
"@MMK_L_k" = {
"@MMK_R_a" = -60;
"@MMK_R_c" = -60;
"@MMK_R_g" = -60;
"@MMK_R_j" = -90;
"@MMK_R_o" = -70;
"@MMK_R_s" = -50;
"@MMK_R_v" = -30;
"@MMK_R_x" = -30;
"@MMK_R_y" = -40;
bracketright = -50;
comma = -50;
guilsinglright = -60;
hyphen = -50;
parenright = -50;
period = -50;
question = -70;
quotedblright = -40;
quoteleft = -40;
quoteright = -50;
slash = -20;
};
"@MMK_L_l" = {
"@MMK_R_c" = -40;
"@MMK_R_g" = -40;
"@MMK_R_j" = -30;
"@MMK_R_o" = 0;
"@MMK_R_s" = -10;
"@MMK_R_u" = -40;
braceright = 40;
emdash = 40;
endash = 40;
hyphen = 20;
idieresis = 50;
parenright = 40;
slash = 30;
};
"@MMK_L_m" = {
bracketright = -20;
emdash = 40;
endash = 50;
question = -30;
quotedblright = -60;
quoteright = -40;
quotesingle = -50;
slash = 20;
};
"@MMK_L_n" = {
"@MMK_R_j" = -40;
bracketright = -3;
emdash = 40;
endash = 30;
hyphen = 40;
quotedblright = -50;
quoteright = -30;
quotesingle = -40;
};
"@MMK_L_o" = {
"@MMK_R_j" = -70;
"@MMK_R_t" = 20;
"@MMK_R_v" = -40;
bracketright = -30;
emdash = 50;
endash = 50;
hyphen = 20;
parenright = -30;
question = -70;
quotedblright = -50;
quoteleft = -30;
quoteright = -30;
quotesingle = -30;
};
"@MMK_L_p" = {
"@MMK_R_j" = -70;
"@MMK_R_v" = -40;
"@MMK_R_y" = -40;
bracketright = -30;
emdash = 50;
endash = 50;
hyphen = 30;
question = -50;
quotedblright = -50;
quoteright = -50;
quotesingle = -40;
};
"@MMK_L_q" = {
"@MMK_R_f" = 20;
emdash = 40;
endash = 30;
parenright = 30;
question = 0;
slash = 60;
};
"@MMK_L_r" = {
"@MMK_R_j" = -100;
comma = -90;
guilsinglleft = -50;
guilsinglright = -30;
period = -100;
quotedblright = 20;
};
"@MMK_L_s" = {
"@MMK_R_a" = -30;
"@MMK_R_c" = -20;
"@MMK_R_j" = -50;
"@MMK_R_o" = -20;
"@MMK_R_u" = -20;
"@MMK_R_v" = -50;
"@MMK_R_x" = -20;
"@MMK_R_y" = -30;
"@MMK_R_z" = -30;
asterisk = 0;
braceright = -30;
bracketright = -30;
endash = 20;
guilsinglright = -40;
hyphen = 30;
question = -40;
quotedblright = -30;
quoteleft = -20;
quoteright = -40;
quotesingle = -60;
};
"@MMK_L_t" = {
"@MMK_R_j" = -80;
"@MMK_R_s" = -30;
"@MMK_R_v" = -20;
"@MMK_R_y" = -40;
guilsinglleft = -50;
guilsinglright = -50;
hyphen = 0;
parenright = 30;
question = -30;
quotedblright = -20;
quoteright = -30;
quotesingle = -10;
slash = 30;
};
"@MMK_L_u" = {
"@MMK_R_j" = -70;
"@MMK_R_y" = -20;
endash = 30;
hyphen = 20;
question = -60;
quotedblright = -30;
quoteright = -30;
};
"@MMK_L_v" = {
"@MMK_R_c" = -20;
"@MMK_R_g" = -20;
"@MMK_R_j" = -110;
"@MMK_R_o" = -30;
"@MMK_R_s" = -40;
comma = -60;
eth = -40;
guilsinglleft = -50;
period = -60;
};
"@MMK_L_w" = {
"@MMK_R_j" = -70;
comma = -40;
paragraph = 90;
};
"@MMK_L_x" = {
"@MMK_R_a" = -40;
"@MMK_R_c" = -40;
"@MMK_R_g" = -20;
"@MMK_R_i" = -30;
"@MMK_R_j" = -80;
"@MMK_R_o" = -40;
"@MMK_R_s" = -40;
"@MMK_R_y" = -30;
asterisk = -70;
guilsinglright = -70;
parenright = -30;
question = -30;
quoteleft = -40;
quoteright = -30;
};
"@MMK_L_y" = {
"@MMK_R_a" = -80;
"@MMK_R_b" = -40;
"@MMK_R_c" = -70;
"@MMK_R_f" = -30;
"@MMK_R_g" = -60;
"@MMK_R_h" = -40;
"@MMK_R_i" = -50;
"@MMK_R_j" = -130;
"@MMK_R_k" = -30;
"@MMK_R_l" = -30;
"@MMK_R_m" = -40;
"@MMK_R_n" = -30;
"@MMK_R_o" = -70;
"@MMK_R_p" = -40;
"@MMK_R_r" = -40;
"@MMK_R_s" = -70;
"@MMK_R_t" = -30;
"@MMK_R_v" = -40;
"@MMK_R_x" = -40;
"@MMK_R_z" = -50;
asterisk = 0;
braceright = -40;
bracketright = -60;
comma = -100;
eth = -50;
germandbls = -30;
guilsinglleft = -80;
guilsinglright = -80;
period = -100;
quoteleft = -10;
quoteright = -20;
};
"@MMK_L_z" = {
"@MMK_R_a" = -30;
"@MMK_R_c" = -40;
"@MMK_R_j" = -40;
"@MMK_R_s" = -40;
guilsinglright = -50;
quotedblright = -30;
quoteright = -10;
quotesingle = -20;
};
Euro = {
six = -30;
zero = -40;
};
W = {
"@MMK_R_a" = -40;
"@MMK_R_c" = -70;
"@MMK_R_f" = 0;
"@MMK_R_g" = -70;
"@MMK_R_o" = -70;
bracketright = 40;
quoteright = 40;
quotesingle = 40;
};
X = {
"@MMK_R_a" = -70;
"@MMK_R_c" = -80;
"@MMK_R_f" = -40;
"@MMK_R_g" = -30;
"@MMK_R_o" = -60;
"@MMK_R_v" = -30;
w = -20;
};
Y = {
"@MMK_R_c" = -140;
"@MMK_R_g" = -130;
"@MMK_R_j" = -130;
"@MMK_R_m" = -50;
"@MMK_R_n" = -80;
"@MMK_R_o" = -150;
"@MMK_R_p" = -80;
"@MMK_R_r" = -70;
"@MMK_R_s" = -130;
"@MMK_R_t" = -30;
bracketright = 30;
comma = -80;
};
at = {
"@MMK_R_D" = -30;
"@MMK_R_T" = -50;
"@MMK_R_V" = -50;
"@MMK_R_X" = -60;
"@MMK_R_j" = -100;
};
b = {
"@MMK_R_o" = 0;
};
backslash = {
one = -30;
seven = -40;
};
braceleft = {
"@MMK_R_C" = -30;
"@MMK_R_a" = -40;
"@MMK_R_b" = 20;
"@MMK_R_c" = -20;
"@MMK_R_g" = 20;
"@MMK_R_h" = 30;
"@MMK_R_i" = 40;
"@MMK_R_j" = 40;
"@MMK_R_k" = 30;
"@MMK_R_l" = 40;
"@MMK_R_o" = -30;
"@MMK_R_s" = -30;
};
bracketleft = {
"@MMK_R_a" = -30;
"@MMK_R_c" = -20;
"@MMK_R_j" = 20;
"@MMK_R_o" = -20;
W = 40;
Y = 30;
};
comma = {
seven = -60;
};
eight = {
eight = -10;
endash = 50;
four = 20;
hyphen = 30;
seven = -20;
};
emdash = {
"@MMK_R_B" = 40;
"@MMK_R_C" = 70;
"@MMK_R_D" = 40;
"@MMK_R_E" = 40;
"@MMK_R_F" = 40;
"@MMK_R_L" = 30;
"@MMK_R_O" = 50;
"@MMK_R_P" = 20;
"@MMK_R_R" = 40;
"@MMK_R_T" = -30;
"@MMK_R_V" = -30;
"@MMK_R_a" = 40;
"@MMK_R_b" = 50;
"@MMK_R_c" = 60;
"@MMK_R_f" = 40;
"@MMK_R_g" = 60;
"@MMK_R_h" = 50;
"@MMK_R_i" = 40;
"@MMK_R_j" = -30;
"@MMK_R_k" = 50;
"@MMK_R_l" = 40;
"@MMK_R_m" = 40;
"@MMK_R_n" = 40;
"@MMK_R_o" = 60;
"@MMK_R_p" = 40;
"@MMK_R_s" = 40;
"@MMK_R_t" = 30;
"@MMK_R_u" = 20;
W = 0;
};
endash = {
"@MMK_R_B" = 40;
"@MMK_R_C" = 60;
"@MMK_R_E" = 40;
"@MMK_R_K" = 40;
"@MMK_R_L" = 40;
"@MMK_R_M" = 40;
"@MMK_R_N" = 40;
"@MMK_R_O" = 70;
"@MMK_R_P" = 40;
"@MMK_R_S" = 50;
"@MMK_R_T" = -80;
"@MMK_R_U" = 40;
"@MMK_R_V" = 0;
"@MMK_R_X" = -30;
"@MMK_R_a" = 50;
"@MMK_R_b" = 70;
"@MMK_R_c" = 70;
"@MMK_R_f" = 50;
"@MMK_R_g" = 90;
"@MMK_R_h" = 50;
"@MMK_R_k" = 50;
"@MMK_R_l" = 30;
"@MMK_R_n" = 50;
"@MMK_R_o" = 70;
"@MMK_R_p" = 30;
"@MMK_R_r" = 30;
"@MMK_R_s" = 40;
"@MMK_R_t" = 50;
"@MMK_R_u" = 40;
"@MMK_R_x" = -30;
Y = -80;
eight = 80;
five = 50;
four = 110;
nine = 40;
one = 20;
seven = -40;
six = 50;
three = 30;
two = 30;
zero = 60;
};
exclamdown = {
"@MMK_R_f" = 30;
"@MMK_R_g" = 30;
};
five = {
backslash = 0;
endash = 50;
five = 0;
four = 30;
hyphen = 30;
seven = -20;
six = -20;
three = 20;
};
four = {
endash = 80;
five = 20;
four = 40;
one = -40;
seven = -30;
};
germandbls = {
"@MMK_R_c" = 40;
"@MMK_R_n" = 40;
"@MMK_R_v" = -30;
comma = 20;
quoteleft = -20;
};
guillemotleft = {
guillemotright = 0;
};
guilsinglleft = {
"@MMK_R_S" = 40;
};
hyphen = {
"@MMK_R_C" = 30;
"@MMK_R_P" = 0;
"@MMK_R_T" = -80;
"@MMK_R_V" = -40;
"@MMK_R_X" = -70;
"@MMK_R_b" = 30;
"@MMK_R_c" = 40;
"@MMK_R_f" = 50;
"@MMK_R_g" = 40;
"@MMK_R_h" = 20;
"@MMK_R_i" = 30;
"@MMK_R_j" = -40;
"@MMK_R_k" = 20;
"@MMK_R_l" = 20;
"@MMK_R_m" = 20;
"@MMK_R_o" = 30;
"@MMK_R_p" = 20;
"@MMK_R_t" = 40;
"@MMK_R_u" = 30;
Y = -70;
eight = 50;
five = 30;
four = 60;
nine = 20;
six = 20;
space = 0;
};
idieresis = {
"@MMK_R_b" = 60;
"@MMK_R_h" = 60;
"@MMK_R_i" = 70;
"@MMK_R_k" = 60;
"@MMK_R_l" = 50;
backslash = 70;
braceright = 90;
bracketright = 60;
exclam = 70;
parenright = 50;
question = 50;
quoteleft = 40;
quoteright = 60;
quotesingle = 80;
};
nine = {
endash = 50;
four = 20;
hyphen = 20;
nine = -10;
six = -20;
};
one = {
backslash = 40;
eight = 20;
endash = 30;
five = 70;
four = 70;
nine = 20;
seven = 30;
six = 40;
three = 70;
two = 50;
};
parenleft = {
"@MMK_R_C" = -30;
"@MMK_R_D" = 30;
"@MMK_R_T" = 30;
"@MMK_R_U" = 40;
"@MMK_R_V" = 50;
"@MMK_R_b" = 40;
"@MMK_R_c" = -30;
"@MMK_R_h" = 40;
"@MMK_R_i" = 40;
"@MMK_R_j" = 40;
"@MMK_R_k" = 50;
"@MMK_R_l" = 40;
"@MMK_R_o" = -60;
"@MMK_R_p" = 20;
"@MMK_R_t" = 30;
};
parenright = {
space = 0;
};
percent = {
three = 30;
};
period = {
"@MMK_R_V" = -80;
"@MMK_R_v" = -80;
"@MMK_R_y" = -50;
Y = -100;
one = -40;
seven = -40;
};
questiondown = {
"@MMK_R_C" = -60;
"@MMK_R_H" = -40;
"@MMK_R_I" = -50;
"@MMK_R_K" = -60;
"@MMK_R_L" = -50;
"@MMK_R_M" = -40;
"@MMK_R_N" = -40;
"@MMK_R_O" = -50;
"@MMK_R_P" = -40;
"@MMK_R_V" = -130;
"@MMK_R_a" = -50;
"@MMK_R_c" = -60;
"@MMK_R_f" = -50;
"@MMK_R_g" = 20;
"@MMK_R_h" = -30;
"@MMK_R_i" = -50;
"@MMK_R_l" = -50;
"@MMK_R_m" = -40;
"@MMK_R_n" = -40;
"@MMK_R_o" = -50;
"@MMK_R_r" = -30;
"@MMK_R_s" = -30;
"@MMK_R_t" = -80;
"@MMK_R_u" = -60;
W = -80;
Y = -160;
eth = -70;
seven = -90;
};
quotedblleft = {
"@MMK_R_A" = -120;
"@MMK_R_B" = 30;
"@MMK_R_C" = 30;
"@MMK_R_D" = 30;
"@MMK_R_E" = 30;
"@MMK_R_J" = -100;
"@MMK_R_O" = -20;
"@MMK_R_R" = -20;
"@MMK_R_S" = 20;
"@MMK_R_T" = 20;
"@MMK_R_V" = 0;
"@MMK_R_a" = -70;
"@MMK_R_b" = 20;
"@MMK_R_c" = -60;
"@MMK_R_f" = 10;
"@MMK_R_g" = -70;
"@MMK_R_i" = 10;
"@MMK_R_j" = -90;
"@MMK_R_k" = 20;
"@MMK_R_o" = -50;
"@MMK_R_r" = -20;
"@MMK_R_s" = -30;
"@MMK_R_t" = 40;
"@MMK_R_u" = -20;
"@MMK_R_z" = -20;
W = 40;
w = 40;
};
quoteleft = {
"@MMK_R_A" = -100;
"@MMK_R_J" = -80;
"@MMK_R_T" = 20;
"@MMK_R_V" = 20;
"@MMK_R_X" = -30;
"@MMK_R_a" = -70;
"@MMK_R_c" = -40;
"@MMK_R_g" = -50;
"@MMK_R_j" = -50;
"@MMK_R_m" = -20;
"@MMK_R_o" = -60;
"@MMK_R_s" = -40;
"@MMK_R_t" = 30;
"@MMK_R_u" = -30;
W = 40;
w = 30;
};
quoteright = {
"@MMK_R_A" = -120;
"@MMK_R_C" = -30;
"@MMK_R_J" = -100;
"@MMK_R_a" = -80;
"@MMK_R_b" = 0;
"@MMK_R_c" = -30;
"@MMK_R_j" = -90;
"@MMK_R_o" = -30;
"@MMK_R_s" = -50;
"@MMK_R_u" = -40;
"@MMK_R_x" = -30;
"@MMK_R_z" = -30;
AE = -150;
space = 0;
};
quotesinglbase = {
"@MMK_R_V" = -120;
};
quotesingle = {
"@MMK_R_A" = -90;
"@MMK_R_F" = 0;
"@MMK_R_J" = -100;
"@MMK_R_T" = 30;
"@MMK_R_a" = -70;
"@MMK_R_c" = -10;
"@MMK_R_g" = -50;
"@MMK_R_o" = -30;
"@MMK_R_t" = 40;
"@MMK_R_u" = -10;
"@MMK_R_z" = -20;
W = 40;
w = 40;
};
seven = {
comma = -40;
eight = -20;
endash = -30;
four = -70;
guilsinglleft = -40;
guilsinglright = -30;
hyphen = -40;
period = -40;
six = 0;
three = 20;
two = -30;
};
six = {
endash = 50;
four = 30;
hyphen = 30;
three = 0;
zero = -20;
};
slash = {
"@MMK_R_C" = -10;
"@MMK_R_J" = -30;
"@MMK_R_L" = -30;
"@MMK_R_O" = -20;
"@MMK_R_S" = 10;
"@MMK_R_V" = 20;
"@MMK_R_b" = 30;
"@MMK_R_c" = 0;
"@MMK_R_f" = 20;
"@MMK_R_j" = -50;
"@MMK_R_l" = 20;
"@MMK_R_o" = -50;
};
sterling = {
zero = -30;
};
three = {
backslash = 0;
endash = 40;
four = 20;
seven = -30;
six = -30;
three = 30;
zero = -20;
};
two = {
endash = 30;
question = -40;
three = 30;
};
w = {
quotedblright = 30;
quoteright = 30;
quotesingle = 30;
};
x = {
quotedblright = -30;
};
y = {
quotedblright = -40;
};
yen = {
eight = -40;
one = -30;
six = -50;
two = -40;
zero = -60;
};
zero = {
endash = 60;
four = 20;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "© Luca Marsano and Collletttivo";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = Collletttivo;
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Luca Marsano";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL_web";
},
{
key = licenses;
values = (
{
language = ENG;
value = "SIL OpenFont License";
}
);
},
{
key = designerURL;
value = "https://collletttivo.it/";
},
{
key = vendorID;
value = CLT;
}
);
settings = {
disablesNiceNames = 1;
};
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
m01 = {
HV = "83";
};
};
};
versionMajor = 1;
versionMinor = 500;
}
